
STM32_Discovery_approach.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009378  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08009508  08009508  00019508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009580  08009580  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009588  08009588  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009588  08009588  00019588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800958c  0800958c  0001958c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  20000090  08009620  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b0  08009620  000208b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a454  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038a2  00000000  00000000  0003a514  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001278  00000000  00000000  0003ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  0003f030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024c98  00000000  00000000  00040138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123c6  00000000  00000000  00064dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfd2d  00000000  00000000  00077196  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146ec3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fec  00000000  00000000  00146f40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094f0 	.word	0x080094f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080094f0 	.word	0x080094f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	f023 030f 	bic.w	r3, r3, #15
 8000596:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000598:	7bbb      	ldrb	r3, [r7, #14]
 800059a:	f043 030c 	orr.w	r3, r3, #12
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	723b      	strb	r3, [r7, #8]
 80005a2:	7bbb      	ldrb	r3, [r7, #14]
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	727b      	strb	r3, [r7, #9]
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	f043 030c 	orr.w	r3, r3, #12
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	72bb      	strb	r3, [r7, #10]
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <lcd16x2_i2c_sendCommand+0x60>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <lcd16x2_i2c_sendCommand+0x64>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b299      	uxth	r1, r3
 80005ca:	f107 0208 	add.w	r2, r7, #8
 80005ce:	23c8      	movs	r3, #200	; 0xc8
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2304      	movs	r3, #4
 80005d4:	f003 fb30 	bl	8003c38 <HAL_I2C_Master_Transmit>
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000ac 	.word	0x200000ac
 80005e4:	200000b0 	.word	0x200000b0

080005e8 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f023 030f 	bic.w	r3, r3, #15
 80005fe:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	f043 030d 	orr.w	r3, r3, #13
 8000606:	b2db      	uxtb	r3, r3
 8000608:	723b      	strb	r3, [r7, #8]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f043 0309 	orr.w	r3, r3, #9
 8000610:	b2db      	uxtb	r3, r3
 8000612:	727b      	strb	r3, [r7, #9]
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	f043 030d 	orr.w	r3, r3, #13
 800061a:	b2db      	uxtb	r3, r3
 800061c:	72bb      	strb	r3, [r7, #10]
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	f043 0309 	orr.w	r3, r3, #9
 8000624:	b2db      	uxtb	r3, r3
 8000626:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <lcd16x2_i2c_sendData+0x60>)
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <lcd16x2_i2c_sendData+0x64>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b299      	uxth	r1, r3
 8000632:	f107 0208 	add.w	r2, r7, #8
 8000636:	23c8      	movs	r3, #200	; 0xc8
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2304      	movs	r3, #4
 800063c:	f003 fafc 	bl	8003c38 <HAL_I2C_Master_Transmit>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000ac 	.word	0x200000ac
 800064c:	200000b0 	.word	0x200000b0

08000650 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000658:	2032      	movs	r0, #50	; 0x32
 800065a:	f000 fe23 	bl	80012a4 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 800065e:	4a30      	ldr	r2, [pc, #192]	; (8000720 <lcd16x2_i2c_init+0xd0>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000664:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <lcd16x2_i2c_init+0xd0>)
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800066c:	2205      	movs	r2, #5
 800066e:	214e      	movs	r1, #78	; 0x4e
 8000670:	f003 fbe0 	bl	8003e34 <HAL_I2C_IsDeviceReady>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d010      	beq.n	800069c <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 800067a:	4b29      	ldr	r3, [pc, #164]	; (8000720 <lcd16x2_i2c_init+0xd0>)
 800067c:	6818      	ldr	r0, [r3, #0]
 800067e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000682:	2205      	movs	r2, #5
 8000684:	217e      	movs	r1, #126	; 0x7e
 8000686:	f003 fbd5 	bl	8003e34 <HAL_I2C_IsDeviceReady>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000690:	2300      	movs	r3, #0
 8000692:	e040      	b.n	8000716 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <lcd16x2_i2c_init+0xd4>)
 8000696:	227e      	movs	r2, #126	; 0x7e
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	e002      	b.n	80006a2 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <lcd16x2_i2c_init+0xd4>)
 800069e:	224e      	movs	r2, #78	; 0x4e
 80006a0:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 80006a2:	202d      	movs	r0, #45	; 0x2d
 80006a4:	f000 fdfe 	bl	80012a4 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 80006a8:	2030      	movs	r0, #48	; 0x30
 80006aa:	f7ff ff69 	bl	8000580 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 80006ae:	2005      	movs	r0, #5
 80006b0:	f000 fdf8 	bl	80012a4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006b4:	2030      	movs	r0, #48	; 0x30
 80006b6:	f7ff ff63 	bl	8000580 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 fdf2 	bl	80012a4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006c0:	2030      	movs	r0, #48	; 0x30
 80006c2:	f7ff ff5d 	bl	8000580 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006c6:	2008      	movs	r0, #8
 80006c8:	f000 fdec 	bl	80012a4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 80006cc:	2020      	movs	r0, #32
 80006ce:	f7ff ff57 	bl	8000580 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006d2:	2008      	movs	r0, #8
 80006d4:	f000 fde6 	bl	80012a4 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80006d8:	2028      	movs	r0, #40	; 0x28
 80006da:	f7ff ff51 	bl	8000580 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fde0 	bl	80012a4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 80006e4:	2008      	movs	r0, #8
 80006e6:	f7ff ff4b 	bl	8000580 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fdda 	bl	80012a4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f7ff ff45 	bl	8000580 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80006f6:	2003      	movs	r0, #3
 80006f8:	f000 fdd4 	bl	80012a4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 80006fc:	2006      	movs	r0, #6
 80006fe:	f7ff ff3f 	bl	8000580 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fdce 	bl	80012a4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000708:	200c      	movs	r0, #12
 800070a:	f7ff ff39 	bl	8000580 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800070e:	2003      	movs	r0, #3
 8000710:	f000 fdc8 	bl	80012a4 <HAL_Delay>

  return true;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000ac 	.word	0x200000ac
 8000724:	200000b0 	.word	0x200000b0

08000728 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	460a      	mov	r2, r1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4613      	mov	r3, r2
 8000736:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000738:	79bb      	ldrb	r3, [r7, #6]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d108      	bne.n	8000758 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff15 	bl	8000580 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000756:	e007      	b.n	8000768 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800075e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff0c 	bl	8000580 <lcd16x2_i2c_sendCommand>
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff ff03 	bl	8000580 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800077a:	2003      	movs	r0, #3
 800077c:	f000 fd92 	bl	80012a4 <HAL_Delay>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000784:	b40f      	push	{r0, r1, r2, r3}
 8000786:	b590      	push	{r4, r7, lr}
 8000788:	b089      	sub	sp, #36	; 0x24
 800078a:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 800078c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000790:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800079a:	4618      	mov	r0, r3
 800079c:	f008 fb70 	bl	8008e80 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	77fb      	strb	r3, [r7, #31]
 80007a4:	e00b      	b.n	80007be <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 80007a6:	7ffb      	ldrb	r3, [r7, #31]
 80007a8:	f107 0220 	add.w	r2, r7, #32
 80007ac:	4413      	add	r3, r2
 80007ae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff18 	bl	80005e8 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80007b8:	7ffb      	ldrb	r3, [r7, #31]
 80007ba:	3301      	adds	r3, #1
 80007bc:	77fb      	strb	r3, [r7, #31]
 80007be:	7ffc      	ldrb	r4, [r7, #31]
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fd03 	bl	80001d0 <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	429c      	cmp	r4, r3
 80007ce:	d202      	bcs.n	80007d6 <lcd16x2_i2c_printf+0x52>
 80007d0:	7ffb      	ldrb	r3, [r7, #31]
 80007d2:	2b0f      	cmp	r3, #15
 80007d4:	d9e7      	bls.n	80007a6 <lcd16x2_i2c_printf+0x22>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3724      	adds	r7, #36	; 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80007e0:	b004      	add	sp, #16
 80007e2:	4770      	bx	lr

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 fcea 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f870 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f000 f9d6 	bl	8000ba0 <MX_GPIO_Init>
  MX_I2S3_Init();
 80007f4:	f000 f96e 	bl	8000ad4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80007f8:	f000 f99c 	bl	8000b34 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80007fc:	f007 ff28 	bl	8008650 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000800:	f000 f8e8 	bl	80009d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000804:	f000 f938 	bl	8000a78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd16x2_i2c_init(&hi2c1);
 8000808:	4829      	ldr	r0, [pc, #164]	; (80008b0 <main+0xcc>)
 800080a:	f7ff ff21 	bl	8000650 <lcd16x2_i2c_init>
    lcd16x2_i2c_printf("detecting Car...");
 800080e:	4829      	ldr	r0, [pc, #164]	; (80008b4 <main+0xd0>)
 8000810:	f7ff ffb8 	bl	8000784 <lcd16x2_i2c_printf>
     HAL_Delay(2500);
 8000814:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000818:	f000 fd44 	bl	80012a4 <HAL_Delay>
     lcd16x2_i2c_clear();
 800081c:	f7ff ffa8 	bl	8000770 <lcd16x2_i2c_clear>
     lcd16x2_i2c_printf("Car detected:");
 8000820:	4825      	ldr	r0, [pc, #148]	; (80008b8 <main+0xd4>)
 8000822:	f7ff ffaf 	bl	8000784 <lcd16x2_i2c_printf>
     lcd16x2_i2c_setCursor(1,0);
 8000826:	2100      	movs	r1, #0
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff ff7d 	bl	8000728 <lcd16x2_i2c_setCursor>


      lcd16x2_i2c_printf("%d ",count);
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <main+0xd8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4619      	mov	r1, r3
 8000834:	4822      	ldr	r0, [pc, #136]	; (80008c0 <main+0xdc>)
 8000836:	f7ff ffa5 	bl	8000784 <lcd16x2_i2c_printf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800083a:	f007 ff2f 	bl	800869c <MX_USB_HOST_Process>
    HAL_ADC_Start(&hadc1);
 800083e:	4821      	ldr	r0, [pc, #132]	; (80008c4 <main+0xe0>)
 8000840:	f000 fd96 	bl	8001370 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, 5);
 8000844:	2105      	movs	r1, #5
 8000846:	481f      	ldr	r0, [pc, #124]	; (80008c4 <main+0xe0>)
 8000848:	f000 fe58 	bl	80014fc <HAL_ADC_PollForConversion>
             adcval=HAL_ADC_GetValue(&hadc1);
 800084c:	481d      	ldr	r0, [pc, #116]	; (80008c4 <main+0xe0>)
 800084e:	f000 fed9 	bl	8001604 <HAL_ADC_GetValue>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <main+0xe4>)
 8000858:	601a      	str	r2, [r3, #0]
            if (  adcval>2000) {
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <main+0xe4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000862:	dd1e      	ble.n	80008a2 <main+0xbe>
            lcd16x2_i2c_clear();
 8000864:	f7ff ff84 	bl	8000770 <lcd16x2_i2c_clear>
                           count++;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <main+0xd8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	4a13      	ldr	r2, [pc, #76]	; (80008bc <main+0xd8>)
 8000870:	6013      	str	r3, [r2, #0]
                           lcd16x2_i2c_printf("Car detected:");
 8000872:	4811      	ldr	r0, [pc, #68]	; (80008b8 <main+0xd4>)
 8000874:	f7ff ff86 	bl	8000784 <lcd16x2_i2c_printf>
                           lcd16x2_i2c_setCursor(1,0);
 8000878:	2100      	movs	r1, #0
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff ff54 	bl	8000728 <lcd16x2_i2c_setCursor>
                           lcd16x2_i2c_printf("%d ",count);
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <main+0xd8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <main+0xdc>)
 8000888:	f7ff ff7c 	bl	8000784 <lcd16x2_i2c_printf>

                      	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <main+0xe8>)
 8000894:	f001 fb8e 	bl	8001fb4 <HAL_GPIO_WritePin>
                          HAL_Delay(350);}
 8000898:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800089c:	f000 fd02 	bl	80012a4 <HAL_Delay>
 80008a0:	e7cb      	b.n	800083a <main+0x56>
            else

               	        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a8:	4808      	ldr	r0, [pc, #32]	; (80008cc <main+0xe8>)
 80008aa:	f001 fb83 	bl	8001fb4 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 80008ae:	e7c4      	b.n	800083a <main+0x56>
 80008b0:	200000cc 	.word	0x200000cc
 80008b4:	08009508 	.word	0x08009508
 80008b8:	0800951c 	.word	0x0800951c
 80008bc:	200000b4 	.word	0x200000b4
 80008c0:	0800952c 	.word	0x0800952c
 80008c4:	20000120 	.word	0x20000120
 80008c8:	200001c0 	.word	0x200001c0
 80008cc:	40020c00 	.word	0x40020c00

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b098      	sub	sp, #96	; 0x60
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008da:	2230      	movs	r2, #48	; 0x30
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f008 f9f8 	bl	8008cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <SystemClock_Config+0xfc>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a30      	ldr	r2, [pc, #192]	; (80009cc <SystemClock_Config+0xfc>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <SystemClock_Config+0xfc>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <SystemClock_Config+0x100>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a2a      	ldr	r2, [pc, #168]	; (80009d0 <SystemClock_Config+0x100>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <SystemClock_Config+0x100>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093a:	2301      	movs	r3, #1
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000944:	2302      	movs	r3, #2
 8000946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000948:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800094e:	2308      	movs	r3, #8
 8000950:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000952:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000956:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000958:	2302      	movs	r3, #2
 800095a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800095c:	2307      	movs	r3, #7
 800095e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000964:	4618      	mov	r0, r3
 8000966:	f004 fa3d 	bl	8004de4 <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000970:	f000 fa14 	bl	8000d9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	230f      	movs	r3, #15
 8000976:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000980:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	2105      	movs	r1, #5
 8000992:	4618      	mov	r0, r3
 8000994:	f004 fc96 	bl	80052c4 <HAL_RCC_ClockConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800099e:	f000 f9fd 	bl	8000d9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80009a6:	23c0      	movs	r3, #192	; 0xc0
 80009a8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 fe64 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80009be:	f000 f9ed 	bl	8000d9c <Error_Handler>
  }
}
 80009c2:	bf00      	nop
 80009c4:	3760      	adds	r7, #96	; 0x60
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40007000 	.word	0x40007000

080009d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009e8:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <MX_ADC1_Init+0x9c>)
 80009ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_ADC1_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <MX_ADC1_Init+0xa0>)
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a36:	f000 fc57 	bl	80012e8 <HAL_ADC_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a40:	f000 f9ac 	bl	8000d9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_ADC1_Init+0x98>)
 8000a56:	f000 fde3 	bl	8001620 <HAL_ADC_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a60:	f000 f99c 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000120 	.word	0x20000120
 8000a70:	40012000 	.word	0x40012000
 8000a74:	0f000001 	.word	0x0f000001

08000a78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000a7e:	4a13      	ldr	r2, [pc, #76]	; (8000acc <MX_I2C1_Init+0x54>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000a84:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <MX_I2C1_Init+0x58>)
 8000a86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000a96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_I2C1_Init+0x50>)
 8000ab6:	f002 ff87 	bl	80039c8 <HAL_I2C_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac0:	f000 f96c 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200000cc 	.word	0x200000cc
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	000186a0 	.word	0x000186a0

08000ad4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_I2S3_Init+0x54>)
 8000ada:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <MX_I2S3_Init+0x58>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_I2S3_Init+0x54>)
 8000ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_I2S3_Init+0x54>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_I2S3_Init+0x54>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <MX_I2S3_Init+0x54>)
 8000af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_I2S3_Init+0x54>)
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <MX_I2S3_Init+0x5c>)
 8000afe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_I2S3_Init+0x54>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_I2S3_Init+0x54>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_I2S3_Init+0x54>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_I2S3_Init+0x54>)
 8000b14:	f003 fcc6 	bl	80044a4 <HAL_I2S_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b1e:	f000 f93d 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200001c4 	.word	0x200001c4
 8000b2c:	40003c00 	.word	0x40003c00
 8000b30:	00017700 	.word	0x00017700

08000b34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b3a:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <MX_SPI1_Init+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b80:	220a      	movs	r2, #10
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_SPI1_Init+0x64>)
 8000b86:	f004 feb9 	bl	80058fc <HAL_SPI_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b90:	f000 f904 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000168 	.word	0x20000168
 8000b9c:	40013000 	.word	0x40013000

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
 8000bba:	4b71      	ldr	r3, [pc, #452]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a70      	ldr	r2, [pc, #448]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bc0:	f043 0310 	orr.w	r3, r3, #16
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b6e      	ldr	r3, [pc, #440]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	4b6a      	ldr	r3, [pc, #424]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a69      	ldr	r2, [pc, #420]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b67      	ldr	r3, [pc, #412]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b63      	ldr	r3, [pc, #396]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a62      	ldr	r2, [pc, #392]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b60      	ldr	r3, [pc, #384]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b5c      	ldr	r3, [pc, #368]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a5b      	ldr	r2, [pc, #364]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b59      	ldr	r3, [pc, #356]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b55      	ldr	r3, [pc, #340]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a54      	ldr	r2, [pc, #336]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b52      	ldr	r3, [pc, #328]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b4e      	ldr	r3, [pc, #312]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a4d      	ldr	r2, [pc, #308]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b4b      	ldr	r3, [pc, #300]	; (8000d80 <MX_GPIO_Init+0x1e0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2108      	movs	r1, #8
 8000c62:	4848      	ldr	r0, [pc, #288]	; (8000d84 <MX_GPIO_Init+0x1e4>)
 8000c64:	f001 f9a6 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4846      	ldr	r0, [pc, #280]	; (8000d88 <MX_GPIO_Init+0x1e8>)
 8000c6e:	f001 f9a1 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c72:	2200      	movs	r2, #0
 8000c74:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c78:	4844      	ldr	r0, [pc, #272]	; (8000d8c <MX_GPIO_Init+0x1ec>)
 8000c7a:	f001 f99b 	bl	8001fb4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	483b      	ldr	r0, [pc, #236]	; (8000d84 <MX_GPIO_Init+0x1e4>)
 8000c96:	f000 fff3 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4835      	ldr	r0, [pc, #212]	; (8000d88 <MX_GPIO_Init+0x1e8>)
 8000cb2:	f000 ffe5 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	482d      	ldr	r0, [pc, #180]	; (8000d88 <MX_GPIO_Init+0x1e8>)
 8000cd2:	f000 ffd5 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <MX_GPIO_Init+0x1f0>)
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	482a      	ldr	r0, [pc, #168]	; (8000d94 <MX_GPIO_Init+0x1f4>)
 8000cea:	f000 ffc9 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4825      	ldr	r0, [pc, #148]	; (8000d98 <MX_GPIO_Init+0x1f8>)
 8000d02:	f000 ffbd 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d18:	2305      	movs	r3, #5
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	481d      	ldr	r0, [pc, #116]	; (8000d98 <MX_GPIO_Init+0x1f8>)
 8000d24:	f000 ffac 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d28:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d2c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4812      	ldr	r0, [pc, #72]	; (8000d8c <MX_GPIO_Init+0x1ec>)
 8000d42:	f000 ff9d 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d46:	2320      	movs	r3, #32
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <MX_GPIO_Init+0x1ec>)
 8000d5a:	f000 ff91 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_GPIO_Init+0x1f0>)
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_GPIO_Init+0x1e4>)
 8000d72:	f000 ff85 	bl	8001c80 <HAL_GPIO_Init>

}
 8000d76:	bf00      	nop
 8000d78:	3730      	adds	r7, #48	; 0x30
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020c00 	.word	0x40020c00
 8000d90:	10120000 	.word	0x10120000
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020400 	.word	0x40020400

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <Error_Handler+0x6>

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000de2:	2007      	movs	r0, #7
 8000de4:	f000 ff0a 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_ADC_MspInit+0x7c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d127      	bne.n	8000e66 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_ADC_MspInit+0x80>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e52:	2303      	movs	r3, #3
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_ADC_MspInit+0x84>)
 8000e62:	f000 ff0d 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	; 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40012000 	.word	0x40012000
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <HAL_I2C_MspInit+0x84>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d12b      	bne.n	8000ef6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eba:	23c0      	movs	r3, #192	; 0xc0
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ebe:	2312      	movs	r3, #18
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <HAL_I2C_MspInit+0x8c>)
 8000ed6:	f000 fed3 	bl	8001c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000ee4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_I2C_MspInit+0x88>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40005400 	.word	0x40005400
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020400 	.word	0x40020400

08000f0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <HAL_I2S_MspInit+0xc0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d14a      	bne.n	8000fc4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <HAL_I2S_MspInit+0xc4>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a26      	ldr	r2, [pc, #152]	; (8000fd0 <HAL_I2S_MspInit+0xc4>)
 8000f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <HAL_I2S_MspInit+0xc4>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_I2S_MspInit+0xc4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a1f      	ldr	r2, [pc, #124]	; (8000fd0 <HAL_I2S_MspInit+0xc4>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <HAL_I2S_MspInit+0xc4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_I2S_MspInit+0xc4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <HAL_I2S_MspInit+0xc4>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_I2S_MspInit+0xc4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f82:	2310      	movs	r3, #16
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f92:	2306      	movs	r3, #6
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <HAL_I2S_MspInit+0xc8>)
 8000f9e:	f000 fe6f 	bl	8001c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fa2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fb4:	2306      	movs	r3, #6
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <HAL_I2S_MspInit+0xcc>)
 8000fc0:	f000 fe5e 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40003c00 	.word	0x40003c00
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020800 	.word	0x40020800

08000fdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	; (8001060 <HAL_SPI_MspInit+0x84>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12b      	bne.n	8001056 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001008:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_SPI_MspInit+0x88>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_SPI_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001036:	23e0      	movs	r3, #224	; 0xe0
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001046:	2305      	movs	r3, #5
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_SPI_MspInit+0x8c>)
 8001052:	f000 fe15 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40013000 	.word	0x40013000
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b8:	f000 f8d4 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <OTG_FS_IRQHandler+0x10>)
 80010c6:	f001 fa1d 	bl	8002504 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200005e8 	.word	0x200005e8

080010d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <_sbrk+0x5c>)
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <_sbrk+0x60>)
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <_sbrk+0x64>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <_sbrk+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	d207      	bcs.n	8001114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001104:	f007 fdac 	bl	8008c60 <__errno>
 8001108:	4602      	mov	r2, r0
 800110a:	230c      	movs	r3, #12
 800110c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e009      	b.n	8001128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <_sbrk+0x64>)
 8001124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20020000 	.word	0x20020000
 8001134:	00000400 	.word	0x00000400
 8001138:	200000b8 	.word	0x200000b8
 800113c:	200008b0 	.word	0x200008b0

08001140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <SystemInit+0x28>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a07      	ldr	r2, [pc, #28]	; (8001168 <SystemInit+0x28>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SystemInit+0x28>)
 8001156:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800115a:	609a      	str	r2, [r3, #8]
#endif
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001170:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001172:	e003      	b.n	800117c <LoopCopyDataInit>

08001174 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001176:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001178:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800117a:	3104      	adds	r1, #4

0800117c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001180:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001182:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001184:	d3f6      	bcc.n	8001174 <CopyDataInit>
  ldr  r2, =_sbss
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001188:	e002      	b.n	8001190 <LoopFillZerobss>

0800118a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800118a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800118c:	f842 3b04 	str.w	r3, [r2], #4

08001190 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001192:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001194:	d3f9      	bcc.n	800118a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001196:	f7ff ffd3 	bl	8001140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119a:	f007 fd67 	bl	8008c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119e:	f7ff fb21 	bl	80007e4 <main>
  bx  lr    
 80011a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011a8:	08009590 	.word	0x08009590
  ldr  r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011b0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80011b4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80011b8:	200008b0 	.word	0x200008b0

080011bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_Init+0x40>)
 80011ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_Init+0x40>)
 80011d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x40>)
 80011e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 fd07 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fdd6 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fd1f 	bl	8001c66 <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 fce7 	bl	8001c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000000 	.word	0x20000000
 800125c:	20000008 	.word	0x20000008
 8001260:	20000004 	.word	0x20000004

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008
 8001288:	2000020c 	.word	0x2000020c

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	2000020c 	.word	0x2000020c

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_Delay+0x40>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000008 	.word	0x20000008

080012e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e033      	b.n	8001366 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	2b00      	cmp	r3, #0
 8001304:	d109      	bne.n	800131a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fd74 	bl	8000df4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	d118      	bne.n	8001358 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800132e:	f023 0302 	bic.w	r3, r3, #2
 8001332:	f043 0202 	orr.w	r2, r3, #2
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fa92 	bl	8001864 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f023 0303 	bic.w	r3, r3, #3
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	641a      	str	r2, [r3, #64]	; 0x40
 8001356:	e001      	b.n	800135c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_ADC_Start+0x1a>
 8001386:	2302      	movs	r3, #2
 8001388:	e0a5      	b.n	80014d6 <HAL_ADC_Start+0x166>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b01      	cmp	r3, #1
 800139e:	d018      	beq.n	80013d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013b0:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <HAL_ADC_Start+0x174>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a4c      	ldr	r2, [pc, #304]	; (80014e8 <HAL_ADC_Start+0x178>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9a      	lsrs	r2, r3, #18
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013c4:	e002      	b.n	80013cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f9      	bne.n	80013c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d179      	bne.n	80014d4 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800140a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800141e:	d106      	bne.n	800142e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	f023 0206 	bic.w	r2, r3, #6
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	645a      	str	r2, [r3, #68]	; 0x44
 800142c:	e002      	b.n	8001434 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <HAL_ADC_Start+0x17c>)
 800143e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001448:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	2b00      	cmp	r3, #0
 8001454:	d12a      	bne.n	80014ac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <HAL_ADC_Start+0x180>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d015      	beq.n	800148c <HAL_ADC_Start+0x11c>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <HAL_ADC_Start+0x184>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d105      	bne.n	8001476 <HAL_ADC_Start+0x106>
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_ADC_Start+0x17c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00a      	beq.n	800148c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <HAL_ADC_Start+0x188>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d129      	bne.n	80014d4 <HAL_ADC_Start+0x164>
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_ADC_Start+0x17c>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d823      	bhi.n	80014d4 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d11c      	bne.n	80014d4 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	e013      	b.n	80014d4 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_ADC_Start+0x180>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d10e      	bne.n	80014d4 <HAL_ADC_Start+0x164>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d107      	bne.n	80014d4 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014d2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000000 	.word	0x20000000
 80014e8:	431bde83 	.word	0x431bde83
 80014ec:	40012300 	.word	0x40012300
 80014f0:	40012000 	.word	0x40012000
 80014f4:	40012100 	.word	0x40012100
 80014f8:	40012200 	.word	0x40012200

080014fc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001518:	d113      	bne.n	8001542 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001528:	d10b      	bne.n	8001542 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f043 0220 	orr.w	r2, r3, #32
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e05c      	b.n	80015fc <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001542:	f7ff fea3 	bl	800128c <HAL_GetTick>
 8001546:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001548:	e01a      	b.n	8001580 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001550:	d016      	beq.n	8001580 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d007      	beq.n	8001568 <HAL_ADC_PollForConversion+0x6c>
 8001558:	f7ff fe98 	bl	800128c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d20b      	bcs.n	8001580 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f043 0204 	orr.w	r2, r3, #4
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e03d      	b.n	80015fc <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b02      	cmp	r3, #2
 800158c:	d1dd      	bne.n	800154a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f06f 0212 	mvn.w	r2, #18
 8001596:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d123      	bne.n	80015fa <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d11f      	bne.n	80015fa <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d111      	bne.n	80015fa <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d105      	bne.n	80015fa <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f043 0201 	orr.w	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_ADC_ConfigChannel+0x1c>
 8001638:	2302      	movs	r3, #2
 800163a:	e105      	b.n	8001848 <HAL_ADC_ConfigChannel+0x228>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b09      	cmp	r3, #9
 800164a:	d925      	bls.n	8001698 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68d9      	ldr	r1, [r3, #12]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	3b1e      	subs	r3, #30
 8001662:	2207      	movs	r2, #7
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43da      	mvns	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	400a      	ands	r2, r1
 8001670:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68d9      	ldr	r1, [r3, #12]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b29b      	uxth	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	4603      	mov	r3, r0
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4403      	add	r3, r0
 800168a:	3b1e      	subs	r3, #30
 800168c:	409a      	lsls	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	e022      	b.n	80016de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6919      	ldr	r1, [r3, #16]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	2207      	movs	r2, #7
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	400a      	ands	r2, r1
 80016ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6919      	ldr	r1, [r3, #16]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	4603      	mov	r3, r0
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4403      	add	r3, r0
 80016d4:	409a      	lsls	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d824      	bhi.n	8001730 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b05      	subs	r3, #5
 80016f8:	221f      	movs	r2, #31
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	400a      	ands	r2, r1
 8001706:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3b05      	subs	r3, #5
 8001722:	fa00 f203 	lsl.w	r2, r0, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	635a      	str	r2, [r3, #52]	; 0x34
 800172e:	e04c      	b.n	80017ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b0c      	cmp	r3, #12
 8001736:	d824      	bhi.n	8001782 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b23      	subs	r3, #35	; 0x23
 800174a:	221f      	movs	r2, #31
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43da      	mvns	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	400a      	ands	r2, r1
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	4618      	mov	r0, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	3b23      	subs	r3, #35	; 0x23
 8001774:	fa00 f203 	lsl.w	r2, r0, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	631a      	str	r2, [r3, #48]	; 0x30
 8001780:	e023      	b.n	80017ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	3b41      	subs	r3, #65	; 0x41
 8001794:	221f      	movs	r2, #31
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	400a      	ands	r2, r1
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4618      	mov	r0, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	3b41      	subs	r3, #65	; 0x41
 80017be:	fa00 f203 	lsl.w	r2, r0, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <HAL_ADC_ConfigChannel+0x234>)
 80017cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a21      	ldr	r2, [pc, #132]	; (8001858 <HAL_ADC_ConfigChannel+0x238>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d109      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x1cc>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b12      	cmp	r3, #18
 80017de:	d105      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_ADC_ConfigChannel+0x238>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d123      	bne.n	800183e <HAL_ADC_ConfigChannel+0x21e>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b10      	cmp	r3, #16
 80017fc:	d003      	beq.n	8001806 <HAL_ADC_ConfigChannel+0x1e6>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b11      	cmp	r3, #17
 8001804:	d11b      	bne.n	800183e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b10      	cmp	r3, #16
 8001818:	d111      	bne.n	800183e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_ADC_ConfigChannel+0x23c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_ADC_ConfigChannel+0x240>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	0c9a      	lsrs	r2, r3, #18
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001830:	e002      	b.n	8001838 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3b01      	subs	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f9      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40012300 	.word	0x40012300
 8001858:	40012000 	.word	0x40012000
 800185c:	20000000 	.word	0x20000000
 8001860:	431bde83 	.word	0x431bde83

08001864 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800186c:	4b79      	ldr	r3, [pc, #484]	; (8001a54 <ADC_Init+0x1f0>)
 800186e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	431a      	orrs	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001898:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	021a      	lsls	r2, r3, #8
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6859      	ldr	r1, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6899      	ldr	r1, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	4a58      	ldr	r2, [pc, #352]	; (8001a58 <ADC_Init+0x1f4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d022      	beq.n	8001942 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800190a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6899      	ldr	r1, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800192c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6899      	ldr	r1, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	e00f      	b.n	8001962 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001950:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001960:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0202 	bic.w	r2, r2, #2
 8001970:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6899      	ldr	r1, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7e1b      	ldrb	r3, [r3, #24]
 800197c:	005a      	lsls	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01b      	beq.n	80019c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800199e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6859      	ldr	r1, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	3b01      	subs	r3, #1
 80019bc:	035a      	lsls	r2, r3, #13
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	e007      	b.n	80019d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	051a      	lsls	r2, r3, #20
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6899      	ldr	r1, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a1a:	025a      	lsls	r2, r3, #9
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6899      	ldr	r1, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	029a      	lsls	r2, r3, #10
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	609a      	str	r2, [r3, #8]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40012300 	.word	0x40012300
 8001a58:	0f000001 	.word	0x0f000001

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db0b      	blt.n	8001aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4907      	ldr	r1, [pc, #28]	; (8001af8 <__NVIC_EnableIRQ+0x38>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	; (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc8:	d301      	bcc.n	8001bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00f      	b.n	8001bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <SysTick_Config+0x40>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f7ff ff8e 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <SysTick_Config+0x40>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <SysTick_Config+0x40>)
 8001be8:	2207      	movs	r2, #7
 8001bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000e010 	.word	0xe000e010

08001bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff29 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff3e 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff8e 	bl	8001b50 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff5d 	bl	8001afc <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff31 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffa2 	bl	8001bb8 <SysTick_Config>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	e16b      	b.n	8001f74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f040 815a 	bne.w	8001f6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d00b      	beq.n	8001cda <HAL_GPIO_Init+0x5a>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d007      	beq.n	8001cda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cce:	2b11      	cmp	r3, #17
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b12      	cmp	r3, #18
 8001cd8:	d130      	bne.n	8001d3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d10:	2201      	movs	r2, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 0201 	and.w	r2, r3, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0xfc>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b12      	cmp	r3, #18
 8001d7a:	d123      	bne.n	8001dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3208      	adds	r2, #8
 8001d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220f      	movs	r2, #15
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	08da      	lsrs	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3208      	adds	r2, #8
 8001dbe:	69b9      	ldr	r1, [r7, #24]
 8001dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0203 	and.w	r2, r3, #3
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80b4 	beq.w	8001f6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b5f      	ldr	r3, [pc, #380]	; (8001f88 <HAL_GPIO_Init+0x308>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a5e      	ldr	r2, [pc, #376]	; (8001f88 <HAL_GPIO_Init+0x308>)
 8001e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b5c      	ldr	r3, [pc, #368]	; (8001f88 <HAL_GPIO_Init+0x308>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e22:	4a5a      	ldr	r2, [pc, #360]	; (8001f8c <HAL_GPIO_Init+0x30c>)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a51      	ldr	r2, [pc, #324]	; (8001f90 <HAL_GPIO_Init+0x310>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d02b      	beq.n	8001ea6 <HAL_GPIO_Init+0x226>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a50      	ldr	r2, [pc, #320]	; (8001f94 <HAL_GPIO_Init+0x314>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d025      	beq.n	8001ea2 <HAL_GPIO_Init+0x222>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4f      	ldr	r2, [pc, #316]	; (8001f98 <HAL_GPIO_Init+0x318>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01f      	beq.n	8001e9e <HAL_GPIO_Init+0x21e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4e      	ldr	r2, [pc, #312]	; (8001f9c <HAL_GPIO_Init+0x31c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d019      	beq.n	8001e9a <HAL_GPIO_Init+0x21a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4d      	ldr	r2, [pc, #308]	; (8001fa0 <HAL_GPIO_Init+0x320>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_GPIO_Init+0x216>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4c      	ldr	r2, [pc, #304]	; (8001fa4 <HAL_GPIO_Init+0x324>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00d      	beq.n	8001e92 <HAL_GPIO_Init+0x212>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4b      	ldr	r2, [pc, #300]	; (8001fa8 <HAL_GPIO_Init+0x328>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d007      	beq.n	8001e8e <HAL_GPIO_Init+0x20e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4a      	ldr	r2, [pc, #296]	; (8001fac <HAL_GPIO_Init+0x32c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_GPIO_Init+0x20a>
 8001e86:	2307      	movs	r3, #7
 8001e88:	e00e      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	e00c      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001e8e:	2306      	movs	r3, #6
 8001e90:	e00a      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001e92:	2305      	movs	r3, #5
 8001e94:	e008      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001e96:	2304      	movs	r3, #4
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e004      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e002      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x228>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	f002 0203 	and.w	r2, r2, #3
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	4093      	lsls	r3, r2
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb8:	4934      	ldr	r1, [pc, #208]	; (8001f8c <HAL_GPIO_Init+0x30c>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <HAL_GPIO_Init+0x330>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eea:	4a31      	ldr	r2, [pc, #196]	; (8001fb0 <HAL_GPIO_Init+0x330>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ef0:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <HAL_GPIO_Init+0x330>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f14:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <HAL_GPIO_Init+0x330>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1a:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_GPIO_Init+0x330>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <HAL_GPIO_Init+0x330>)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_GPIO_Init+0x330>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f68:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <HAL_GPIO_Init+0x330>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b0f      	cmp	r3, #15
 8001f78:	f67f ae90 	bls.w	8001c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	3724      	adds	r7, #36	; 0x24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020c00 	.word	0x40020c00
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40021400 	.word	0x40021400
 8001fa8:	40021800 	.word	0x40021800
 8001fac:	40021c00 	.word	0x40021c00
 8001fb0:	40013c00 	.word	0x40013c00

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe8:	b08f      	sub	sp, #60	; 0x3c
 8001fea:	af0a      	add	r7, sp, #40	; 0x28
 8001fec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e054      	b.n	80020a2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f006 fb7a 	bl	800870c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2203      	movs	r2, #3
 800201c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f003 fd36 	bl	8005aa8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	687e      	ldr	r6, [r7, #4]
 8002044:	466d      	mov	r5, sp
 8002046:	f106 0410 	add.w	r4, r6, #16
 800204a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002052:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002056:	e885 0003 	stmia.w	r5, {r0, r1}
 800205a:	1d33      	adds	r3, r6, #4
 800205c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205e:	6838      	ldr	r0, [r7, #0]
 8002060:	f003 fcb0 	bl	80059c4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2101      	movs	r1, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f003 fd2d 	bl	8005aca <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	687e      	ldr	r6, [r7, #4]
 8002078:	466d      	mov	r5, sp
 800207a:	f106 0410 	add.w	r4, r6, #16
 800207e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002086:	e894 0003 	ldmia.w	r4, {r0, r1}
 800208a:	e885 0003 	stmia.w	r5, {r0, r1}
 800208e:	1d33      	adds	r3, r6, #4
 8002090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002092:	6838      	ldr	r0, [r7, #0]
 8002094:	f003 fe40 	bl	8005d18 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020aa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020aa:	b590      	push	{r4, r7, lr}
 80020ac:	b089      	sub	sp, #36	; 0x24
 80020ae:	af04      	add	r7, sp, #16
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	4608      	mov	r0, r1
 80020b4:	4611      	mov	r1, r2
 80020b6:	461a      	mov	r2, r3
 80020b8:	4603      	mov	r3, r0
 80020ba:	70fb      	strb	r3, [r7, #3]
 80020bc:	460b      	mov	r3, r1
 80020be:	70bb      	strb	r3, [r7, #2]
 80020c0:	4613      	mov	r3, r2
 80020c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_HCD_HC_Init+0x28>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e07f      	b.n	80021d2 <HAL_HCD_HC_Init+0x128>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	333d      	adds	r3, #61	; 0x3d
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	3338      	adds	r3, #56	; 0x38
 80020fe:	787a      	ldrb	r2, [r7, #1]
 8002100:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	3340      	adds	r3, #64	; 0x40
 8002112:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002114:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	3339      	adds	r3, #57	; 0x39
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	333f      	adds	r3, #63	; 0x3f
 800213a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800213e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	78bb      	ldrb	r3, [r7, #2]
 8002144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002148:	b2d8      	uxtb	r0, r3
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	333a      	adds	r3, #58	; 0x3a
 8002158:	4602      	mov	r2, r0
 800215a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800215c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002160:	2b00      	cmp	r3, #0
 8002162:	da0a      	bge.n	800217a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	333b      	adds	r3, #59	; 0x3b
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e009      	b.n	800218e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	333b      	adds	r3, #59	; 0x3b
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	333c      	adds	r3, #60	; 0x3c
 800219e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021a2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	787c      	ldrb	r4, [r7, #1]
 80021aa:	78ba      	ldrb	r2, [r7, #2]
 80021ac:	78f9      	ldrb	r1, [r7, #3]
 80021ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	4623      	mov	r3, r4
 80021c0:	f003 ff2c 	bl	800601c <USB_HC_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}

080021da <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	460b      	mov	r3, r1
 80021e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_HCD_HC_Halt+0x1e>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e00f      	b.n	8002218 <HAL_HCD_HC_Halt+0x3e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f004 f968 	bl	80064de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	4608      	mov	r0, r1
 800222a:	4611      	mov	r1, r2
 800222c:	461a      	mov	r2, r3
 800222e:	4603      	mov	r3, r0
 8002230:	70fb      	strb	r3, [r7, #3]
 8002232:	460b      	mov	r3, r1
 8002234:	70bb      	strb	r3, [r7, #2]
 8002236:	4613      	mov	r3, r2
 8002238:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	333b      	adds	r3, #59	; 0x3b
 800224a:	78ba      	ldrb	r2, [r7, #2]
 800224c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800224e:	78fa      	ldrb	r2, [r7, #3]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	333f      	adds	r3, #63	; 0x3f
 800225e:	787a      	ldrb	r2, [r7, #1]
 8002260:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002262:	7c3b      	ldrb	r3, [r7, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d114      	bne.n	8002292 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3342      	adds	r3, #66	; 0x42
 8002278:	2203      	movs	r2, #3
 800227a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	333d      	adds	r3, #61	; 0x3d
 800228c:	7f3a      	ldrb	r2, [r7, #28]
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e009      	b.n	80022a6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	3342      	adds	r3, #66	; 0x42
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022a6:	787b      	ldrb	r3, [r7, #1]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	f200 80d6 	bhi.w	800245a <HAL_HCD_HC_SubmitRequest+0x23a>
 80022ae:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80022b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b4:	080022c5 	.word	0x080022c5
 80022b8:	08002445 	.word	0x08002445
 80022bc:	08002331 	.word	0x08002331
 80022c0:	080023bb 	.word	0x080023bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022c4:	7c3b      	ldrb	r3, [r7, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	f040 80c9 	bne.w	800245e <HAL_HCD_HC_SubmitRequest+0x23e>
 80022cc:	78bb      	ldrb	r3, [r7, #2]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 80c5 	bne.w	800245e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80022d4:	8b3b      	ldrh	r3, [r7, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	3351      	adds	r3, #81	; 0x51
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	3351      	adds	r3, #81	; 0x51
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	3342      	adds	r3, #66	; 0x42
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002318:	e0a1      	b.n	800245e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	3342      	adds	r3, #66	; 0x42
 800232a:	2202      	movs	r2, #2
 800232c:	701a      	strb	r2, [r3, #0]
      break;
 800232e:	e096      	b.n	800245e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002330:	78bb      	ldrb	r3, [r7, #2]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d120      	bne.n	8002378 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	440b      	add	r3, r1
 8002344:	3351      	adds	r3, #81	; 0x51
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	3342      	adds	r3, #66	; 0x42
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002360:	e07e      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	3342      	adds	r3, #66	; 0x42
 8002372:	2202      	movs	r2, #2
 8002374:	701a      	strb	r2, [r3, #0]
      break;
 8002376:	e073      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	3350      	adds	r3, #80	; 0x50
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	440b      	add	r3, r1
 800239c:	3342      	adds	r3, #66	; 0x42
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
      break;
 80023a2:	e05d      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	440b      	add	r3, r1
 80023b2:	3342      	adds	r3, #66	; 0x42
 80023b4:	2202      	movs	r2, #2
 80023b6:	701a      	strb	r2, [r3, #0]
      break;
 80023b8:	e052      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023ba:	78bb      	ldrb	r3, [r7, #2]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d120      	bne.n	8002402 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	440b      	add	r3, r1
 80023ce:	3351      	adds	r3, #81	; 0x51
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10a      	bne.n	80023ec <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	3342      	adds	r3, #66	; 0x42
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023ea:	e039      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	3342      	adds	r3, #66	; 0x42
 80023fc:	2202      	movs	r2, #2
 80023fe:	701a      	strb	r2, [r3, #0]
      break;
 8002400:	e02e      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	3350      	adds	r3, #80	; 0x50
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	3342      	adds	r3, #66	; 0x42
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
      break;
 800242c:	e018      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	3342      	adds	r3, #66	; 0x42
 800243e:	2202      	movs	r2, #2
 8002440:	701a      	strb	r2, [r3, #0]
      break;
 8002442:	e00d      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	3342      	adds	r3, #66	; 0x42
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
      break;
 8002458:	e002      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800245a:	bf00      	nop
 800245c:	e000      	b.n	8002460 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800245e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	440b      	add	r3, r1
 800246e:	3344      	adds	r3, #68	; 0x44
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	8b39      	ldrh	r1, [r7, #24]
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4403      	add	r3, r0
 8002484:	3348      	adds	r3, #72	; 0x48
 8002486:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	335c      	adds	r3, #92	; 0x5c
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	440b      	add	r3, r1
 80024aa:	334c      	adds	r3, #76	; 0x4c
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	3339      	adds	r3, #57	; 0x39
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	440b      	add	r3, r1
 80024d2:	335d      	adds	r3, #93	; 0x5d
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	3338      	adds	r3, #56	; 0x38
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	18d1      	adds	r1, r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	f003 fe9c 	bl	8006230 <USB_HC_StartXfer>
 80024f8:	4603      	mov	r3, r0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop

08002504 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f003 fbb9 	bl	8005c92 <USB_GetMode>
 8002520:	4603      	mov	r3, r0
 8002522:	2b01      	cmp	r3, #1
 8002524:	f040 80ef 	bne.w	8002706 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f003 fb9d 	bl	8005c6c <USB_ReadInterrupts>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80e5 	beq.w	8002704 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f003 fb94 	bl	8005c6c <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800254e:	d104      	bne.n	800255a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002558:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fb84 	bl	8005c6c <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800256e:	d104      	bne.n	800257a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002578:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fb74 	bl	8005c6c <USB_ReadInterrupts>
 8002584:	4603      	mov	r3, r0
 8002586:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800258a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800258e:	d104      	bne.n	800259a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002598:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fb64 	bl	8005c6c <USB_ReadInterrupts>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d103      	bne.n	80025b6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2202      	movs	r2, #2
 80025b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 fb56 	bl	8005c6c <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ca:	d115      	bne.n	80025f8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025d4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d108      	bne.n	80025f8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f006 f90e 	bl	8008808 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fc4c 	bl	8005e90 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f003 fb35 	bl	8005c6c <USB_ReadInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800260c:	d102      	bne.n	8002614 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f001 f966 	bl	80038e0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fb27 	bl	8005c6c <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b08      	cmp	r3, #8
 8002626:	d106      	bne.n	8002636 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f006 f8d1 	bl	80087d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2208      	movs	r2, #8
 8002634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f003 fb16 	bl	8005c6c <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800264a:	d138      	bne.n	80026be <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f003 ff33 	bl	80064bc <USB_HC_ReadInterrupt>
 8002656:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e025      	b.n	80026aa <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d018      	beq.n	80026a4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002688:	d106      	bne.n	8002698 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f8cf 	bl	8002834 <HCD_HC_IN_IRQHandler>
 8002696:	e005      	b.n	80026a4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	4619      	mov	r1, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fcfd 	bl	800309e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3301      	adds	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d3d4      	bcc.n	800265e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 fad2 	bl	8005c6c <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d101      	bne.n	80026d6 <HAL_HCD_IRQHandler+0x1d2>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_HCD_IRQHandler+0x1d4>
 80026d6:	2300      	movs	r3, #0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d014      	beq.n	8002706 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0210 	bic.w	r2, r2, #16
 80026ea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f001 f84b 	bl	8003788 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699a      	ldr	r2, [r3, #24]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0210 	orr.w	r2, r2, #16
 8002700:	619a      	str	r2, [r3, #24]
 8002702:	e000      	b.n	8002706 <HAL_HCD_IRQHandler+0x202>
      return;
 8002704:	bf00      	nop
    }
  }
}
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_HCD_Start+0x16>
 800271e:	2302      	movs	r3, #2
 8002720:	e013      	b.n	800274a <HAL_HCD_Start+0x3e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 f9a9 	bl	8005a86 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2101      	movs	r1, #1
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fc0c 	bl	8005f58 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_HCD_Stop+0x16>
 8002764:	2302      	movs	r3, #2
 8002766:	e00d      	b.n	8002784 <HAL_HCD_Stop+0x32>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f003 ffed 	bl	8006754 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f003 fbb3 	bl	8005f04 <USB_ResetPort>
 800279e:	4603      	mov	r3, r0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	440b      	add	r3, r1
 80027c2:	335c      	adds	r3, #92	; 0x5c
 80027c4:	781b      	ldrb	r3, [r3, #0]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	334c      	adds	r3, #76	; 0x4c
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f003 fbf5 	bl	8005ff8 <USB_GetCurrentFrame>
 800280e:	4603      	mov	r3, r0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fbd0 	bl	8005fca <USB_GetHostSpeed>
 800282a:	4603      	mov	r3, r0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b04      	cmp	r3, #4
 8002862:	d119      	bne.n	8002898 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	461a      	mov	r2, r3
 8002872:	2304      	movs	r3, #4
 8002874:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	0151      	lsls	r1, r2, #5
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	440a      	add	r2, r1
 800288c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	60d3      	str	r3, [r2, #12]
 8002896:	e0ce      	b.n	8002a36 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ae:	d12c      	bne.n	800290a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	335d      	adds	r3, #93	; 0x5d
 80028d4:	2207      	movs	r2, #7
 80028d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	0151      	lsls	r1, r2, #5
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	440a      	add	r2, r1
 80028ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028f2:	f043 0302 	orr.w	r3, r3, #2
 80028f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f003 fdeb 	bl	80064de <USB_HC_Halt>
 8002908:	e095      	b.n	8002a36 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b20      	cmp	r3, #32
 800291e:	d109      	bne.n	8002934 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	2320      	movs	r3, #32
 8002930:	6093      	str	r3, [r2, #8]
 8002932:	e080      	b.n	8002a36 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d134      	bne.n	80029b4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	0151      	lsls	r1, r2, #5
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	440a      	add	r2, r1
 8002960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	335d      	adds	r3, #93	; 0x5d
 800297a:	2205      	movs	r2, #5
 800297c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	461a      	mov	r2, r3
 800298c:	2310      	movs	r3, #16
 800298e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	461a      	mov	r2, r3
 800299e:	2308      	movs	r3, #8
 80029a0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fd96 	bl	80064de <USB_HC_Halt>
 80029b2:	e040      	b.n	8002a36 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d134      	bne.n	8002a36 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	0151      	lsls	r1, r2, #5
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	440a      	add	r2, r1
 80029e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fd71 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	440b      	add	r3, r1
 8002a1c:	335d      	adds	r3, #93	; 0x5d
 8002a1e:	2208      	movs	r2, #8
 8002a20:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a34:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4c:	d122      	bne.n	8002a94 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	0151      	lsls	r1, r2, #5
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	440a      	add	r2, r1
 8002a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 fd30 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a90:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a92:	e300      	b.n	8003096 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	f040 80fd 	bne.w	8002ca6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3348      	adds	r3, #72	; 0x48
 8002ac4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0159      	lsls	r1, r3, #5
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	440b      	add	r3, r1
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ad8:	1ad1      	subs	r1, r2, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4403      	add	r3, r0
 8002ae8:	334c      	adds	r3, #76	; 0x4c
 8002aea:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	335d      	adds	r3, #93	; 0x5d
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3358      	adds	r3, #88	; 0x58
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	2301      	movs	r3, #1
 8002b24:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	333f      	adds	r3, #63	; 0x3f
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	333f      	adds	r3, #63	; 0x3f
 8002b4c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d121      	bne.n	8002b96 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	0151      	lsls	r1, r2, #5
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	440a      	add	r2, r1
 8002b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f003 fcae 	bl	80064de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2310      	movs	r3, #16
 8002b92:	6093      	str	r3, [r2, #8]
 8002b94:	e070      	b.n	8002c78 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	333f      	adds	r3, #63	; 0x3f
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d12a      	bne.n	8002c02 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	0151      	lsls	r1, r2, #5
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bca:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	335c      	adds	r3, #92	; 0x5c
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	b2d8      	uxtb	r0, r3
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	335c      	adds	r3, #92	; 0x5c
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4601      	mov	r1, r0
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f005 fe12 	bl	8008824 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c00:	e03a      	b.n	8002c78 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	333f      	adds	r3, #63	; 0x3f
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d12f      	bne.n	8002c78 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	335c      	adds	r3, #92	; 0x5c
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3350      	adds	r3, #80	; 0x50
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	f083 0301 	eor.w	r3, r3, #1
 8002c42:	b2d8      	uxtb	r0, r3
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	3350      	adds	r3, #80	; 0x50
 8002c54:	4602      	mov	r2, r0
 8002c56:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	b2d8      	uxtb	r0, r3
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	440b      	add	r3, r1
 8002c6a:	335c      	adds	r3, #92	; 0x5c
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4601      	mov	r1, r0
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f005 fdd6 	bl	8008824 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	3350      	adds	r3, #80	; 0x50
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	f083 0301 	eor.w	r3, r3, #1
 8002c8e:	b2d8      	uxtb	r0, r3
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3350      	adds	r3, #80	; 0x50
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	701a      	strb	r2, [r3, #0]
}
 8002ca4:	e1f7      	b.n	8003096 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	f040 811a 	bne.w	8002ef2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	0151      	lsls	r1, r2, #5
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	440a      	add	r2, r1
 8002cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cd8:	f023 0302 	bic.w	r3, r3, #2
 8002cdc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	335d      	adds	r3, #93	; 0x5d
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d10a      	bne.n	8002d0a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	335c      	adds	r3, #92	; 0x5c
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e0d9      	b.n	8002ebe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	335d      	adds	r3, #93	; 0x5d
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d10a      	bne.n	8002d36 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	335c      	adds	r3, #92	; 0x5c
 8002d30:	2205      	movs	r2, #5
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e0c3      	b.n	8002ebe <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	440b      	add	r3, r1
 8002d44:	335d      	adds	r3, #93	; 0x5d
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b06      	cmp	r3, #6
 8002d4a:	d00a      	beq.n	8002d62 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	335d      	adds	r3, #93	; 0x5d
 8002d5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d156      	bne.n	8002e10 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	440b      	add	r3, r1
 8002d70:	3358      	adds	r3, #88	; 0x58
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	1c59      	adds	r1, r3, #1
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4403      	add	r3, r0
 8002d84:	3358      	adds	r3, #88	; 0x58
 8002d86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	440b      	add	r3, r1
 8002d96:	3358      	adds	r3, #88	; 0x58
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d914      	bls.n	8002dc8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	440b      	add	r3, r1
 8002dac:	3358      	adds	r3, #88	; 0x58
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	335c      	adds	r3, #92	; 0x5c
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e009      	b.n	8002ddc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	335c      	adds	r3, #92	; 0x5c
 8002dd8:	2202      	movs	r2, #2
 8002dda:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002df2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dfa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e056      	b.n	8002ebe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	335d      	adds	r3, #93	; 0x5d
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d123      	bne.n	8002e6e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	335c      	adds	r3, #92	; 0x5c
 8002e36:	2202      	movs	r2, #2
 8002e38:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e50:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e58:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	461a      	mov	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e027      	b.n	8002ebe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	440b      	add	r3, r1
 8002e7c:	335d      	adds	r3, #93	; 0x5d
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b07      	cmp	r3, #7
 8002e82:	d11c      	bne.n	8002ebe <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	3358      	adds	r3, #88	; 0x58
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1c59      	adds	r1, r3, #1
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4403      	add	r3, r0
 8002ea6:	3358      	adds	r3, #88	; 0x58
 8002ea8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	335c      	adds	r3, #92	; 0x5c
 8002eba:	2204      	movs	r2, #4
 8002ebc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2302      	movs	r3, #2
 8002ece:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	b2d8      	uxtb	r0, r3
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	335c      	adds	r3, #92	; 0x5c
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4601      	mov	r1, r0
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f005 fc9a 	bl	8008824 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ef0:	e0d1      	b.n	8003096 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f04:	2b80      	cmp	r3, #128	; 0x80
 8002f06:	d13e      	bne.n	8002f86 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	0151      	lsls	r1, r2, #5
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	440a      	add	r2, r1
 8002f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	3358      	adds	r3, #88	; 0x58
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	1c59      	adds	r1, r3, #1
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4403      	add	r3, r0
 8002f4a:	3358      	adds	r3, #88	; 0x58
 8002f4c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	335d      	adds	r3, #93	; 0x5d
 8002f5e:	2206      	movs	r2, #6
 8002f60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fab6 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	6093      	str	r3, [r2, #8]
}
 8002f84:	e087      	b.n	8003096 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d17c      	bne.n	8003096 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	333f      	adds	r3, #63	; 0x3f
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d122      	bne.n	8002ff8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3358      	adds	r3, #88	; 0x58
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	0151      	lsls	r1, r2, #5
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	440a      	add	r2, r1
 8002fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 fa74 	bl	80064de <USB_HC_Halt>
 8002ff6:	e045      	b.n	8003084 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	333f      	adds	r3, #63	; 0x3f
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	333f      	adds	r3, #63	; 0x3f
 800301e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003020:	2b02      	cmp	r3, #2
 8003022:	d12f      	bne.n	8003084 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	3358      	adds	r3, #88	; 0x58
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d121      	bne.n	8003084 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	440b      	add	r3, r1
 800304e:	335d      	adds	r3, #93	; 0x5d
 8003050:	2203      	movs	r2, #3
 8003052:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	0151      	lsls	r1, r2, #5
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	440a      	add	r2, r1
 800306a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f003 fa2d 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	461a      	mov	r2, r3
 8003092:	2310      	movs	r3, #16
 8003094:	6093      	str	r3, [r2, #8]
}
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d119      	bne.n	8003102 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	461a      	mov	r2, r3
 80030dc:	2304      	movs	r3, #4
 80030de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	0151      	lsls	r1, r2, #5
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	440a      	add	r2, r1
 80030f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030fa:	f043 0302 	orr.w	r3, r3, #2
 80030fe:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003100:	e33e      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b20      	cmp	r3, #32
 8003116:	d141      	bne.n	800319c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	461a      	mov	r2, r3
 8003126:	2320      	movs	r3, #32
 8003128:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	333d      	adds	r3, #61	; 0x3d
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	f040 831f 	bne.w	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	440b      	add	r3, r1
 8003150:	333d      	adds	r3, #61	; 0x3d
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	335c      	adds	r3, #92	; 0x5c
 8003166:	2202      	movs	r2, #2
 8003168:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	0151      	lsls	r1, r2, #5
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	440a      	add	r2, r1
 8003180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f003 f9a2 	bl	80064de <USB_HC_Halt>
}
 800319a:	e2f1      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b40      	cmp	r3, #64	; 0x40
 80031b0:	d13f      	bne.n	8003232 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	440b      	add	r3, r1
 80031c0:	335d      	adds	r3, #93	; 0x5d
 80031c2:	2204      	movs	r2, #4
 80031c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	333d      	adds	r3, #61	; 0x3d
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	3358      	adds	r3, #88	; 0x58
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	0151      	lsls	r1, r2, #5
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	440a      	add	r2, r1
 8003204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f003 f960 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4413      	add	r3, r2
 8003226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322a:	461a      	mov	r2, r3
 800322c:	2340      	movs	r3, #64	; 0x40
 800322e:	6093      	str	r3, [r2, #8]
}
 8003230:	e2a6      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003248:	d122      	bne.n	8003290 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	0151      	lsls	r1, r2, #5
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	440a      	add	r2, r1
 8003260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f003 f932 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4413      	add	r3, r2
 8003282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003286:	461a      	mov	r2, r3
 8003288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800328c:	6093      	str	r3, [r2, #8]
}
 800328e:	e277      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d135      	bne.n	8003312 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	3358      	adds	r3, #88	; 0x58
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	0151      	lsls	r1, r2, #5
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	440a      	add	r2, r1
 80032d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f003 f8fa 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	461a      	mov	r2, r3
 80032f8:	2301      	movs	r3, #1
 80032fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	440b      	add	r3, r1
 800330a:	335d      	adds	r3, #93	; 0x5d
 800330c:	2201      	movs	r2, #1
 800330e:	701a      	strb	r2, [r3, #0]
}
 8003310:	e236      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b08      	cmp	r3, #8
 8003326:	d12b      	bne.n	8003380 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003334:	461a      	mov	r2, r3
 8003336:	2308      	movs	r3, #8
 8003338:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	0151      	lsls	r1, r2, #5
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	440a      	add	r2, r1
 8003350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f003 f8ba 	bl	80064de <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	335d      	adds	r3, #93	; 0x5d
 800337a:	2205      	movs	r2, #5
 800337c:	701a      	strb	r2, [r3, #0]
}
 800337e:	e1ff      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b10      	cmp	r3, #16
 8003394:	d155      	bne.n	8003442 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	3358      	adds	r3, #88	; 0x58
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	440b      	add	r3, r1
 80033b8:	335d      	adds	r3, #93	; 0x5d
 80033ba:	2203      	movs	r2, #3
 80033bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	333d      	adds	r3, #61	; 0x3d
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d114      	bne.n	80033fe <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	333c      	adds	r3, #60	; 0x3c
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	440b      	add	r3, r1
 80033f8:	333d      	adds	r3, #61	; 0x3d
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	0151      	lsls	r1, r2, #5
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	440a      	add	r2, r1
 8003414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f003 f858 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4413      	add	r3, r2
 8003436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343a:	461a      	mov	r2, r3
 800343c:	2310      	movs	r3, #16
 800343e:	6093      	str	r3, [r2, #8]
}
 8003440:	e19e      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4413      	add	r3, r2
 800344a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	d12b      	bne.n	80034b0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	0151      	lsls	r1, r2, #5
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	440a      	add	r2, r1
 800346e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003472:	f043 0302 	orr.w	r3, r3, #2
 8003476:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f003 f82b 	bl	80064de <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	440b      	add	r3, r1
 8003496:	335d      	adds	r3, #93	; 0x5d
 8003498:	2206      	movs	r2, #6
 800349a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a8:	461a      	mov	r2, r3
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	6093      	str	r3, [r2, #8]
}
 80034ae:	e167      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c6:	d135      	bne.n	8003534 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	0151      	lsls	r1, r2, #5
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	440a      	add	r2, r1
 80034de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034e2:	f043 0302 	orr.w	r3, r3, #2
 80034e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f002 fff3 	bl	80064de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	461a      	mov	r2, r3
 8003506:	2310      	movs	r3, #16
 8003508:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4413      	add	r3, r2
 8003512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003516:	461a      	mov	r2, r3
 8003518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800351c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	440b      	add	r3, r1
 800352c:	335d      	adds	r3, #93	; 0x5d
 800352e:	2208      	movs	r2, #8
 8003530:	701a      	strb	r2, [r3, #0]
}
 8003532:	e125      	b.n	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b02      	cmp	r3, #2
 8003548:	f040 811a 	bne.w	8003780 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	0151      	lsls	r1, r2, #5
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	440a      	add	r2, r1
 8003562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003566:	f023 0302 	bic.w	r3, r3, #2
 800356a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	440b      	add	r3, r1
 800357a:	335d      	adds	r3, #93	; 0x5d
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d137      	bne.n	80035f2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	335c      	adds	r3, #92	; 0x5c
 8003592:	2201      	movs	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	333f      	adds	r3, #63	; 0x3f
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d00b      	beq.n	80035c4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	440b      	add	r3, r1
 80035ba:	333f      	adds	r3, #63	; 0x3f
 80035bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035be:	2b03      	cmp	r3, #3
 80035c0:	f040 80c5 	bne.w	800374e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	440b      	add	r3, r1
 80035d2:	3351      	adds	r3, #81	; 0x51
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	f083 0301 	eor.w	r3, r3, #1
 80035da:	b2d8      	uxtb	r0, r3
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	440b      	add	r3, r1
 80035ea:	3351      	adds	r3, #81	; 0x51
 80035ec:	4602      	mov	r2, r0
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e0ad      	b.n	800374e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	440b      	add	r3, r1
 8003600:	335d      	adds	r3, #93	; 0x5d
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d10a      	bne.n	800361e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	335c      	adds	r3, #92	; 0x5c
 8003618:	2202      	movs	r2, #2
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	e097      	b.n	800374e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	440b      	add	r3, r1
 800362c:	335d      	adds	r3, #93	; 0x5d
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d10a      	bne.n	800364a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	440b      	add	r3, r1
 8003642:	335c      	adds	r3, #92	; 0x5c
 8003644:	2202      	movs	r2, #2
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e081      	b.n	800374e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	440b      	add	r3, r1
 8003658:	335d      	adds	r3, #93	; 0x5d
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b05      	cmp	r3, #5
 800365e:	d10a      	bne.n	8003676 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	440b      	add	r3, r1
 800366e:	335c      	adds	r3, #92	; 0x5c
 8003670:	2205      	movs	r2, #5
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e06b      	b.n	800374e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	335d      	adds	r3, #93	; 0x5d
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b06      	cmp	r3, #6
 800368a:	d00a      	beq.n	80036a2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	440b      	add	r3, r1
 800369a:	335d      	adds	r3, #93	; 0x5d
 800369c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d155      	bne.n	800374e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	440b      	add	r3, r1
 80036b0:	3358      	adds	r3, #88	; 0x58
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1c59      	adds	r1, r3, #1
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4403      	add	r3, r0
 80036c4:	3358      	adds	r3, #88	; 0x58
 80036c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	440b      	add	r3, r1
 80036d6:	3358      	adds	r3, #88	; 0x58
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d914      	bls.n	8003708 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	440b      	add	r3, r1
 80036ec:	3358      	adds	r3, #88	; 0x58
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	440b      	add	r3, r1
 8003700:	335c      	adds	r3, #92	; 0x5c
 8003702:	2204      	movs	r2, #4
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e009      	b.n	800371c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	335c      	adds	r3, #92	; 0x5c
 8003718:	2202      	movs	r2, #2
 800371a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003732:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800373a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003748:	461a      	mov	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375a:	461a      	mov	r2, r3
 800375c:	2302      	movs	r3, #2
 800375e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	b2d8      	uxtb	r0, r3
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	440b      	add	r3, r1
 8003772:	335c      	adds	r3, #92	; 0x5c
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	4601      	mov	r1, r0
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f005 f852 	bl	8008824 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003780:	bf00      	nop
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	; 0x28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	0c5b      	lsrs	r3, r3, #17
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037bc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d003      	beq.n	80037cc <HCD_RXQLVL_IRQHandler+0x44>
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	f000 8082 	beq.w	80038ce <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037ca:	e083      	b.n	80038d4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d07f      	beq.n	80038d2 <HCD_RXQLVL_IRQHandler+0x14a>
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	3344      	adds	r3, #68	; 0x44
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d074      	beq.n	80038d2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	3344      	adds	r3, #68	; 0x44
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	b292      	uxth	r2, r2
 8003802:	4619      	mov	r1, r3
 8003804:	f002 fa09 	bl	8005c1a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	440b      	add	r3, r1
 8003816:	3344      	adds	r3, #68	; 0x44
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	18d1      	adds	r1, r2, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4403      	add	r3, r0
 800382c:	3344      	adds	r3, #68	; 0x44
 800382e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	334c      	adds	r3, #76	; 0x4c
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	18d1      	adds	r1, r2, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4403      	add	r3, r0
 8003854:	334c      	adds	r3, #76	; 0x4c
 8003856:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <HCD_RXQLVL_IRQHandler+0x154>)
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d031      	beq.n	80038d2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003884:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800388c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	4413      	add	r3, r2
 8003896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389a:	461a      	mov	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	440b      	add	r3, r1
 80038ae:	3350      	adds	r3, #80	; 0x50
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	f083 0301 	eor.w	r3, r3, #1
 80038b6:	b2d8      	uxtb	r0, r3
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	440b      	add	r3, r1
 80038c6:	3350      	adds	r3, #80	; 0x50
 80038c8:	4602      	mov	r2, r0
 80038ca:	701a      	strb	r2, [r3, #0]
      break;
 80038cc:	e001      	b.n	80038d2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80038d2:	bf00      	nop
  }
}
 80038d4:	bf00      	nop
 80038d6:	3728      	adds	r7, #40	; 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	1ff80000 	.word	0x1ff80000

080038e0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800390c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b02      	cmp	r3, #2
 8003916:	d10b      	bne.n	8003930 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b01      	cmp	r3, #1
 8003920:	d102      	bne.n	8003928 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f004 ff62 	bl	80087ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f043 0302 	orr.w	r3, r3, #2
 800392e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b08      	cmp	r3, #8
 8003938:	d132      	bne.n	80039a0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f043 0308 	orr.w	r3, r3, #8
 8003940:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d126      	bne.n	800399a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d113      	bne.n	800397c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800395a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800395e:	d106      	bne.n	800396e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2102      	movs	r1, #2
 8003966:	4618      	mov	r0, r3
 8003968:	f002 fa92 	bl	8005e90 <USB_InitFSLSPClkSel>
 800396c:	e011      	b.n	8003992 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2101      	movs	r1, #1
 8003974:	4618      	mov	r0, r3
 8003976:	f002 fa8b 	bl	8005e90 <USB_InitFSLSPClkSel>
 800397a:	e00a      	b.n	8003992 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d106      	bne.n	8003992 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800398a:	461a      	mov	r2, r3
 800398c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003990:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f004 ff54 	bl	8008840 <HAL_HCD_PortEnabled_Callback>
 8003998:	e002      	b.n	80039a0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f004 ff5e 	bl	800885c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d103      	bne.n	80039b2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f043 0320 	orr.w	r3, r3, #32
 80039b0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6013      	str	r3, [r2, #0]
}
 80039be:	bf00      	nop
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e11f      	b.n	8003c1a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fa44 	bl	8000e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2224      	movs	r2, #36	; 0x24
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a2c:	f001 fe14 	bl	8005658 <HAL_RCC_GetPCLK1Freq>
 8003a30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4a7b      	ldr	r2, [pc, #492]	; (8003c24 <HAL_I2C_Init+0x25c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d807      	bhi.n	8003a4c <HAL_I2C_Init+0x84>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a7a      	ldr	r2, [pc, #488]	; (8003c28 <HAL_I2C_Init+0x260>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	bf94      	ite	ls
 8003a44:	2301      	movls	r3, #1
 8003a46:	2300      	movhi	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	e006      	b.n	8003a5a <HAL_I2C_Init+0x92>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a77      	ldr	r2, [pc, #476]	; (8003c2c <HAL_I2C_Init+0x264>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	bf94      	ite	ls
 8003a54:	2301      	movls	r3, #1
 8003a56:	2300      	movhi	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e0db      	b.n	8003c1a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4a72      	ldr	r2, [pc, #456]	; (8003c30 <HAL_I2C_Init+0x268>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	0c9b      	lsrs	r3, r3, #18
 8003a6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a64      	ldr	r2, [pc, #400]	; (8003c24 <HAL_I2C_Init+0x25c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d802      	bhi.n	8003a9c <HAL_I2C_Init+0xd4>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	e009      	b.n	8003ab0 <HAL_I2C_Init+0xe8>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	4a63      	ldr	r2, [pc, #396]	; (8003c34 <HAL_I2C_Init+0x26c>)
 8003aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aac:	099b      	lsrs	r3, r3, #6
 8003aae:	3301      	adds	r3, #1
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ac2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4956      	ldr	r1, [pc, #344]	; (8003c24 <HAL_I2C_Init+0x25c>)
 8003acc:	428b      	cmp	r3, r1
 8003ace:	d80d      	bhi.n	8003aec <HAL_I2C_Init+0x124>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e59      	subs	r1, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	bf38      	it	cc
 8003ae8:	2304      	movcc	r3, #4
 8003aea:	e04f      	b.n	8003b8c <HAL_I2C_Init+0x1c4>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d111      	bne.n	8003b18 <HAL_I2C_Init+0x150>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1e58      	subs	r0, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	440b      	add	r3, r1
 8003b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b06:	3301      	adds	r3, #1
 8003b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e012      	b.n	8003b3e <HAL_I2C_Init+0x176>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1e58      	subs	r0, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	0099      	lsls	r1, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_I2C_Init+0x17e>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e022      	b.n	8003b8c <HAL_I2C_Init+0x1c4>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10e      	bne.n	8003b6c <HAL_I2C_Init+0x1a4>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1e58      	subs	r0, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6859      	ldr	r1, [r3, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	440b      	add	r3, r1
 8003b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b6a:	e00f      	b.n	8003b8c <HAL_I2C_Init+0x1c4>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1e58      	subs	r0, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	0099      	lsls	r1, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	6809      	ldr	r1, [r1, #0]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6911      	ldr	r1, [r2, #16]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68d2      	ldr	r2, [r2, #12]
 8003bc6:	4311      	orrs	r1, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	000186a0 	.word	0x000186a0
 8003c28:	001e847f 	.word	0x001e847f
 8003c2c:	003d08ff 	.word	0x003d08ff
 8003c30:	431bde83 	.word	0x431bde83
 8003c34:	10624dd3 	.word	0x10624dd3

08003c38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	461a      	mov	r2, r3
 8003c44:	460b      	mov	r3, r1
 8003c46:	817b      	strh	r3, [r7, #10]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c4c:	f7fd fb1e 	bl	800128c <HAL_GetTick>
 8003c50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	f040 80e0 	bne.w	8003e20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2319      	movs	r3, #25
 8003c66:	2201      	movs	r2, #1
 8003c68:	4970      	ldr	r1, [pc, #448]	; (8003e2c <HAL_I2C_Master_Transmit+0x1f4>)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fa92 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
 8003c78:	e0d3      	b.n	8003e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_I2C_Master_Transmit+0x50>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e0cc      	b.n	8003e22 <HAL_I2C_Master_Transmit+0x1ea>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d007      	beq.n	8003cae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2221      	movs	r2, #33	; 0x21
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2210      	movs	r2, #16
 8003cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	893a      	ldrh	r2, [r7, #8]
 8003cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4a50      	ldr	r2, [pc, #320]	; (8003e30 <HAL_I2C_Master_Transmit+0x1f8>)
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cf0:	8979      	ldrh	r1, [r7, #10]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	6a3a      	ldr	r2, [r7, #32]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f9ca 	bl	8004090 <I2C_MasterRequestWrite>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e08d      	b.n	8003e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d1c:	e066      	b.n	8003dec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	6a39      	ldr	r1, [r7, #32]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fb0c 	bl	8004340 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00d      	beq.n	8003d4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d107      	bne.n	8003d46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e06b      	b.n	8003e22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	781a      	ldrb	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d11b      	bne.n	8003dc0 <HAL_I2C_Master_Transmit+0x188>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d017      	beq.n	8003dc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	6a39      	ldr	r1, [r7, #32]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fafc 	bl	80043c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00d      	beq.n	8003dec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d107      	bne.n	8003de8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e01a      	b.n	8003e22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d194      	bne.n	8003d1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e000      	b.n	8003e22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
  }
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	00100002 	.word	0x00100002
 8003e30:	ffff0000 	.word	0xffff0000

08003e34 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	; 0x28
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	460b      	mov	r3, r1
 8003e42:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e44:	f7fd fa22 	bl	800128c <HAL_GetTick>
 8003e48:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	f040 8111 	bne.w	800407e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2319      	movs	r3, #25
 8003e62:	2201      	movs	r2, #1
 8003e64:	4988      	ldr	r1, [pc, #544]	; (8004088 <HAL_I2C_IsDeviceReady+0x254>)
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f994 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
 8003e74:	e104      	b.n	8004080 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_I2C_IsDeviceReady+0x50>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e0fd      	b.n	8004080 <HAL_I2C_IsDeviceReady+0x24c>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d007      	beq.n	8003eaa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2224      	movs	r2, #36	; 0x24
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a70      	ldr	r2, [pc, #448]	; (800408c <HAL_I2C_IsDeviceReady+0x258>)
 8003ecc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003edc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f952 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00d      	beq.n	8003f12 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f04:	d103      	bne.n	8003f0e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0b6      	b.n	8004080 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f12:	897b      	ldrh	r3, [r7, #10]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f20:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f22:	f7fd f9b3 	bl	800128c <HAL_GetTick>
 8003f26:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	bf0c      	ite	eq
 8003f36:	2301      	moveq	r3, #1
 8003f38:	2300      	movne	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4c:	bf0c      	ite	eq
 8003f4e:	2301      	moveq	r3, #1
 8003f50:	2300      	movne	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f56:	e025      	b.n	8003fa4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f58:	f7fd f998 	bl	800128c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <HAL_I2C_IsDeviceReady+0x13a>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	22a0      	movs	r2, #160	; 0xa0
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2ba0      	cmp	r3, #160	; 0xa0
 8003fae:	d005      	beq.n	8003fbc <HAL_I2C_IsDeviceReady+0x188>
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d102      	bne.n	8003fbc <HAL_I2C_IsDeviceReady+0x188>
 8003fb6:	7dbb      	ldrb	r3, [r7, #22]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0cd      	beq.n	8003f58 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d129      	bne.n	8004026 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2319      	movs	r3, #25
 8003ffe:	2201      	movs	r2, #1
 8004000:	4921      	ldr	r1, [pc, #132]	; (8004088 <HAL_I2C_IsDeviceReady+0x254>)
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f8c6 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e036      	b.n	8004080 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e02c      	b.n	8004080 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004034:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800403e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2319      	movs	r3, #25
 8004046:	2201      	movs	r2, #1
 8004048:	490f      	ldr	r1, [pc, #60]	; (8004088 <HAL_I2C_IsDeviceReady+0x254>)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f8a2 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e012      	b.n	8004080 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	3301      	adds	r3, #1
 800405e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	f4ff af32 	bcc.w	8003ece <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800407e:	2302      	movs	r3, #2
  }
}
 8004080:	4618      	mov	r0, r3
 8004082:	3720      	adds	r7, #32
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	00100002 	.word	0x00100002
 800408c:	ffff0000 	.word	0xffff0000

08004090 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	460b      	mov	r3, r1
 800409e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d006      	beq.n	80040ba <I2C_MasterRequestWrite+0x2a>
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d003      	beq.n	80040ba <I2C_MasterRequestWrite+0x2a>
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040b8:	d108      	bne.n	80040cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e00b      	b.n	80040e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	2b12      	cmp	r3, #18
 80040d2:	d107      	bne.n	80040e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f84f 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00d      	beq.n	8004118 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410a:	d103      	bne.n	8004114 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e035      	b.n	8004184 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004120:	d108      	bne.n	8004134 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004122:	897b      	ldrh	r3, [r7, #10]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004130:	611a      	str	r2, [r3, #16]
 8004132:	e01b      	b.n	800416c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004134:	897b      	ldrh	r3, [r7, #10]
 8004136:	11db      	asrs	r3, r3, #7
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f003 0306 	and.w	r3, r3, #6
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f063 030f 	orn	r3, r3, #15
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	490e      	ldr	r1, [pc, #56]	; (800418c <I2C_MasterRequestWrite+0xfc>)
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f875 	bl	8004242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e010      	b.n	8004184 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004162:	897b      	ldrh	r3, [r7, #10]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4907      	ldr	r1, [pc, #28]	; (8004190 <I2C_MasterRequestWrite+0x100>)
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f865 	bl	8004242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	00010008 	.word	0x00010008
 8004190:	00010002 	.word	0x00010002

08004194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041a4:	e025      	b.n	80041f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d021      	beq.n	80041f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fd f86d 	bl	800128c <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d116      	bne.n	80041f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e023      	b.n	800423a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d10d      	bne.n	8004218 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	43da      	mvns	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4013      	ands	r3, r2
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	bf0c      	ite	eq
 800420e:	2301      	moveq	r3, #1
 8004210:	2300      	movne	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	e00c      	b.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	43da      	mvns	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4013      	ands	r3, r2
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf0c      	ite	eq
 800422a:	2301      	moveq	r3, #1
 800422c:	2300      	movne	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	429a      	cmp	r2, r3
 8004236:	d0b6      	beq.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004250:	e051      	b.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004260:	d123      	bne.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004270:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800427a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f043 0204 	orr.w	r2, r3, #4
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e046      	b.n	8004338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d021      	beq.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b2:	f7fc ffeb 	bl	800128c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d302      	bcc.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d116      	bne.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e020      	b.n	8004338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d10c      	bne.n	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	43da      	mvns	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	bf14      	ite	ne
 8004312:	2301      	movne	r3, #1
 8004314:	2300      	moveq	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	e00b      	b.n	8004332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	43da      	mvns	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf14      	ite	ne
 800432c:	2301      	movne	r3, #1
 800432e:	2300      	moveq	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d18d      	bne.n	8004252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800434c:	e02d      	b.n	80043aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f878 	bl	8004444 <I2C_IsAcknowledgeFailed>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e02d      	b.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d021      	beq.n	80043aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fc ff91 	bl	800128c <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d116      	bne.n	80043aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f043 0220 	orr.w	r2, r3, #32
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e007      	b.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d1ca      	bne.n	800434e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043ce:	e02d      	b.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f837 	bl	8004444 <I2C_IsAcknowledgeFailed>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e02d      	b.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e6:	d021      	beq.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e8:	f7fc ff50 	bl	800128c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d116      	bne.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e007      	b.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b04      	cmp	r3, #4
 8004438:	d1ca      	bne.n	80043d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445a:	d11b      	bne.n	8004494 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004464:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	f043 0204 	orr.w	r2, r3, #4
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e128      	b.n	8004708 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a90      	ldr	r2, [pc, #576]	; (8004710 <HAL_I2S_Init+0x26c>)
 80044ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7fc fd1b 	bl	8000f0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2202      	movs	r2, #2
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80044ec:	f023 030f 	bic.w	r3, r3, #15
 80044f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2202      	movs	r2, #2
 80044f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d060      	beq.n	80045c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800450a:	2310      	movs	r3, #16
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	e001      	b.n	8004514 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004510:	2320      	movs	r3, #32
 8004512:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b20      	cmp	r3, #32
 800451a:	d802      	bhi.n	8004522 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004522:	2001      	movs	r0, #1
 8004524:	f001 f98e 	bl	8005844 <HAL_RCCEx_GetPeriphCLKFreq>
 8004528:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004532:	d125      	bne.n	8004580 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d010      	beq.n	800455e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	fbb2 f2f3 	udiv	r2, r2, r3
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	461a      	mov	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	3305      	adds	r3, #5
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	e01f      	b.n	800459e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	fbb2 f2f3 	udiv	r2, r2, r3
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	461a      	mov	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	3305      	adds	r3, #5
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	e00e      	b.n	800459e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	fbb2 f2f3 	udiv	r2, r2, r3
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	461a      	mov	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	fbb2 f3f3 	udiv	r3, r2, r3
 800459a:	3305      	adds	r3, #5
 800459c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4a5c      	ldr	r2, [pc, #368]	; (8004714 <HAL_I2S_Init+0x270>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	08db      	lsrs	r3, r3, #3
 80045a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e003      	b.n	80045cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80045c4:	2302      	movs	r3, #2
 80045c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d902      	bls.n	80045d8 <HAL_I2S_Init+0x134>
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	2bff      	cmp	r3, #255	; 0xff
 80045d6:	d907      	bls.n	80045e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045dc:	f043 0210 	orr.w	r2, r3, #16
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e08f      	b.n	8004708 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	ea42 0103 	orr.w	r1, r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004606:	f023 030f 	bic.w	r3, r3, #15
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6851      	ldr	r1, [r2, #4]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6892      	ldr	r2, [r2, #8]
 8004612:	4311      	orrs	r1, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68d2      	ldr	r2, [r2, #12]
 8004618:	4311      	orrs	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6992      	ldr	r2, [r2, #24]
 800461e:	430a      	orrs	r2, r1
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800462a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d161      	bne.n	80046f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a38      	ldr	r2, [pc, #224]	; (8004718 <HAL_I2S_Init+0x274>)
 8004638:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a37      	ldr	r2, [pc, #220]	; (800471c <HAL_I2S_Init+0x278>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <HAL_I2S_Init+0x1a4>
 8004644:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_I2S_Init+0x27c>)
 8004646:	e001      	b.n	800464c <HAL_I2S_Init+0x1a8>
 8004648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	4932      	ldr	r1, [pc, #200]	; (800471c <HAL_I2S_Init+0x278>)
 8004654:	428a      	cmp	r2, r1
 8004656:	d101      	bne.n	800465c <HAL_I2S_Init+0x1b8>
 8004658:	4a31      	ldr	r2, [pc, #196]	; (8004720 <HAL_I2S_Init+0x27c>)
 800465a:	e001      	b.n	8004660 <HAL_I2S_Init+0x1bc>
 800465c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004660:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004664:	f023 030f 	bic.w	r3, r3, #15
 8004668:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2b      	ldr	r2, [pc, #172]	; (800471c <HAL_I2S_Init+0x278>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d101      	bne.n	8004678 <HAL_I2S_Init+0x1d4>
 8004674:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <HAL_I2S_Init+0x27c>)
 8004676:	e001      	b.n	800467c <HAL_I2S_Init+0x1d8>
 8004678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800467c:	2202      	movs	r2, #2
 800467e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a25      	ldr	r2, [pc, #148]	; (800471c <HAL_I2S_Init+0x278>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d101      	bne.n	800468e <HAL_I2S_Init+0x1ea>
 800468a:	4b25      	ldr	r3, [pc, #148]	; (8004720 <HAL_I2S_Init+0x27c>)
 800468c:	e001      	b.n	8004692 <HAL_I2S_Init+0x1ee>
 800468e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800469e:	d003      	beq.n	80046a8 <HAL_I2S_Init+0x204>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d103      	bne.n	80046b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80046a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	e001      	b.n	80046b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80046b0:	2300      	movs	r3, #0
 80046b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	b299      	uxth	r1, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80046ca:	4303      	orrs	r3, r0
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	430b      	orrs	r3, r1
 80046d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80046d2:	4313      	orrs	r3, r2
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	897b      	ldrh	r3, [r7, #10]
 80046d8:	4313      	orrs	r3, r2
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a0d      	ldr	r2, [pc, #52]	; (800471c <HAL_I2S_Init+0x278>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d101      	bne.n	80046f0 <HAL_I2S_Init+0x24c>
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_I2S_Init+0x27c>)
 80046ee:	e001      	b.n	80046f4 <HAL_I2S_Init+0x250>
 80046f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046f4:	897a      	ldrh	r2, [r7, #10]
 80046f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3720      	adds	r7, #32
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	0800481b 	.word	0x0800481b
 8004714:	cccccccd 	.word	0xcccccccd
 8004718:	08004931 	.word	0x08004931
 800471c:	40003800 	.word	0x40003800
 8004720:	40003400 	.word	0x40003400

08004724 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	881a      	ldrh	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	1c9a      	adds	r2, r3, #2
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10e      	bne.n	80047b4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ffb8 	bl	8004724 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	b292      	uxth	r2, r2
 80047d0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	1c9a      	adds	r2, r3, #2
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10e      	bne.n	8004812 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004802:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff93 	bl	8004738 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b086      	sub	sp, #24
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b04      	cmp	r3, #4
 8004834:	d13a      	bne.n	80048ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b01      	cmp	r3, #1
 800483e:	d109      	bne.n	8004854 <I2S_IRQHandler+0x3a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d102      	bne.n	8004854 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff ffb4 	bl	80047bc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b40      	cmp	r3, #64	; 0x40
 800485c:	d126      	bne.n	80048ac <I2S_IRQHandler+0x92>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b20      	cmp	r3, #32
 800486a:	d11f      	bne.n	80048ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800487a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800487c:	2300      	movs	r3, #0
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	f043 0202 	orr.w	r2, r3, #2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff ff50 	bl	800474c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d136      	bne.n	8004926 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d109      	bne.n	80048d6 <I2S_IRQHandler+0xbc>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048cc:	2b80      	cmp	r3, #128	; 0x80
 80048ce:	d102      	bne.n	80048d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff ff45 	bl	8004760 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d122      	bne.n	8004926 <I2S_IRQHandler+0x10c>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d11b      	bne.n	8004926 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	f043 0204 	orr.w	r2, r3, #4
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff ff13 	bl	800474c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004926:	bf00      	nop
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4aa2      	ldr	r2, [pc, #648]	; (8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800494a:	4ba2      	ldr	r3, [pc, #648]	; (8004bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800494c:	e001      	b.n	8004952 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800494e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a9b      	ldr	r2, [pc, #620]	; (8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d101      	bne.n	800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004968:	4b9a      	ldr	r3, [pc, #616]	; (8004bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800496a:	e001      	b.n	8004970 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800496c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800497c:	d004      	beq.n	8004988 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f040 8099 	bne.w	8004aba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d107      	bne.n	80049a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f925 	bl	8004bec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d107      	bne.n	80049bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f9c8 	bl	8004d4c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d13a      	bne.n	8004a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d035      	beq.n	8004a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a7e      	ldr	r2, [pc, #504]	; (8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d101      	bne.n	80049de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80049da:	4b7e      	ldr	r3, [pc, #504]	; (8004bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049dc:	e001      	b.n	80049e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80049de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4979      	ldr	r1, [pc, #484]	; (8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049ea:	428b      	cmp	r3, r1
 80049ec:	d101      	bne.n	80049f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80049ee:	4b79      	ldr	r3, [pc, #484]	; (8004bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049f0:	e001      	b.n	80049f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80049f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2e:	f043 0202 	orr.w	r2, r3, #2
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff fe88 	bl	800474c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	f040 80be 	bne.w	8004bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 80b8 	beq.w	8004bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a59      	ldr	r2, [pc, #356]	; (8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d101      	bne.n	8004a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004a6e:	4b59      	ldr	r3, [pc, #356]	; (8004bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a70:	e001      	b.n	8004a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4954      	ldr	r1, [pc, #336]	; (8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a7e:	428b      	cmp	r3, r1
 8004a80:	d101      	bne.n	8004a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004a82:	4b54      	ldr	r3, [pc, #336]	; (8004bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a84:	e001      	b.n	8004a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a90:	2300      	movs	r3, #0
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	60bb      	str	r3, [r7, #8]
 8004a9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aaa:	f043 0204 	orr.w	r2, r3, #4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff fe4a 	bl	800474c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ab8:	e084      	b.n	8004bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d107      	bne.n	8004ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8be 	bl	8004c50 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d107      	bne.n	8004aee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f8fd 	bl	8004ce8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d12f      	bne.n	8004b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d02a      	beq.n	8004b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b10:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2e      	ldr	r2, [pc, #184]	; (8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004b1c:	4b2d      	ldr	r3, [pc, #180]	; (8004bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b1e:	e001      	b.n	8004b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4929      	ldr	r1, [pc, #164]	; (8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b2c:	428b      	cmp	r3, r1
 8004b2e:	d101      	bne.n	8004b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b32:	e001      	b.n	8004b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4a:	f043 0202 	orr.w	r2, r3, #2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff fdfa 	bl	800474c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d131      	bne.n	8004bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d02c      	beq.n	8004bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d101      	bne.n	8004b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004b76:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b78:	e001      	b.n	8004b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004b7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4912      	ldr	r1, [pc, #72]	; (8004bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b86:	428b      	cmp	r3, r1
 8004b88:	d101      	bne.n	8004b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b8c:	e001      	b.n	8004b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004b8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ba6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	f043 0204 	orr.w	r2, r3, #4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fdc5 	bl	800474c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bc2:	e000      	b.n	8004bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bc4:	bf00      	nop
}
 8004bc6:	bf00      	nop
 8004bc8:	3720      	adds	r7, #32
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40003800 	.word	0x40003800
 8004bd4:	40003400 	.word	0x40003400

08004bd8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	1c99      	adds	r1, r3, #2
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6251      	str	r1, [r2, #36]	; 0x24
 8004bfe:	881a      	ldrh	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d113      	bne.n	8004c46 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff ffc9 	bl	8004bd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	1c99      	adds	r1, r3, #2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6251      	str	r1, [r2, #36]	; 0x24
 8004c62:	8819      	ldrh	r1, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <I2SEx_TxISR_I2SExt+0x90>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <I2SEx_TxISR_I2SExt+0x22>
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <I2SEx_TxISR_I2SExt+0x94>)
 8004c70:	e001      	b.n	8004c76 <I2SEx_TxISR_I2SExt+0x26>
 8004c72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c76:	460a      	mov	r2, r1
 8004c78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d121      	bne.n	8004cd6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <I2SEx_TxISR_I2SExt+0x90>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <I2SEx_TxISR_I2SExt+0x50>
 8004c9c:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <I2SEx_TxISR_I2SExt+0x94>)
 8004c9e:	e001      	b.n	8004ca4 <I2SEx_TxISR_I2SExt+0x54>
 8004ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	490d      	ldr	r1, [pc, #52]	; (8004ce0 <I2SEx_TxISR_I2SExt+0x90>)
 8004cac:	428b      	cmp	r3, r1
 8004cae:	d101      	bne.n	8004cb4 <I2SEx_TxISR_I2SExt+0x64>
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <I2SEx_TxISR_I2SExt+0x94>)
 8004cb2:	e001      	b.n	8004cb8 <I2SEx_TxISR_I2SExt+0x68>
 8004cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cbc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ff81 	bl	8004bd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40003800 	.word	0x40003800
 8004ce4:	40003400 	.word	0x40003400

08004ce8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68d8      	ldr	r0, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	1c99      	adds	r1, r3, #2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d00:	b282      	uxth	r2, r0
 8004d02:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d113      	bne.n	8004d44 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d2a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff ff4a 	bl	8004bd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a20      	ldr	r2, [pc, #128]	; (8004ddc <I2SEx_RxISR_I2SExt+0x90>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d101      	bne.n	8004d62 <I2SEx_RxISR_I2SExt+0x16>
 8004d5e:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <I2SEx_RxISR_I2SExt+0x94>)
 8004d60:	e001      	b.n	8004d66 <I2SEx_RxISR_I2SExt+0x1a>
 8004d62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d66:	68d8      	ldr	r0, [r3, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	1c99      	adds	r1, r3, #2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d72:	b282      	uxth	r2, r0
 8004d74:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d121      	bne.n	8004dd2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a12      	ldr	r2, [pc, #72]	; (8004ddc <I2SEx_RxISR_I2SExt+0x90>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d101      	bne.n	8004d9c <I2SEx_RxISR_I2SExt+0x50>
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <I2SEx_RxISR_I2SExt+0x94>)
 8004d9a:	e001      	b.n	8004da0 <I2SEx_RxISR_I2SExt+0x54>
 8004d9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	490d      	ldr	r1, [pc, #52]	; (8004ddc <I2SEx_RxISR_I2SExt+0x90>)
 8004da8:	428b      	cmp	r3, r1
 8004daa:	d101      	bne.n	8004db0 <I2SEx_RxISR_I2SExt+0x64>
 8004dac:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <I2SEx_RxISR_I2SExt+0x94>)
 8004dae:	e001      	b.n	8004db4 <I2SEx_RxISR_I2SExt+0x68>
 8004db0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004db4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004db8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff03 	bl	8004bd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40003800 	.word	0x40003800
 8004de0:	40003400 	.word	0x40003400

08004de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e25b      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d075      	beq.n	8004eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e02:	4ba3      	ldr	r3, [pc, #652]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d00c      	beq.n	8004e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0e:	4ba0      	ldr	r3, [pc, #640]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d112      	bne.n	8004e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e1a:	4b9d      	ldr	r3, [pc, #628]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e26:	d10b      	bne.n	8004e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e28:	4b99      	ldr	r3, [pc, #612]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d05b      	beq.n	8004eec <HAL_RCC_OscConfig+0x108>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d157      	bne.n	8004eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e236      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e48:	d106      	bne.n	8004e58 <HAL_RCC_OscConfig+0x74>
 8004e4a:	4b91      	ldr	r3, [pc, #580]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a90      	ldr	r2, [pc, #576]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e01d      	b.n	8004e94 <HAL_RCC_OscConfig+0xb0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x98>
 8004e62:	4b8b      	ldr	r3, [pc, #556]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a8a      	ldr	r2, [pc, #552]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	4b88      	ldr	r3, [pc, #544]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a87      	ldr	r2, [pc, #540]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e00b      	b.n	8004e94 <HAL_RCC_OscConfig+0xb0>
 8004e7c:	4b84      	ldr	r3, [pc, #528]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a83      	ldr	r2, [pc, #524]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	4b81      	ldr	r3, [pc, #516]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a80      	ldr	r2, [pc, #512]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d013      	beq.n	8004ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fc f9f6 	bl	800128c <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea4:	f7fc f9f2 	bl	800128c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	; 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e1fb      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	4b76      	ldr	r3, [pc, #472]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0xc0>
 8004ec2:	e014      	b.n	8004eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fc f9e2 	bl	800128c <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fc f9de 	bl	800128c <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e1e7      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ede:	4b6c      	ldr	r3, [pc, #432]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0xe8>
 8004eea:	e000      	b.n	8004eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d063      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004efa:	4b65      	ldr	r3, [pc, #404]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 030c 	and.w	r3, r3, #12
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f06:	4b62      	ldr	r3, [pc, #392]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d11c      	bne.n	8004f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f12:	4b5f      	ldr	r3, [pc, #380]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d116      	bne.n	8004f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1e:	4b5c      	ldr	r3, [pc, #368]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_RCC_OscConfig+0x152>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d001      	beq.n	8004f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e1bb      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f36:	4b56      	ldr	r3, [pc, #344]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4952      	ldr	r1, [pc, #328]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4a:	e03a      	b.n	8004fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d020      	beq.n	8004f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f54:	4b4f      	ldr	r3, [pc, #316]	; (8005094 <HAL_RCC_OscConfig+0x2b0>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fc f997 	bl	800128c <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f62:	f7fc f993 	bl	800128c <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e19c      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f74:	4b46      	ldr	r3, [pc, #280]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f80:	4b43      	ldr	r3, [pc, #268]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4940      	ldr	r1, [pc, #256]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	600b      	str	r3, [r1, #0]
 8004f94:	e015      	b.n	8004fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f96:	4b3f      	ldr	r3, [pc, #252]	; (8005094 <HAL_RCC_OscConfig+0x2b0>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fc f976 	bl	800128c <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa4:	f7fc f972 	bl	800128c <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e17b      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb6:	4b36      	ldr	r3, [pc, #216]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d030      	beq.n	8005030 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d016      	beq.n	8005004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd6:	4b30      	ldr	r3, [pc, #192]	; (8005098 <HAL_RCC_OscConfig+0x2b4>)
 8004fd8:	2201      	movs	r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fdc:	f7fc f956 	bl	800128c <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe4:	f7fc f952 	bl	800128c <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e15b      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff6:	4b26      	ldr	r3, [pc, #152]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x200>
 8005002:	e015      	b.n	8005030 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <HAL_RCC_OscConfig+0x2b4>)
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500a:	f7fc f93f 	bl	800128c <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005012:	f7fc f93b 	bl	800128c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e144      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005024:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f0      	bne.n	8005012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80a0 	beq.w	800517e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503e:	2300      	movs	r3, #0
 8005040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005042:	4b13      	ldr	r3, [pc, #76]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	4a0e      	ldr	r2, [pc, #56]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505c:	6413      	str	r3, [r2, #64]	; 0x40
 800505e:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <HAL_RCC_OscConfig+0x2ac>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800506a:	2301      	movs	r3, #1
 800506c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506e:	4b0b      	ldr	r3, [pc, #44]	; (800509c <HAL_RCC_OscConfig+0x2b8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005076:	2b00      	cmp	r3, #0
 8005078:	d121      	bne.n	80050be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <HAL_RCC_OscConfig+0x2b8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a07      	ldr	r2, [pc, #28]	; (800509c <HAL_RCC_OscConfig+0x2b8>)
 8005080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005086:	f7fc f901 	bl	800128c <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508c:	e011      	b.n	80050b2 <HAL_RCC_OscConfig+0x2ce>
 800508e:	bf00      	nop
 8005090:	40023800 	.word	0x40023800
 8005094:	42470000 	.word	0x42470000
 8005098:	42470e80 	.word	0x42470e80
 800509c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a0:	f7fc f8f4 	bl	800128c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0fd      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b2:	4b81      	ldr	r3, [pc, #516]	; (80052b8 <HAL_RCC_OscConfig+0x4d4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d106      	bne.n	80050d4 <HAL_RCC_OscConfig+0x2f0>
 80050c6:	4b7d      	ldr	r3, [pc, #500]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	4a7c      	ldr	r2, [pc, #496]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6713      	str	r3, [r2, #112]	; 0x70
 80050d2:	e01c      	b.n	800510e <HAL_RCC_OscConfig+0x32a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b05      	cmp	r3, #5
 80050da:	d10c      	bne.n	80050f6 <HAL_RCC_OscConfig+0x312>
 80050dc:	4b77      	ldr	r3, [pc, #476]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e0:	4a76      	ldr	r2, [pc, #472]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050e2:	f043 0304 	orr.w	r3, r3, #4
 80050e6:	6713      	str	r3, [r2, #112]	; 0x70
 80050e8:	4b74      	ldr	r3, [pc, #464]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	4a73      	ldr	r2, [pc, #460]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	6713      	str	r3, [r2, #112]	; 0x70
 80050f4:	e00b      	b.n	800510e <HAL_RCC_OscConfig+0x32a>
 80050f6:	4b71      	ldr	r3, [pc, #452]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	4a70      	ldr	r2, [pc, #448]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	6713      	str	r3, [r2, #112]	; 0x70
 8005102:	4b6e      	ldr	r3, [pc, #440]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	4a6d      	ldr	r2, [pc, #436]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005108:	f023 0304 	bic.w	r3, r3, #4
 800510c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d015      	beq.n	8005142 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fc f8b9 	bl	800128c <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511c:	e00a      	b.n	8005134 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fc f8b5 	bl	800128c <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	; 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0bc      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	4b61      	ldr	r3, [pc, #388]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ee      	beq.n	800511e <HAL_RCC_OscConfig+0x33a>
 8005140:	e014      	b.n	800516c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005142:	f7fc f8a3 	bl	800128c <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fc f89f 	bl	800128c <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	; 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e0a6      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005160:	4b56      	ldr	r3, [pc, #344]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ee      	bne.n	800514a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d105      	bne.n	800517e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005172:	4b52      	ldr	r3, [pc, #328]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	4a51      	ldr	r2, [pc, #324]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800517c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8092 	beq.w	80052ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005188:	4b4c      	ldr	r3, [pc, #304]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 030c 	and.w	r3, r3, #12
 8005190:	2b08      	cmp	r3, #8
 8005192:	d05c      	beq.n	800524e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d141      	bne.n	8005220 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519c:	4b48      	ldr	r3, [pc, #288]	; (80052c0 <HAL_RCC_OscConfig+0x4dc>)
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a2:	f7fc f873 	bl	800128c <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051aa:	f7fc f86f 	bl	800128c <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e078      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051bc:	4b3f      	ldr	r3, [pc, #252]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f0      	bne.n	80051aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	019b      	lsls	r3, r3, #6
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	085b      	lsrs	r3, r3, #1
 80051e0:	3b01      	subs	r3, #1
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	4933      	ldr	r1, [pc, #204]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f2:	4b33      	ldr	r3, [pc, #204]	; (80052c0 <HAL_RCC_OscConfig+0x4dc>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f8:	f7fc f848 	bl	800128c <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005200:	f7fc f844 	bl	800128c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e04d      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005212:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x41c>
 800521e:	e045      	b.n	80052ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005220:	4b27      	ldr	r3, [pc, #156]	; (80052c0 <HAL_RCC_OscConfig+0x4dc>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005226:	f7fc f831 	bl	800128c <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522e:	f7fc f82d 	bl	800128c <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e036      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005240:	4b1e      	ldr	r3, [pc, #120]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <HAL_RCC_OscConfig+0x44a>
 800524c:	e02e      	b.n	80052ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e029      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800525a:	4b18      	ldr	r3, [pc, #96]	; (80052bc <HAL_RCC_OscConfig+0x4d8>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	429a      	cmp	r2, r3
 800526c:	d11c      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005278:	429a      	cmp	r2, r3
 800527a:	d115      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005282:	4013      	ands	r3, r2
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005288:	4293      	cmp	r3, r2
 800528a:	d10d      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d106      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40007000 	.word	0x40007000
 80052bc:	40023800 	.word	0x40023800
 80052c0:	42470060 	.word	0x42470060

080052c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0cc      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052d8:	4b68      	ldr	r3, [pc, #416]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d90c      	bls.n	8005300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e6:	4b65      	ldr	r3, [pc, #404]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b63      	ldr	r3, [pc, #396]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0b8      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d020      	beq.n	800534e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005318:	4b59      	ldr	r3, [pc, #356]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a58      	ldr	r2, [pc, #352]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005330:	4b53      	ldr	r3, [pc, #332]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4a52      	ldr	r2, [pc, #328]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800533a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800533c:	4b50      	ldr	r3, [pc, #320]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	494d      	ldr	r1, [pc, #308]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	4313      	orrs	r3, r2
 800534c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d044      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d119      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e07f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d003      	beq.n	8005382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800537e:	2b03      	cmp	r3, #3
 8005380:	d107      	bne.n	8005392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005382:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e06f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005392:	4b3b      	ldr	r3, [pc, #236]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e067      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053a2:	4b37      	ldr	r3, [pc, #220]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f023 0203 	bic.w	r2, r3, #3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4934      	ldr	r1, [pc, #208]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053b4:	f7fb ff6a 	bl	800128c <HAL_GetTick>
 80053b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ba:	e00a      	b.n	80053d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053bc:	f7fb ff66 	bl	800128c <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e04f      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 020c 	and.w	r2, r3, #12
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d1eb      	bne.n	80053bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e4:	4b25      	ldr	r3, [pc, #148]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d20c      	bcs.n	800540c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f2:	4b22      	ldr	r3, [pc, #136]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <HAL_RCC_ClockConfig+0x1b8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d001      	beq.n	800540c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e032      	b.n	8005472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4916      	ldr	r1, [pc, #88]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	490e      	ldr	r1, [pc, #56]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800544a:	f000 f821 	bl	8005490 <HAL_RCC_GetSysClockFreq>
 800544e:	4601      	mov	r1, r0
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	4a0a      	ldr	r2, [pc, #40]	; (8005484 <HAL_RCC_ClockConfig+0x1c0>)
 800545c:	5cd3      	ldrb	r3, [r2, r3]
 800545e:	fa21 f303 	lsr.w	r3, r1, r3
 8005462:	4a09      	ldr	r2, [pc, #36]	; (8005488 <HAL_RCC_ClockConfig+0x1c4>)
 8005464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_ClockConfig+0x1c8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fb feca 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40023c00 	.word	0x40023c00
 8005480:	40023800 	.word	0x40023800
 8005484:	08009534 	.word	0x08009534
 8005488:	20000000 	.word	0x20000000
 800548c:	20000004 	.word	0x20000004

08005490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	2300      	movs	r3, #0
 80054a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054a6:	4b63      	ldr	r3, [pc, #396]	; (8005634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d007      	beq.n	80054c2 <HAL_RCC_GetSysClockFreq+0x32>
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d008      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0x38>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 80b4 	bne.w	8005624 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054bc:	4b5e      	ldr	r3, [pc, #376]	; (8005638 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80054be:	60bb      	str	r3, [r7, #8]
       break;
 80054c0:	e0b3      	b.n	800562a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054c2:	4b5e      	ldr	r3, [pc, #376]	; (800563c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80054c4:	60bb      	str	r3, [r7, #8]
      break;
 80054c6:	e0b0      	b.n	800562a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054c8:	4b5a      	ldr	r3, [pc, #360]	; (8005634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054d2:	4b58      	ldr	r3, [pc, #352]	; (8005634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d04a      	beq.n	8005574 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054de:	4b55      	ldr	r3, [pc, #340]	; (8005634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	099b      	lsrs	r3, r3, #6
 80054e4:	f04f 0400 	mov.w	r4, #0
 80054e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	ea03 0501 	and.w	r5, r3, r1
 80054f4:	ea04 0602 	and.w	r6, r4, r2
 80054f8:	4629      	mov	r1, r5
 80054fa:	4632      	mov	r2, r6
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	0154      	lsls	r4, r2, #5
 8005506:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800550a:	014b      	lsls	r3, r1, #5
 800550c:	4619      	mov	r1, r3
 800550e:	4622      	mov	r2, r4
 8005510:	1b49      	subs	r1, r1, r5
 8005512:	eb62 0206 	sbc.w	r2, r2, r6
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	f04f 0400 	mov.w	r4, #0
 800551e:	0194      	lsls	r4, r2, #6
 8005520:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005524:	018b      	lsls	r3, r1, #6
 8005526:	1a5b      	subs	r3, r3, r1
 8005528:	eb64 0402 	sbc.w	r4, r4, r2
 800552c:	f04f 0100 	mov.w	r1, #0
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	00e2      	lsls	r2, r4, #3
 8005536:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800553a:	00d9      	lsls	r1, r3, #3
 800553c:	460b      	mov	r3, r1
 800553e:	4614      	mov	r4, r2
 8005540:	195b      	adds	r3, r3, r5
 8005542:	eb44 0406 	adc.w	r4, r4, r6
 8005546:	f04f 0100 	mov.w	r1, #0
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	0262      	lsls	r2, r4, #9
 8005550:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005554:	0259      	lsls	r1, r3, #9
 8005556:	460b      	mov	r3, r1
 8005558:	4614      	mov	r4, r2
 800555a:	4618      	mov	r0, r3
 800555c:	4621      	mov	r1, r4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f04f 0400 	mov.w	r4, #0
 8005564:	461a      	mov	r2, r3
 8005566:	4623      	mov	r3, r4
 8005568:	f7fa fe8a 	bl	8000280 <__aeabi_uldivmod>
 800556c:	4603      	mov	r3, r0
 800556e:	460c      	mov	r4, r1
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	e049      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005574:	4b2f      	ldr	r3, [pc, #188]	; (8005634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	099b      	lsrs	r3, r3, #6
 800557a:	f04f 0400 	mov.w	r4, #0
 800557e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	ea03 0501 	and.w	r5, r3, r1
 800558a:	ea04 0602 	and.w	r6, r4, r2
 800558e:	4629      	mov	r1, r5
 8005590:	4632      	mov	r2, r6
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	f04f 0400 	mov.w	r4, #0
 800559a:	0154      	lsls	r4, r2, #5
 800559c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055a0:	014b      	lsls	r3, r1, #5
 80055a2:	4619      	mov	r1, r3
 80055a4:	4622      	mov	r2, r4
 80055a6:	1b49      	subs	r1, r1, r5
 80055a8:	eb62 0206 	sbc.w	r2, r2, r6
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	f04f 0400 	mov.w	r4, #0
 80055b4:	0194      	lsls	r4, r2, #6
 80055b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80055ba:	018b      	lsls	r3, r1, #6
 80055bc:	1a5b      	subs	r3, r3, r1
 80055be:	eb64 0402 	sbc.w	r4, r4, r2
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	00e2      	lsls	r2, r4, #3
 80055cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80055d0:	00d9      	lsls	r1, r3, #3
 80055d2:	460b      	mov	r3, r1
 80055d4:	4614      	mov	r4, r2
 80055d6:	195b      	adds	r3, r3, r5
 80055d8:	eb44 0406 	adc.w	r4, r4, r6
 80055dc:	f04f 0100 	mov.w	r1, #0
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	02a2      	lsls	r2, r4, #10
 80055e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80055ea:	0299      	lsls	r1, r3, #10
 80055ec:	460b      	mov	r3, r1
 80055ee:	4614      	mov	r4, r2
 80055f0:	4618      	mov	r0, r3
 80055f2:	4621      	mov	r1, r4
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f04f 0400 	mov.w	r4, #0
 80055fa:	461a      	mov	r2, r3
 80055fc:	4623      	mov	r3, r4
 80055fe:	f7fa fe3f 	bl	8000280 <__aeabi_uldivmod>
 8005602:	4603      	mov	r3, r0
 8005604:	460c      	mov	r4, r1
 8005606:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	3301      	adds	r3, #1
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	60bb      	str	r3, [r7, #8]
      break;
 8005622:	e002      	b.n	800562a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005624:	4b04      	ldr	r3, [pc, #16]	; (8005638 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005626:	60bb      	str	r3, [r7, #8]
      break;
 8005628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800562a:	68bb      	ldr	r3, [r7, #8]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005634:	40023800 	.word	0x40023800
 8005638:	00f42400 	.word	0x00f42400
 800563c:	007a1200 	.word	0x007a1200

08005640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005644:	4b03      	ldr	r3, [pc, #12]	; (8005654 <HAL_RCC_GetHCLKFreq+0x14>)
 8005646:	681b      	ldr	r3, [r3, #0]
}
 8005648:	4618      	mov	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20000000 	.word	0x20000000

08005658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800565c:	f7ff fff0 	bl	8005640 <HAL_RCC_GetHCLKFreq>
 8005660:	4601      	mov	r1, r0
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	0a9b      	lsrs	r3, r3, #10
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	4a03      	ldr	r2, [pc, #12]	; (800567c <HAL_RCC_GetPCLK1Freq+0x24>)
 800566e:	5cd3      	ldrb	r3, [r2, r3]
 8005670:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005674:	4618      	mov	r0, r3
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40023800 	.word	0x40023800
 800567c:	08009544 	.word	0x08009544

08005680 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d035      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056a8:	4b62      	ldr	r3, [pc, #392]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ae:	f7fb fded 	bl	800128c <HAL_GetTick>
 80056b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056b6:	f7fb fde9 	bl	800128c <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e0b0      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056c8:	4b5b      	ldr	r3, [pc, #364]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f0      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	019a      	lsls	r2, r3, #6
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	071b      	lsls	r3, r3, #28
 80056e0:	4955      	ldr	r1, [pc, #340]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056e8:	4b52      	ldr	r3, [pc, #328]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ee:	f7fb fdcd 	bl	800128c <HAL_GetTick>
 80056f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056f4:	e008      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056f6:	f7fb fdc9 	bl	800128c <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e090      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005708:	4b4b      	ldr	r3, [pc, #300]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0f0      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8083 	beq.w	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	4b44      	ldr	r3, [pc, #272]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	4a43      	ldr	r2, [pc, #268]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800572c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005730:	6413      	str	r3, [r2, #64]	; 0x40
 8005732:	4b41      	ldr	r3, [pc, #260]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800573e:	4b3f      	ldr	r3, [pc, #252]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a3e      	ldr	r2, [pc, #248]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005748:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800574a:	f7fb fd9f 	bl	800128c <HAL_GetTick>
 800574e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005750:	e008      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005752:	f7fb fd9b 	bl	800128c <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e062      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005764:	4b35      	ldr	r3, [pc, #212]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0f0      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005770:	4b31      	ldr	r3, [pc, #196]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005778:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d02f      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	429a      	cmp	r2, r3
 800578c:	d028      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800578e:	4b2a      	ldr	r3, [pc, #168]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005796:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005798:	4b29      	ldr	r3, [pc, #164]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800579a:	2201      	movs	r2, #1
 800579c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800579e:	4b28      	ldr	r3, [pc, #160]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057a4:	4a24      	ldr	r2, [pc, #144]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057aa:	4b23      	ldr	r3, [pc, #140]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d114      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057b6:	f7fb fd69 	bl	800128c <HAL_GetTick>
 80057ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057bc:	e00a      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057be:	f7fb fd65 	bl	800128c <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e02a      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d4:	4b18      	ldr	r3, [pc, #96]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0ee      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ec:	d10d      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80057ee:	4b12      	ldr	r3, [pc, #72]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005802:	490d      	ldr	r1, [pc, #52]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005804:	4313      	orrs	r3, r2
 8005806:	608b      	str	r3, [r1, #8]
 8005808:	e005      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4a0a      	ldr	r2, [pc, #40]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005810:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005814:	6093      	str	r3, [r2, #8]
 8005816:	4b08      	ldr	r3, [pc, #32]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005822:	4905      	ldr	r1, [pc, #20]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005824:	4313      	orrs	r3, r2
 8005826:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3718      	adds	r7, #24
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	42470068 	.word	0x42470068
 8005838:	40023800 	.word	0x40023800
 800583c:	40007000 	.word	0x40007000
 8005840:	42470e40 	.word	0x42470e40

08005844 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d13d      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005862:	4b22      	ldr	r3, [pc, #136]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800586a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005872:	2b01      	cmp	r3, #1
 8005874:	d12f      	bne.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005876:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005878:	617b      	str	r3, [r7, #20]
          break;
 800587a:	e02f      	b.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800587c:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005888:	d108      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800588a:	4b18      	ldr	r3, [pc, #96]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005892:	4a18      	ldr	r2, [pc, #96]	; (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005894:	fbb2 f3f3 	udiv	r3, r2, r3
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	e007      	b.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800589c:	4b13      	ldr	r3, [pc, #76]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058a4:	4a14      	ldr	r2, [pc, #80]	; (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058aa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80058ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058b2:	099b      	lsrs	r3, r3, #6
 80058b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80058c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c6:	0f1b      	lsrs	r3, r3, #28
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d2:	617b      	str	r3, [r7, #20]
          break;
 80058d4:	e002      	b.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]
          break;
 80058da:	bf00      	nop
        }
      }
      break;
 80058dc:	bf00      	nop
    }
  }
  return frequency;
 80058de:	697b      	ldr	r3, [r7, #20]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	40023800 	.word	0x40023800
 80058f0:	00bb8000 	.word	0x00bb8000
 80058f4:	007a1200 	.word	0x007a1200
 80058f8:	00f42400 	.word	0x00f42400

080058fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e056      	b.n	80059bc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d106      	bne.n	800592e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7fb fb57 	bl	8000fdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2202      	movs	r2, #2
 8005932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005944:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	ea42 0103 	orr.w	r1, r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	0c1b      	lsrs	r3, r3, #16
 800598c:	f003 0104 	and.w	r1, r3, #4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69da      	ldr	r2, [r3, #28]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059c4:	b084      	sub	sp, #16
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	f107 001c 	add.w	r0, r7, #28
 80059d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d122      	bne.n	8005a22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80059f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d105      	bne.n	8005a16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f94a 	bl	8005cb0 <USB_CoreReset>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]
 8005a20:	e01a      	b.n	8005a58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f93e 	bl	8005cb0 <USB_CoreReset>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38
 8005a4a:	e005      	b.n	8005a58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d10b      	bne.n	8005a76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f043 0206 	orr.w	r2, r3, #6
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f043 0220 	orr.w	r2, r3, #32
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a82:	b004      	add	sp, #16
 8005a84:	4770      	bx	lr

08005a86 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f043 0201 	orr.w	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f023 0201 	bic.w	r2, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b082      	sub	sp, #8
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ae2:	78fb      	ldrb	r3, [r7, #3]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d106      	bne.n	8005af6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	60da      	str	r2, [r3, #12]
 8005af4:	e00b      	b.n	8005b0e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	e001      	b.n	8005b0e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e003      	b.n	8005b16 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005b0e:	2032      	movs	r0, #50	; 0x32
 8005b10:	f7fb fbc8 	bl	80012a4 <HAL_Delay>

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	019b      	lsls	r3, r3, #6
 8005b32:	f043 0220 	orr.w	r2, r3, #32
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4a09      	ldr	r2, [pc, #36]	; (8005b68 <USB_FlushTxFifo+0x48>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d901      	bls.n	8005b4c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e006      	b.n	8005b5a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d0f0      	beq.n	8005b3a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	00030d40 	.word	0x00030d40

08005b6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2210      	movs	r2, #16
 8005b7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3301      	adds	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4a09      	ldr	r2, [pc, #36]	; (8005bac <USB_FlushRxFifo+0x40>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d901      	bls.n	8005b90 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e006      	b.n	8005b9e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b10      	cmp	r3, #16
 8005b9a:	d0f0      	beq.n	8005b7e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	00030d40 	.word	0x00030d40

08005bb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b089      	sub	sp, #36	; 0x24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	71fb      	strb	r3, [r7, #7]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005bce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d11a      	bne.n	8005c0c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005bd6:	88bb      	ldrh	r3, [r7, #4]
 8005bd8:	3303      	adds	r3, #3
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	e00f      	b.n	8005c04 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	031a      	lsls	r2, r3, #12
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	3301      	adds	r3, #1
 8005c02:	61bb      	str	r3, [r7, #24]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d3eb      	bcc.n	8005be4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3724      	adds	r7, #36	; 0x24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b089      	sub	sp, #36	; 0x24
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	4613      	mov	r3, r2
 8005c26:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	3303      	adds	r3, #3
 8005c34:	089b      	lsrs	r3, r3, #2
 8005c36:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61bb      	str	r3, [r7, #24]
 8005c3c:	e00b      	b.n	8005c56 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	3301      	adds	r3, #1
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d3ef      	bcc.n	8005c3e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005c5e:	69fb      	ldr	r3, [r7, #28]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3724      	adds	r7, #36	; 0x24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4013      	ands	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c84:	68fb      	ldr	r3, [r7, #12]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <USB_CoreReset+0x64>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e01b      	b.n	8005d06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	daf2      	bge.n	8005cbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f043 0201 	orr.w	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4a09      	ldr	r2, [pc, #36]	; (8005d14 <USB_CoreReset+0x64>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d901      	bls.n	8005cf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e006      	b.n	8005d06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d0f0      	beq.n	8005ce6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	00030d40 	.word	0x00030d40

08005d18 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d18:	b084      	sub	sp, #16
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	f107 001c 	add.w	r0, r7, #28
 8005d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d34:	461a      	mov	r2, r3
 8005d36:	2300      	movs	r3, #0
 8005d38:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d018      	beq.n	8005d9c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d10a      	bne.n	8005d86 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d7e:	f043 0304 	orr.w	r3, r3, #4
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	e014      	b.n	8005db0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d94:	f023 0304 	bic.w	r3, r3, #4
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e009      	b.n	8005db0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005daa:	f023 0304 	bic.w	r3, r3, #4
 8005dae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005db0:	2110      	movs	r1, #16
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff feb4 	bl	8005b20 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff fed7 	bl	8005b6c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e015      	b.n	8005df0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de4:	461a      	mov	r2, r3
 8005de6:	2300      	movs	r3, #0
 8005de8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3301      	adds	r3, #1
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d3e5      	bcc.n	8005dc4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005df8:	2101      	movs	r1, #1
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f8ac 	bl	8005f58 <USB_DriveVbus>

  HAL_Delay(200U);
 8005e00:	20c8      	movs	r0, #200	; 0xc8
 8005e02:	f7fb fa4f 	bl	80012a4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e12:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a14      	ldr	r2, [pc, #80]	; (8005e7c <USB_HostInit+0x164>)
 8005e2c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a13      	ldr	r2, [pc, #76]	; (8005e80 <USB_HostInit+0x168>)
 8005e32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005e36:	e009      	b.n	8005e4c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2280      	movs	r2, #128	; 0x80
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a10      	ldr	r2, [pc, #64]	; (8005e84 <USB_HostInit+0x16c>)
 8005e42:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a10      	ldr	r2, [pc, #64]	; (8005e88 <USB_HostInit+0x170>)
 8005e48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d105      	bne.n	8005e5e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f043 0210 	orr.w	r2, r3, #16
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <USB_HostInit+0x174>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e76:	b004      	add	sp, #16
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	01000200 	.word	0x01000200
 8005e80:	00e00300 	.word	0x00e00300
 8005e84:	00600080 	.word	0x00600080
 8005e88:	004000e0 	.word	0x004000e0
 8005e8c:	a3200008 	.word	0xa3200008

08005e90 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005eae:	f023 0303 	bic.w	r3, r3, #3
 8005eb2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	68f9      	ldr	r1, [r7, #12]
 8005ec4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d107      	bne.n	8005ee2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005ede:	6053      	str	r3, [r2, #4]
 8005ee0:	e009      	b.n	8005ef6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005ee2:	78fb      	ldrb	r3, [r7, #3]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d106      	bne.n	8005ef6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f241 7370 	movw	r3, #6000	; 0x1770
 8005ef4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f24:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f32:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005f34:	2064      	movs	r0, #100	; 0x64
 8005f36:	f7fb f9b5 	bl	80012a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f46:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f48:	200a      	movs	r0, #10
 8005f4a:	f7fb f9ab 	bl	80012a4 <HAL_Delay>

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	460b      	mov	r3, r1
 8005f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d109      	bne.n	8005f9c <USB_DriveVbus+0x44>
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d106      	bne.n	8005f9c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f9a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa6:	d109      	bne.n	8005fbc <USB_DriveVbus+0x64>
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	0c5b      	lsrs	r3, r3, #17
 8005fe8:	f003 0303 	and.w	r3, r3, #3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	b29b      	uxth	r3, r3
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	4608      	mov	r0, r1
 8006026:	4611      	mov	r1, r2
 8006028:	461a      	mov	r2, r3
 800602a:	4603      	mov	r3, r0
 800602c:	70fb      	strb	r3, [r7, #3]
 800602e:	460b      	mov	r3, r1
 8006030:	70bb      	strb	r3, [r7, #2]
 8006032:	4613      	mov	r3, r2
 8006034:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800603e:	78fb      	ldrb	r3, [r7, #3]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604a:	461a      	mov	r2, r3
 800604c:	f04f 33ff 	mov.w	r3, #4294967295
 8006050:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006052:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006056:	2b03      	cmp	r3, #3
 8006058:	d87e      	bhi.n	8006158 <USB_HC_Init+0x13c>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <USB_HC_Init+0x44>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006071 	.word	0x08006071
 8006064:	0800611b 	.word	0x0800611b
 8006068:	08006071 	.word	0x08006071
 800606c:	080060dd 	.word	0x080060dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4413      	add	r3, r2
 8006078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607c:	461a      	mov	r2, r3
 800607e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006082:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006084:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006088:	2b00      	cmp	r3, #0
 800608a:	da10      	bge.n	80060ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060aa:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80060ac:	e057      	b.n	800615e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d051      	beq.n	800615e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	78fa      	ldrb	r2, [r7, #3]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80060d8:	60d3      	str	r3, [r2, #12]
      break;
 80060da:	e040      	b.n	800615e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e8:	461a      	mov	r2, r3
 80060ea:	f240 639d 	movw	r3, #1693	; 0x69d
 80060ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da34      	bge.n	8006162 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	78fa      	ldrb	r2, [r7, #3]
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	440a      	add	r2, r1
 800610e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006116:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006118:	e023      	b.n	8006162 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006126:	461a      	mov	r2, r3
 8006128:	f240 2325 	movw	r3, #549	; 0x225
 800612c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800612e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006132:	2b00      	cmp	r3, #0
 8006134:	da17      	bge.n	8006166 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	4413      	add	r3, r2
 800613e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	78fa      	ldrb	r2, [r7, #3]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	440a      	add	r2, r1
 800614c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006150:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006154:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006156:	e006      	b.n	8006166 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	75fb      	strb	r3, [r7, #23]
      break;
 800615c:	e004      	b.n	8006168 <USB_HC_Init+0x14c>
      break;
 800615e:	bf00      	nop
 8006160:	e002      	b.n	8006168 <USB_HC_Init+0x14c>
      break;
 8006162:	bf00      	nop
 8006164:	e000      	b.n	8006168 <USB_HC_Init+0x14c>
      break;
 8006166:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800616e:	699a      	ldr	r2, [r3, #24]
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	2101      	movs	r1, #1
 8006178:	fa01 f303 	lsl.w	r3, r1, r3
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006182:	4313      	orrs	r3, r2
 8006184:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006192:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006196:	2b00      	cmp	r3, #0
 8006198:	da03      	bge.n	80061a2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800619a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	e001      	b.n	80061a6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80061a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d103      	bne.n	80061b6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80061ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e001      	b.n	80061ba <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061ba:	787b      	ldrb	r3, [r7, #1]
 80061bc:	059b      	lsls	r3, r3, #22
 80061be:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061c2:	78bb      	ldrb	r3, [r7, #2]
 80061c4:	02db      	lsls	r3, r3, #11
 80061c6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061ca:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061d0:	049b      	lsls	r3, r3, #18
 80061d2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061d6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80061da:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061de:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	0159      	lsls	r1, r3, #5
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	440b      	add	r3, r1
 80061ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061f6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80061f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d10f      	bne.n	8006220 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4413      	add	r3, r2
 8006208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	78fa      	ldrb	r2, [r7, #3]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	440a      	add	r2, r1
 8006216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800621a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800621e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
}
 8006222:	4618      	mov	r0, r3
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop

08006230 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08c      	sub	sp, #48	; 0x30
 8006234:	af02      	add	r7, sp, #8
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800624c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d028      	beq.n	80062ac <USB_HC_StartXfer+0x7c>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	791b      	ldrb	r3, [r3, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d124      	bne.n	80062ac <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10b      	bne.n	8006280 <USB_HC_StartXfer+0x50>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	795b      	ldrb	r3, [r3, #5]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d107      	bne.n	8006280 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	785b      	ldrb	r3, [r3, #1]
 8006274:	4619      	mov	r1, r3
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fa30 	bl	80066dc <USB_DoPing>
      return HAL_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	e114      	b.n	80064aa <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d112      	bne.n	80062ac <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	4413      	add	r3, r2
 800628e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	6a3a      	ldr	r2, [r7, #32]
 800629a:	440a      	add	r2, r1
 800629c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80062a4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2200      	movs	r2, #0
 80062aa:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d018      	beq.n	80062e6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	8912      	ldrh	r2, [r2, #8]
 80062bc:	4413      	add	r3, r2
 80062be:	3b01      	subs	r3, #1
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	8912      	ldrh	r2, [r2, #8]
 80062c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062c8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80062ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062cc:	8b7b      	ldrh	r3, [r7, #26]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d90b      	bls.n	80062ea <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80062d2:	8b7b      	ldrh	r3, [r7, #26]
 80062d4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80062d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	8912      	ldrh	r2, [r2, #8]
 80062dc:	fb02 f203 	mul.w	r2, r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	611a      	str	r2, [r3, #16]
 80062e4:	e001      	b.n	80062ea <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80062e6:	2301      	movs	r3, #1
 80062e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	78db      	ldrb	r3, [r3, #3]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d006      	beq.n	8006300 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80062f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	8912      	ldrh	r2, [r2, #8]
 80062f8:	fb02 f203 	mul.w	r2, r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800630a:	04d9      	lsls	r1, r3, #19
 800630c:	4b69      	ldr	r3, [pc, #420]	; (80064b4 <USB_HC_StartXfer+0x284>)
 800630e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006310:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	7a9b      	ldrb	r3, [r3, #10]
 8006316:	075b      	lsls	r3, r3, #29
 8006318:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800631c:	69f9      	ldr	r1, [r7, #28]
 800631e:	0148      	lsls	r0, r1, #5
 8006320:	6a39      	ldr	r1, [r7, #32]
 8006322:	4401      	add	r1, r0
 8006324:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006328:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800632a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d009      	beq.n	8006346 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	68d9      	ldr	r1, [r3, #12]
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006342:	460a      	mov	r2, r1
 8006344:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	bf0c      	ite	eq
 8006356:	2301      	moveq	r3, #1
 8006358:	2300      	movne	r3, #0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	0151      	lsls	r1, r2, #5
 8006370:	6a3a      	ldr	r2, [r7, #32]
 8006372:	440a      	add	r2, r1
 8006374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006378:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800637c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	7e7b      	ldrb	r3, [r7, #25]
 800638e:	075b      	lsls	r3, r3, #29
 8006390:	69f9      	ldr	r1, [r7, #28]
 8006392:	0148      	lsls	r0, r1, #5
 8006394:	6a39      	ldr	r1, [r7, #32]
 8006396:	4401      	add	r1, r0
 8006398:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800639c:	4313      	orrs	r3, r2
 800639e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a42      	ldr	r2, [pc, #264]	; (80064b8 <USB_HC_StartXfer+0x288>)
 80063b0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063b2:	4b41      	ldr	r3, [pc, #260]	; (80064b8 <USB_HC_StartXfer+0x288>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063ba:	4a3f      	ldr	r2, [pc, #252]	; (80064b8 <USB_HC_StartXfer+0x288>)
 80063bc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	78db      	ldrb	r3, [r3, #3]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d006      	beq.n	80063d4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80063c6:	4b3c      	ldr	r3, [pc, #240]	; (80064b8 <USB_HC_StartXfer+0x288>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ce:	4a3a      	ldr	r2, [pc, #232]	; (80064b8 <USB_HC_StartXfer+0x288>)
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	e005      	b.n	80063e0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063d4:	4b38      	ldr	r3, [pc, #224]	; (80064b8 <USB_HC_StartXfer+0x288>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063dc:	4a36      	ldr	r2, [pc, #216]	; (80064b8 <USB_HC_StartXfer+0x288>)
 80063de:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063e0:	4b35      	ldr	r3, [pc, #212]	; (80064b8 <USB_HC_StartXfer+0x288>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063e8:	4a33      	ldr	r2, [pc, #204]	; (80064b8 <USB_HC_StartXfer+0x288>)
 80063ea:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	461a      	mov	r2, r3
 80063fa:	4b2f      	ldr	r3, [pc, #188]	; (80064b8 <USB_HC_StartXfer+0x288>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	e04f      	b.n	80064aa <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	78db      	ldrb	r3, [r3, #3]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d14a      	bne.n	80064a8 <USB_HC_StartXfer+0x278>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d046      	beq.n	80064a8 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	79db      	ldrb	r3, [r3, #7]
 800641e:	2b03      	cmp	r3, #3
 8006420:	d830      	bhi.n	8006484 <USB_HC_StartXfer+0x254>
 8006422:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <USB_HC_StartXfer+0x1f8>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	08006439 	.word	0x08006439
 800642c:	0800645d 	.word	0x0800645d
 8006430:	08006439 	.word	0x08006439
 8006434:	0800645d 	.word	0x0800645d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	3303      	adds	r3, #3
 800643e:	089b      	lsrs	r3, r3, #2
 8006440:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006442:	8afa      	ldrh	r2, [r7, #22]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	b29b      	uxth	r3, r3
 800644a:	429a      	cmp	r2, r3
 800644c:	d91c      	bls.n	8006488 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f043 0220 	orr.w	r2, r3, #32
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	619a      	str	r2, [r3, #24]
        }
        break;
 800645a:	e015      	b.n	8006488 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	3303      	adds	r3, #3
 8006462:	089b      	lsrs	r3, r3, #2
 8006464:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006466:	8afa      	ldrh	r2, [r7, #22]
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	b29b      	uxth	r3, r3
 8006472:	429a      	cmp	r2, r3
 8006474:	d90a      	bls.n	800648c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	619a      	str	r2, [r3, #24]
        }
        break;
 8006482:	e003      	b.n	800648c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006484:	bf00      	nop
 8006486:	e002      	b.n	800648e <USB_HC_StartXfer+0x25e>
        break;
 8006488:	bf00      	nop
 800648a:	e000      	b.n	800648e <USB_HC_StartXfer+0x25e>
        break;
 800648c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	68d9      	ldr	r1, [r3, #12]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	785a      	ldrb	r2, [r3, #1]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	b298      	uxth	r0, r3
 800649c:	2300      	movs	r3, #0
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	4603      	mov	r3, r0
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff fb84 	bl	8005bb0 <USB_WritePacket>
  }

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3728      	adds	r7, #40	; 0x28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	1ff80000 	.word	0x1ff80000
 80064b8:	200000bc 	.word	0x200000bc

080064bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	b29b      	uxth	r3, r3
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064de:	b480      	push	{r7}
 80064e0:	b087      	sub	sp, #28
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	0c9b      	lsrs	r3, r3, #18
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <USB_HC_Halt+0x3a>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d16c      	bne.n	80065f2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4413      	add	r3, r2
 8006520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	440a      	add	r2, r1
 800652e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006532:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006536:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d143      	bne.n	80065cc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	4413      	add	r3, r2
 800654c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	440a      	add	r2, r1
 800655a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800655e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006562:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	440a      	add	r2, r1
 800657a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006582:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	440a      	add	r2, r1
 800659a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065a2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	3301      	adds	r3, #1
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065b0:	d81d      	bhi.n	80065ee <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c8:	d0ec      	beq.n	80065a4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80065ca:	e080      	b.n	80066ce <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	0151      	lsls	r1, r2, #5
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	440a      	add	r2, r1
 80065e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ea:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80065ec:	e06f      	b.n	80066ce <USB_HC_Halt+0x1f0>
          break;
 80065ee:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80065f0:	e06d      	b.n	80066ce <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	440a      	add	r2, r1
 8006608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800660c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006610:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d143      	bne.n	80066aa <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4413      	add	r3, r2
 800662a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	440a      	add	r2, r1
 8006638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800663c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006640:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	440a      	add	r2, r1
 8006658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006660:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	4413      	add	r3, r2
 800666a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	440a      	add	r2, r1
 8006678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800667c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006680:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	3301      	adds	r3, #1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800668e:	d81d      	bhi.n	80066cc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	4413      	add	r3, r2
 8006698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a6:	d0ec      	beq.n	8006682 <USB_HC_Halt+0x1a4>
 80066a8:	e011      	b.n	80066ce <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e000      	b.n	80066ce <USB_HC_Halt+0x1f0>
          break;
 80066cc:	bf00      	nop
    }
  }

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066f0:	2301      	movs	r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	04da      	lsls	r2, r3, #19
 80066f8:	4b15      	ldr	r3, [pc, #84]	; (8006750 <USB_DoPing+0x74>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	440a      	add	r2, r1
 8006704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800670c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006724:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800672c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	461a      	mov	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	371c      	adds	r7, #28
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	1ff80000 	.word	0x1ff80000

08006754 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff f99f 	bl	8005aa8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800676a:	2110      	movs	r1, #16
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff f9d7 	bl	8005b20 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff f9fa 	bl	8005b6c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006778:	2300      	movs	r3, #0
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	e01f      	b.n	80067be <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006794:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800679c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067a4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b2:	461a      	mov	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	3301      	adds	r3, #1
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b0f      	cmp	r3, #15
 80067c2:	d9dc      	bls.n	800677e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067c4:	2300      	movs	r3, #0
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	e034      	b.n	8006834 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067e0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067f0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fe:	461a      	mov	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3301      	adds	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006810:	d80c      	bhi.n	800682c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006828:	d0ec      	beq.n	8006804 <USB_StopHost+0xb0>
 800682a:	e000      	b.n	800682e <USB_StopHost+0xda>
        break;
 800682c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	3301      	adds	r3, #1
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b0f      	cmp	r3, #15
 8006838:	d9c7      	bls.n	80067ca <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006840:	461a      	mov	r2, r3
 8006842:	f04f 33ff 	mov.w	r3, #4294967295
 8006846:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f04f 32ff 	mov.w	r2, #4294967295
 800684e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7ff f918 	bl	8005a86 <USB_EnableGlobalInt>

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006860:	b590      	push	{r4, r7, lr}
 8006862:	b089      	sub	sp, #36	; 0x24
 8006864:	af04      	add	r7, sp, #16
 8006866:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006868:	2301      	movs	r3, #1
 800686a:	2202      	movs	r2, #2
 800686c:	2102      	movs	r1, #2
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fc68 	bl	8007144 <USBH_FindInterface>
 8006874:	4603      	mov	r3, r0
 8006876:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	2bff      	cmp	r3, #255	; 0xff
 800687c:	d002      	beq.n	8006884 <USBH_CDC_InterfaceInit+0x24>
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d901      	bls.n	8006888 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006884:	2302      	movs	r3, #2
 8006886:	e13d      	b.n	8006b04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fc3d 	bl	800710c <USBH_SelectInterface>
 8006892:	4603      	mov	r3, r0
 8006894:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006896:	7bbb      	ldrb	r3, [r7, #14]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800689c:	2302      	movs	r3, #2
 800689e:	e131      	b.n	8006b04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80068a6:	2050      	movs	r0, #80	; 0x50
 80068a8:	f002 fa04 	bl	8008cb4 <malloc>
 80068ac:	4603      	mov	r3, r0
 80068ae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80068c0:	2302      	movs	r3, #2
 80068c2:	e11f      	b.n	8006b04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80068c4:	2250      	movs	r2, #80	; 0x50
 80068c6:	2100      	movs	r1, #0
 80068c8:	68b8      	ldr	r0, [r7, #8]
 80068ca:	f002 fa03 	bl	8008cd4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	211a      	movs	r1, #26
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	4413      	add	r3, r2
 80068da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	b25b      	sxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	da15      	bge.n	8006912 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	211a      	movs	r1, #26
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	4413      	add	r3, r2
 80068f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068f6:	781a      	ldrb	r2, [r3, #0]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	211a      	movs	r1, #26
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	4413      	add	r3, r2
 8006908:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800690c:	881a      	ldrh	r2, [r3, #0]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 fe36 	bl	800858a <USBH_AllocPipe>
 800691e:	4603      	mov	r3, r0
 8006920:	461a      	mov	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	7819      	ldrb	r1, [r3, #0]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	7858      	ldrb	r0, [r3, #1]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	8952      	ldrh	r2, [r2, #10]
 800693e:	9202      	str	r2, [sp, #8]
 8006940:	2203      	movs	r2, #3
 8006942:	9201      	str	r2, [sp, #4]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	4623      	mov	r3, r4
 8006948:	4602      	mov	r2, r0
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 fdee 	bl	800852c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2200      	movs	r2, #0
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f002 f8fb 	bl	8008b54 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800695e:	2300      	movs	r3, #0
 8006960:	2200      	movs	r2, #0
 8006962:	210a      	movs	r1, #10
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fbed 	bl	8007144 <USBH_FindInterface>
 800696a:	4603      	mov	r3, r0
 800696c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	2bff      	cmp	r3, #255	; 0xff
 8006972:	d002      	beq.n	800697a <USBH_CDC_InterfaceInit+0x11a>
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d901      	bls.n	800697e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800697a:	2302      	movs	r3, #2
 800697c:	e0c2      	b.n	8006b04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	211a      	movs	r1, #26
 8006984:	fb01 f303 	mul.w	r3, r1, r3
 8006988:	4413      	add	r3, r2
 800698a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	b25b      	sxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	da16      	bge.n	80069c4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	211a      	movs	r1, #26
 800699c:	fb01 f303 	mul.w	r3, r1, r3
 80069a0:	4413      	add	r3, r2
 80069a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069a6:	781a      	ldrb	r2, [r3, #0]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	211a      	movs	r1, #26
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069bc:	881a      	ldrh	r2, [r3, #0]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	835a      	strh	r2, [r3, #26]
 80069c2:	e015      	b.n	80069f0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	211a      	movs	r1, #26
 80069ca:	fb01 f303 	mul.w	r3, r1, r3
 80069ce:	4413      	add	r3, r2
 80069d0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069d4:	781a      	ldrb	r2, [r3, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	211a      	movs	r1, #26
 80069e0:	fb01 f303 	mul.w	r3, r1, r3
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069ea:	881a      	ldrh	r2, [r3, #0]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	211a      	movs	r1, #26
 80069f6:	fb01 f303 	mul.w	r3, r1, r3
 80069fa:	4413      	add	r3, r2
 80069fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	b25b      	sxtb	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	da16      	bge.n	8006a36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	211a      	movs	r1, #26
 8006a0e:	fb01 f303 	mul.w	r3, r1, r3
 8006a12:	4413      	add	r3, r2
 8006a14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	211a      	movs	r1, #26
 8006a24:	fb01 f303 	mul.w	r3, r1, r3
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a2e:	881a      	ldrh	r2, [r3, #0]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	835a      	strh	r2, [r3, #26]
 8006a34:	e015      	b.n	8006a62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	211a      	movs	r1, #26
 8006a3c:	fb01 f303 	mul.w	r3, r1, r3
 8006a40:	4413      	add	r3, r2
 8006a42:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a46:	781a      	ldrb	r2, [r3, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	211a      	movs	r1, #26
 8006a52:	fb01 f303 	mul.w	r3, r1, r3
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a5c:	881a      	ldrh	r2, [r3, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	7b9b      	ldrb	r3, [r3, #14]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 fd8e 	bl	800858a <USBH_AllocPipe>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	461a      	mov	r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	7bdb      	ldrb	r3, [r3, #15]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 fd84 	bl	800858a <USBH_AllocPipe>
 8006a82:	4603      	mov	r3, r0
 8006a84:	461a      	mov	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	7b59      	ldrb	r1, [r3, #13]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	7b98      	ldrb	r0, [r3, #14]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	8b12      	ldrh	r2, [r2, #24]
 8006aa2:	9202      	str	r2, [sp, #8]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	9201      	str	r2, [sp, #4]
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	4623      	mov	r3, r4
 8006aac:	4602      	mov	r2, r0
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 fd3c 	bl	800852c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	7b19      	ldrb	r1, [r3, #12]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	7bd8      	ldrb	r0, [r3, #15]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	8b52      	ldrh	r2, [r2, #26]
 8006acc:	9202      	str	r2, [sp, #8]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	9201      	str	r2, [sp, #4]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	4623      	mov	r3, r4
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 fd27 	bl	800852c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	7b5b      	ldrb	r3, [r3, #13]
 8006aea:	2200      	movs	r2, #0
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f002 f830 	bl	8008b54 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	7b1b      	ldrb	r3, [r3, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f002 f829 	bl	8008b54 <USBH_LL_SetToggle>

  return USBH_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd90      	pop	{r4, r7, pc}

08006b0c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00e      	beq.n	8006b44 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 fd1c 	bl	800856a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f001 fd47 	bl	80085cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	7b1b      	ldrb	r3, [r3, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00e      	beq.n	8006b6a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	7b1b      	ldrb	r3, [r3, #12]
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fd09 	bl	800856a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	7b1b      	ldrb	r3, [r3, #12]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f001 fd34 	bl	80085cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	7b5b      	ldrb	r3, [r3, #13]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00e      	beq.n	8006b90 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	7b5b      	ldrb	r3, [r3, #13]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 fcf6 	bl	800856a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	7b5b      	ldrb	r3, [r3, #13]
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 fd21 	bl	80085cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00b      	beq.n	8006bb4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f002 f88d 	bl	8008cc4 <free>
    phost->pActiveClass->pData = 0U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3340      	adds	r3, #64	; 0x40
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f8b1 	bl	8006d3e <GetLineCoding>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006be0:	7afb      	ldrb	r3, [r7, #11]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d105      	bne.n	8006bf2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bec:	2102      	movs	r1, #2
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c04:	2301      	movs	r3, #1
 8006c06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d877      	bhi.n	8006d10 <USBH_CDC_Process+0x114>
 8006c20:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <USBH_CDC_Process+0x2c>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c3d 	.word	0x08006c3d
 8006c2c:	08006c43 	.word	0x08006c43
 8006c30:	08006c73 	.word	0x08006c73
 8006c34:	08006ce7 	.word	0x08006ce7
 8006c38:	08006cf5 	.word	0x08006cf5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c40:	e06d      	b.n	8006d1e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f897 	bl	8006d7c <SetLineCoding>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c60:	e058      	b.n	8006d14 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d055      	beq.n	8006d14 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c70:	e050      	b.n	8006d14 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	3340      	adds	r3, #64	; 0x40
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f860 	bl	8006d3e <GetLineCoding>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d126      	bne.n	8006cd6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9a:	791b      	ldrb	r3, [r3, #4]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d13b      	bne.n	8006d18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006caa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d133      	bne.n	8006d18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d12b      	bne.n	8006d18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d124      	bne.n	8006d18 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f95a 	bl	8006f88 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cd4:	e020      	b.n	8006d18 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d01d      	beq.n	8006d18 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2204      	movs	r2, #4
 8006ce0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ce4:	e018      	b.n	8006d18 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f867 	bl	8006dba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f8dc 	bl	8006eaa <CDC_ProcessReception>
      break;
 8006cf2:	e014      	b.n	8006d1e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 ffe5 	bl	8007cc6 <USBH_ClrFeature>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10a      	bne.n	8006d1c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006d0e:	e005      	b.n	8006d1c <USBH_CDC_Process+0x120>

    default:
      break;
 8006d10:	bf00      	nop
 8006d12:	e004      	b.n	8006d1e <USBH_CDC_Process+0x122>
      break;
 8006d14:	bf00      	nop
 8006d16:	e002      	b.n	8006d1e <USBH_CDC_Process+0x122>
      break;
 8006d18:	bf00      	nop
 8006d1a:	e000      	b.n	8006d1e <USBH_CDC_Process+0x122>
      break;
 8006d1c:	bf00      	nop

  }

  return status;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b082      	sub	sp, #8
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	22a1      	movs	r2, #161	; 0xa1
 8006d4c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2221      	movs	r2, #33	; 0x21
 8006d52:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2207      	movs	r2, #7
 8006d64:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2207      	movs	r2, #7
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 f98a 	bl	8008086 <USBH_CtlReq>
 8006d72:	4603      	mov	r3, r0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2221      	movs	r2, #33	; 0x21
 8006d8a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2207      	movs	r2, #7
 8006da2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2207      	movs	r2, #7
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 f96b 	bl	8008086 <USBH_CtlReq>
 8006db0:	4603      	mov	r3, r0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b086      	sub	sp, #24
 8006dbe:	af02      	add	r7, sp, #8
 8006dc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d002      	beq.n	8006de0 <CDC_ProcessTransmission+0x26>
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d025      	beq.n	8006e2a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006dde:	e060      	b.n	8006ea2 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	8b12      	ldrh	r2, [r2, #24]
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d90c      	bls.n	8006e06 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	69d9      	ldr	r1, [r3, #28]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8b1a      	ldrh	r2, [r3, #24]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	7b58      	ldrb	r0, [r3, #13]
 8006df8:	2301      	movs	r3, #1
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fb51 	bl	80084a6 <USBH_BulkSendData>
 8006e04:	e00c      	b.n	8006e20 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	7b58      	ldrb	r0, [r3, #13]
 8006e14:	2301      	movs	r3, #1
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	4603      	mov	r3, r0
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 fb43 	bl	80084a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e28:	e03b      	b.n	8006ea2 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	7b5b      	ldrb	r3, [r3, #13]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 fe65 	bl	8008b00 <USBH_LL_GetURBState>
 8006e36:	4603      	mov	r3, r0
 8006e38:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e3a:	7afb      	ldrb	r3, [r7, #11]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d128      	bne.n	8006e92 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	8b12      	ldrh	r2, [r2, #24]
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d90e      	bls.n	8006e6a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	8b12      	ldrh	r2, [r2, #24]
 8006e54:	1a9a      	subs	r2, r3, r2
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	8b12      	ldrh	r2, [r2, #24]
 8006e62:	441a      	add	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	61da      	str	r2, [r3, #28]
 8006e68:	e002      	b.n	8006e70 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e80:	e00e      	b.n	8006ea0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f868 	bl	8006f60 <USBH_CDC_TransmitCallback>
      break;
 8006e90:	e006      	b.n	8006ea0 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e92:	7afb      	ldrb	r3, [r7, #11]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d103      	bne.n	8006ea0 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ea0:	bf00      	nop
  }
}
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b086      	sub	sp, #24
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d002      	beq.n	8006ed0 <CDC_ProcessReception+0x26>
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d00e      	beq.n	8006eec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006ece:	e043      	b.n	8006f58 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	6a19      	ldr	r1, [r3, #32]
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	8b5a      	ldrh	r2, [r3, #26]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	7b1b      	ldrb	r3, [r3, #12]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 fb07 	bl	80084f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006eea:	e035      	b.n	8006f58 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	7b1b      	ldrb	r3, [r3, #12]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 fe04 	bl	8008b00 <USBH_LL_GetURBState>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006efc:	7cfb      	ldrb	r3, [r7, #19]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d129      	bne.n	8006f56 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	7b1b      	ldrb	r3, [r3, #12]
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f001 fd67 	bl	80089dc <USBH_LL_GetLastXferSize>
 8006f0e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d016      	beq.n	8006f48 <CDC_ProcessReception+0x9e>
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	8b5b      	ldrh	r3, [r3, #26]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d910      	bls.n	8006f48 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	1ad2      	subs	r2, r2, r3
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	6a1a      	ldr	r2, [r3, #32]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	441a      	add	r2, r3
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2203      	movs	r2, #3
 8006f42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f46:	e006      	b.n	8006f56 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f80f 	bl	8006f74 <USBH_CDC_ReceiveCallback>
      break;
 8006f56:	bf00      	nop
  }
}
 8006f58:	bf00      	nop
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e029      	b.n	8007008 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	79fa      	ldrb	r2, [r7, #7]
 8006fb8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f81f 	bl	8007010 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d003      	beq.n	8007000 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f001 fc39 	bl	8008878 <USBH_LL_Init>

  return USBH_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e009      	b.n	8007036 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	33e0      	adds	r3, #224	; 0xe0
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	2200      	movs	r2, #0
 800702e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3301      	adds	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b0e      	cmp	r3, #14
 800703a:	d9f2      	bls.n	8007022 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e009      	b.n	8007056 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800704c:	2200      	movs	r2, #0
 800704e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3301      	adds	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800705c:	d3f1      	bcc.n	8007042 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2240      	movs	r2, #64	; 0x40
 8007082:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d016      	beq.n	80070fa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10e      	bne.n	80070f4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070dc:	1c59      	adds	r1, r3, #1
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	33de      	adds	r3, #222	; 0xde
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]
 80070f2:	e004      	b.n	80070fe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070f4:	2302      	movs	r3, #2
 80070f6:	73fb      	strb	r3, [r7, #15]
 80070f8:	e001      	b.n	80070fe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070fa:	2302      	movs	r3, #2
 80070fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007122:	78fa      	ldrb	r2, [r7, #3]
 8007124:	429a      	cmp	r2, r3
 8007126:	d204      	bcs.n	8007132 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	78fa      	ldrb	r2, [r7, #3]
 800712c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007130:	e001      	b.n	8007136 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007132:	2302      	movs	r3, #2
 8007134:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	461a      	mov	r2, r3
 8007152:	4603      	mov	r3, r0
 8007154:	70fb      	strb	r3, [r7, #3]
 8007156:	460b      	mov	r3, r1
 8007158:	70bb      	strb	r3, [r7, #2]
 800715a:	4613      	mov	r3, r2
 800715c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007162:	2300      	movs	r3, #0
 8007164:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800716c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800716e:	e025      	b.n	80071bc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007170:	7dfb      	ldrb	r3, [r7, #23]
 8007172:	221a      	movs	r2, #26
 8007174:	fb02 f303 	mul.w	r3, r2, r3
 8007178:	3308      	adds	r3, #8
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4413      	add	r3, r2
 800717e:	3302      	adds	r3, #2
 8007180:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	795b      	ldrb	r3, [r3, #5]
 8007186:	78fa      	ldrb	r2, [r7, #3]
 8007188:	429a      	cmp	r2, r3
 800718a:	d002      	beq.n	8007192 <USBH_FindInterface+0x4e>
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	2bff      	cmp	r3, #255	; 0xff
 8007190:	d111      	bne.n	80071b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007196:	78ba      	ldrb	r2, [r7, #2]
 8007198:	429a      	cmp	r2, r3
 800719a:	d002      	beq.n	80071a2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800719c:	78bb      	ldrb	r3, [r7, #2]
 800719e:	2bff      	cmp	r3, #255	; 0xff
 80071a0:	d109      	bne.n	80071b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071a6:	787a      	ldrb	r2, [r7, #1]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d002      	beq.n	80071b2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071ac:	787b      	ldrb	r3, [r7, #1]
 80071ae:	2bff      	cmp	r3, #255	; 0xff
 80071b0:	d101      	bne.n	80071b6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	e006      	b.n	80071c4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	3301      	adds	r3, #1
 80071ba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d9d6      	bls.n	8007170 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80071c2:	23ff      	movs	r3, #255	; 0xff
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 fb89 	bl	80088f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80071de:	2101      	movs	r1, #1
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 fca0 	bl	8008b26 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af04      	add	r7, sp, #16
 80071f6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071f8:	2302      	movs	r3, #2
 80071fa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	d102      	bne.n	8007212 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2203      	movs	r2, #3
 8007210:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b0b      	cmp	r3, #11
 800721a:	f200 81b3 	bhi.w	8007584 <USBH_Process+0x394>
 800721e:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <USBH_Process+0x34>)
 8007220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007224:	08007255 	.word	0x08007255
 8007228:	08007287 	.word	0x08007287
 800722c:	080072ef 	.word	0x080072ef
 8007230:	0800751f 	.word	0x0800751f
 8007234:	08007585 	.word	0x08007585
 8007238:	08007393 	.word	0x08007393
 800723c:	080074c5 	.word	0x080074c5
 8007240:	080073c9 	.word	0x080073c9
 8007244:	080073e9 	.word	0x080073e9
 8007248:	08007409 	.word	0x08007409
 800724c:	08007437 	.word	0x08007437
 8007250:	08007507 	.word	0x08007507
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 8193 	beq.w	8007588 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007268:	20c8      	movs	r0, #200	; 0xc8
 800726a:	f001 fca6 	bl	8008bba <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 fb99 	bl	80089a6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007284:	e180      	b.n	8007588 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800728c:	2b01      	cmp	r3, #1
 800728e:	d107      	bne.n	80072a0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800729e:	e182      	b.n	80075a6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072aa:	d914      	bls.n	80072d6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072b2:	3301      	adds	r3, #1
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d903      	bls.n	80072ce <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	220d      	movs	r2, #13
 80072ca:	701a      	strb	r2, [r3, #0]
      break;
 80072cc:	e16b      	b.n	80075a6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	701a      	strb	r2, [r3, #0]
      break;
 80072d4:	e167      	b.n	80075a6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072dc:	f103 020a 	add.w	r2, r3, #10
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80072e6:	200a      	movs	r0, #10
 80072e8:	f001 fc67 	bl	8008bba <USBH_Delay>
      break;
 80072ec:	e15b      	b.n	80075a6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d005      	beq.n	8007304 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072fe:	2104      	movs	r1, #4
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007304:	2064      	movs	r0, #100	; 0x64
 8007306:	f001 fc58 	bl	8008bba <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 fb26 	bl	800895c <USBH_LL_GetSpeed>
 8007310:	4603      	mov	r3, r0
 8007312:	461a      	mov	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2205      	movs	r2, #5
 800731e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007320:	2100      	movs	r1, #0
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 f931 	bl	800858a <USBH_AllocPipe>
 8007328:	4603      	mov	r3, r0
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007330:	2180      	movs	r1, #128	; 0x80
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 f929 	bl	800858a <USBH_AllocPipe>
 8007338:	4603      	mov	r3, r0
 800733a:	461a      	mov	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	7919      	ldrb	r1, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007354:	b292      	uxth	r2, r2
 8007356:	9202      	str	r2, [sp, #8]
 8007358:	2200      	movs	r2, #0
 800735a:	9201      	str	r2, [sp, #4]
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	4603      	mov	r3, r0
 8007360:	2280      	movs	r2, #128	; 0x80
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 f8e2 	bl	800852c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	7959      	ldrb	r1, [r3, #5]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800737c:	b292      	uxth	r2, r2
 800737e:	9202      	str	r2, [sp, #8]
 8007380:	2200      	movs	r2, #0
 8007382:	9201      	str	r2, [sp, #4]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	4603      	mov	r3, r0
 8007388:	2200      	movs	r2, #0
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 f8ce 	bl	800852c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007390:	e109      	b.n	80075a6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f90c 	bl	80075b0 <USBH_HandleEnum>
 8007398:	4603      	mov	r3, r0
 800739a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800739c:	7bbb      	ldrb	r3, [r7, #14]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 80f3 	bne.w	800758c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d103      	bne.n	80073c0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2208      	movs	r2, #8
 80073bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073be:	e0e5      	b.n	800758c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2207      	movs	r2, #7
 80073c4:	701a      	strb	r2, [r3, #0]
      break;
 80073c6:	e0e1      	b.n	800758c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80de 	beq.w	8007590 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073da:	2101      	movs	r1, #1
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2208      	movs	r2, #8
 80073e4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80073e6:	e0d3      	b.n	8007590 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fc20 	bl	8007c38 <USBH_SetCfg>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f040 80ca 	bne.w	8007594 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2209      	movs	r2, #9
 8007404:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007406:	e0c5      	b.n	8007594 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00b      	beq.n	800742e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007416:	2101      	movs	r1, #1
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fc30 	bl	8007c7e <USBH_SetFeature>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	f040 80b9 	bne.w	8007598 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	220a      	movs	r2, #10
 800742a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800742c:	e0b4      	b.n	8007598 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	220a      	movs	r2, #10
 8007432:	701a      	strb	r2, [r3, #0]
      break;
 8007434:	e0b0      	b.n	8007598 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 80ad 	beq.w	800759c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800744a:	2300      	movs	r3, #0
 800744c:	73fb      	strb	r3, [r7, #15]
 800744e:	e016      	b.n	800747e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007450:	7bfa      	ldrb	r2, [r7, #15]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	32de      	adds	r2, #222	; 0xde
 8007456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745a:	791a      	ldrb	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007462:	429a      	cmp	r2, r3
 8007464:	d108      	bne.n	8007478 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007466:	7bfa      	ldrb	r2, [r7, #15]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	32de      	adds	r2, #222	; 0xde
 800746c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007476:	e005      	b.n	8007484 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	3301      	adds	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0e5      	beq.n	8007450 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d016      	beq.n	80074bc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d109      	bne.n	80074b4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2206      	movs	r2, #6
 80074a4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074ac:	2103      	movs	r1, #3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074b2:	e073      	b.n	800759c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	220d      	movs	r2, #13
 80074b8:	701a      	strb	r2, [r3, #0]
      break;
 80074ba:	e06f      	b.n	800759c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	220d      	movs	r2, #13
 80074c0:	701a      	strb	r2, [r3, #0]
      break;
 80074c2:	e06b      	b.n	800759c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d017      	beq.n	80074fe <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	4798      	blx	r3
 80074da:	4603      	mov	r3, r0
 80074dc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	220b      	movs	r2, #11
 80074ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074ec:	e058      	b.n	80075a0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d154      	bne.n	80075a0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	220d      	movs	r2, #13
 80074fa:	701a      	strb	r2, [r3, #0]
      break;
 80074fc:	e050      	b.n	80075a0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	220d      	movs	r2, #13
 8007502:	701a      	strb	r2, [r3, #0]
      break;
 8007504:	e04c      	b.n	80075a0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800750c:	2b00      	cmp	r3, #0
 800750e:	d049      	beq.n	80075a4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	4798      	blx	r3
      }
      break;
 800751c:	e042      	b.n	80075a4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7ff fd72 	bl	8007010 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d009      	beq.n	800754a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800755a:	2105      	movs	r1, #5
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	d107      	bne.n	800757c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff fe2b 	bl	80071d0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800757a:	e014      	b.n	80075a6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 f9b7 	bl	80088f0 <USBH_LL_Start>
      break;
 8007582:	e010      	b.n	80075a6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007584:	bf00      	nop
 8007586:	e00e      	b.n	80075a6 <USBH_Process+0x3b6>
      break;
 8007588:	bf00      	nop
 800758a:	e00c      	b.n	80075a6 <USBH_Process+0x3b6>
      break;
 800758c:	bf00      	nop
 800758e:	e00a      	b.n	80075a6 <USBH_Process+0x3b6>
    break;
 8007590:	bf00      	nop
 8007592:	e008      	b.n	80075a6 <USBH_Process+0x3b6>
      break;
 8007594:	bf00      	nop
 8007596:	e006      	b.n	80075a6 <USBH_Process+0x3b6>
      break;
 8007598:	bf00      	nop
 800759a:	e004      	b.n	80075a6 <USBH_Process+0x3b6>
      break;
 800759c:	bf00      	nop
 800759e:	e002      	b.n	80075a6 <USBH_Process+0x3b6>
      break;
 80075a0:	bf00      	nop
 80075a2:	e000      	b.n	80075a6 <USBH_Process+0x3b6>
      break;
 80075a4:	bf00      	nop
  }
  return USBH_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af04      	add	r7, sp, #16
 80075b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80075b8:	2301      	movs	r3, #1
 80075ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075bc:	2301      	movs	r3, #1
 80075be:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	2b07      	cmp	r3, #7
 80075c6:	f200 81c1 	bhi.w	800794c <USBH_HandleEnum+0x39c>
 80075ca:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <USBH_HandleEnum+0x20>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	080075f1 	.word	0x080075f1
 80075d4:	080076af 	.word	0x080076af
 80075d8:	08007719 	.word	0x08007719
 80075dc:	080077a7 	.word	0x080077a7
 80075e0:	08007811 	.word	0x08007811
 80075e4:	08007881 	.word	0x08007881
 80075e8:	080078c7 	.word	0x080078c7
 80075ec:	0800790d 	.word	0x0800790d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075f0:	2108      	movs	r1, #8
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fa50 	bl	8007a98 <USBH_Get_DevDesc>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d130      	bne.n	8007664 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	7919      	ldrb	r1, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007626:	b292      	uxth	r2, r2
 8007628:	9202      	str	r2, [sp, #8]
 800762a:	2200      	movs	r2, #0
 800762c:	9201      	str	r2, [sp, #4]
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	4603      	mov	r3, r0
 8007632:	2280      	movs	r2, #128	; 0x80
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 ff79 	bl	800852c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	7959      	ldrb	r1, [r3, #5]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800764e:	b292      	uxth	r2, r2
 8007650:	9202      	str	r2, [sp, #8]
 8007652:	2200      	movs	r2, #0
 8007654:	9201      	str	r2, [sp, #4]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	4603      	mov	r3, r0
 800765a:	2200      	movs	r2, #0
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 ff65 	bl	800852c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007662:	e175      	b.n	8007950 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	2b03      	cmp	r3, #3
 8007668:	f040 8172 	bne.w	8007950 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007672:	3301      	adds	r3, #1
 8007674:	b2da      	uxtb	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007682:	2b03      	cmp	r3, #3
 8007684:	d903      	bls.n	800768e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	220d      	movs	r2, #13
 800768a:	701a      	strb	r2, [r3, #0]
      break;
 800768c:	e160      	b.n	8007950 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	795b      	ldrb	r3, [r3, #5]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 ff99 	bl	80085cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	791b      	ldrb	r3, [r3, #4]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 ff93 	bl	80085cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	701a      	strb	r2, [r3, #0]
      break;
 80076ac:	e150      	b.n	8007950 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076ae:	2112      	movs	r1, #18
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f9f1 	bl	8007a98 <USBH_Get_DevDesc>
 80076b6:	4603      	mov	r3, r0
 80076b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d103      	bne.n	80076c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076c6:	e145      	b.n	8007954 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	f040 8142 	bne.w	8007954 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076d6:	3301      	adds	r3, #1
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d903      	bls.n	80076f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	220d      	movs	r2, #13
 80076ee:	701a      	strb	r2, [r3, #0]
      break;
 80076f0:	e130      	b.n	8007954 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	795b      	ldrb	r3, [r3, #5]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 ff67 	bl	80085cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	791b      	ldrb	r3, [r3, #4]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 ff61 	bl	80085cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
      break;
 8007716:	e11d      	b.n	8007954 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007718:	2101      	movs	r1, #1
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa68 	bl	8007bf0 <USBH_SetAddress>
 8007720:	4603      	mov	r3, r0
 8007722:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d132      	bne.n	8007790 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800772a:	2002      	movs	r0, #2
 800772c:	f001 fa45 	bl	8008bba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2203      	movs	r2, #3
 800773c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	7919      	ldrb	r1, [r3, #4]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007752:	b292      	uxth	r2, r2
 8007754:	9202      	str	r2, [sp, #8]
 8007756:	2200      	movs	r2, #0
 8007758:	9201      	str	r2, [sp, #4]
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	4603      	mov	r3, r0
 800775e:	2280      	movs	r2, #128	; 0x80
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fee3 	bl	800852c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7959      	ldrb	r1, [r3, #5]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800777a:	b292      	uxth	r2, r2
 800777c:	9202      	str	r2, [sp, #8]
 800777e:	2200      	movs	r2, #0
 8007780:	9201      	str	r2, [sp, #4]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	4603      	mov	r3, r0
 8007786:	2200      	movs	r2, #0
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fecf 	bl	800852c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800778e:	e0e3      	b.n	8007958 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b03      	cmp	r3, #3
 8007794:	f040 80e0 	bne.w	8007958 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	220d      	movs	r2, #13
 800779c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	705a      	strb	r2, [r3, #1]
      break;
 80077a4:	e0d8      	b.n	8007958 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80077a6:	2109      	movs	r1, #9
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f99d 	bl	8007ae8 <USBH_Get_CfgDesc>
 80077ae:	4603      	mov	r3, r0
 80077b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d103      	bne.n	80077c0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2204      	movs	r2, #4
 80077bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077be:	e0cd      	b.n	800795c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	f040 80ca 	bne.w	800795c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ce:	3301      	adds	r3, #1
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d903      	bls.n	80077ea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	220d      	movs	r2, #13
 80077e6:	701a      	strb	r2, [r3, #0]
      break;
 80077e8:	e0b8      	b.n	800795c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	795b      	ldrb	r3, [r3, #5]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 feeb 	bl	80085cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	791b      	ldrb	r3, [r3, #4]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fee5 	bl	80085cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
      break;
 800780e:	e0a5      	b.n	800795c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f965 	bl	8007ae8 <USBH_Get_CfgDesc>
 800781e:	4603      	mov	r3, r0
 8007820:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d103      	bne.n	8007830 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2205      	movs	r2, #5
 800782c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800782e:	e097      	b.n	8007960 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007830:	7bbb      	ldrb	r3, [r7, #14]
 8007832:	2b03      	cmp	r3, #3
 8007834:	f040 8094 	bne.w	8007960 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800783e:	3301      	adds	r3, #1
 8007840:	b2da      	uxtb	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800784e:	2b03      	cmp	r3, #3
 8007850:	d903      	bls.n	800785a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	220d      	movs	r2, #13
 8007856:	701a      	strb	r2, [r3, #0]
      break;
 8007858:	e082      	b.n	8007960 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	795b      	ldrb	r3, [r3, #5]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 feb3 	bl	80085cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	791b      	ldrb	r3, [r3, #4]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fead 	bl	80085cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
      break;
 800787e:	e06f      	b.n	8007960 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007886:	2b00      	cmp	r3, #0
 8007888:	d019      	beq.n	80078be <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007896:	23ff      	movs	r3, #255	; 0xff
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f949 	bl	8007b30 <USBH_Get_StringDesc>
 800789e:	4603      	mov	r3, r0
 80078a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d103      	bne.n	80078b0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2206      	movs	r2, #6
 80078ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078ae:	e059      	b.n	8007964 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d156      	bne.n	8007964 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2206      	movs	r2, #6
 80078ba:	705a      	strb	r2, [r3, #1]
      break;
 80078bc:	e052      	b.n	8007964 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2206      	movs	r2, #6
 80078c2:	705a      	strb	r2, [r3, #1]
      break;
 80078c4:	e04e      	b.n	8007964 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d019      	beq.n	8007904 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078dc:	23ff      	movs	r3, #255	; 0xff
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f926 	bl	8007b30 <USBH_Get_StringDesc>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d103      	bne.n	80078f6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2207      	movs	r2, #7
 80078f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078f4:	e038      	b.n	8007968 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d135      	bne.n	8007968 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2207      	movs	r2, #7
 8007900:	705a      	strb	r2, [r3, #1]
      break;
 8007902:	e031      	b.n	8007968 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2207      	movs	r2, #7
 8007908:	705a      	strb	r2, [r3, #1]
      break;
 800790a:	e02d      	b.n	8007968 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007912:	2b00      	cmp	r3, #0
 8007914:	d017      	beq.n	8007946 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007922:	23ff      	movs	r3, #255	; 0xff
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f903 	bl	8007b30 <USBH_Get_StringDesc>
 800792a:	4603      	mov	r3, r0
 800792c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d102      	bne.n	800793a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007938:	e018      	b.n	800796c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b03      	cmp	r3, #3
 800793e:	d115      	bne.n	800796c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007940:	2300      	movs	r3, #0
 8007942:	73fb      	strb	r3, [r7, #15]
      break;
 8007944:	e012      	b.n	800796c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
      break;
 800794a:	e00f      	b.n	800796c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800794c:	bf00      	nop
 800794e:	e00e      	b.n	800796e <USBH_HandleEnum+0x3be>
      break;
 8007950:	bf00      	nop
 8007952:	e00c      	b.n	800796e <USBH_HandleEnum+0x3be>
      break;
 8007954:	bf00      	nop
 8007956:	e00a      	b.n	800796e <USBH_HandleEnum+0x3be>
      break;
 8007958:	bf00      	nop
 800795a:	e008      	b.n	800796e <USBH_HandleEnum+0x3be>
      break;
 800795c:	bf00      	nop
 800795e:	e006      	b.n	800796e <USBH_HandleEnum+0x3be>
      break;
 8007960:	bf00      	nop
 8007962:	e004      	b.n	800796e <USBH_HandleEnum+0x3be>
      break;
 8007964:	bf00      	nop
 8007966:	e002      	b.n	800796e <USBH_HandleEnum+0x3be>
      break;
 8007968:	bf00      	nop
 800796a:	e000      	b.n	800796e <USBH_HandleEnum+0x3be>
      break;
 800796c:	bf00      	nop
  }
  return Status;
 800796e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800798a:	bf00      	nop
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f804 	bl	80079ba <USBH_HandleSof>
}
 80079b2:	bf00      	nop
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b082      	sub	sp, #8
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b0b      	cmp	r3, #11
 80079ca:	d10a      	bne.n	80079e2 <USBH_HandleSof+0x28>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
  }
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80079fa:	bf00      	nop
}
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007a16:	bf00      	nop
}
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 ff58 	bl	8008926 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	791b      	ldrb	r3, [r3, #4]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fda5 	bl	80085cc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	795b      	ldrb	r3, [r3, #5]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fd9f 	bl	80085cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af02      	add	r7, sp, #8
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f864 	bl	8007b86 <USBH_GetDescriptor>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	73fb      	strb	r3, [r7, #15]
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	b292      	uxth	r2, r2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	f000 f918 	bl	8007d0e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	331c      	adds	r3, #28
 8007af8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007afa:	887b      	ldrh	r3, [r7, #2]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b04:	2100      	movs	r1, #0
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f83d 	bl	8007b86 <USBH_GetDescriptor>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	72fb      	strb	r3, [r7, #11]
 8007b10:	7afb      	ldrb	r3, [r7, #11]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d107      	bne.n	8007b26 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b1c:	887a      	ldrh	r2, [r7, #2]
 8007b1e:	68f9      	ldr	r1, [r7, #12]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 f964 	bl	8007dee <USBH_ParseCfgDesc>
  }

  return status;
 8007b26:	7afb      	ldrb	r3, [r7, #11]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	607a      	str	r2, [r7, #4]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	72fb      	strb	r3, [r7, #11]
 8007b40:	4613      	mov	r3, r2
 8007b42:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007b44:	7afb      	ldrb	r3, [r7, #11]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b4c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007b54:	893b      	ldrh	r3, [r7, #8]
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f812 	bl	8007b86 <USBH_GetDescriptor>
 8007b62:	4603      	mov	r3, r0
 8007b64:	75fb      	strb	r3, [r7, #23]
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d107      	bne.n	8007b7c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b72:	893a      	ldrh	r2, [r7, #8]
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fa37 	bl	8007fea <USBH_ParseStringDesc>
  }

  return status;
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60f8      	str	r0, [r7, #12]
 8007b8e:	607b      	str	r3, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	72fb      	strb	r3, [r7, #11]
 8007b94:	4613      	mov	r3, r2
 8007b96:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	789b      	ldrb	r3, [r3, #2]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d11c      	bne.n	8007bda <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2206      	movs	r2, #6
 8007bb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	893a      	ldrh	r2, [r7, #8]
 8007bb6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007bb8:	893b      	ldrh	r3, [r7, #8]
 8007bba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bc2:	d104      	bne.n	8007bce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f240 4209 	movw	r2, #1033	; 0x409
 8007bca:	829a      	strh	r2, [r3, #20]
 8007bcc:	e002      	b.n	8007bd4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8b3a      	ldrh	r2, [r7, #24]
 8007bd8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007bda:	8b3b      	ldrh	r3, [r7, #24]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 fa50 	bl	8008086 <USBH_CtlReq>
 8007be6:	4603      	mov	r3, r0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	789b      	ldrb	r3, [r3, #2]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d10f      	bne.n	8007c24 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2205      	movs	r2, #5
 8007c0e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c24:	2200      	movs	r2, #0
 8007c26:	2100      	movs	r1, #0
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa2c 	bl	8008086 <USBH_CtlReq>
 8007c2e:	4603      	mov	r3, r0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	789b      	ldrb	r3, [r3, #2]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d10e      	bne.n	8007c6a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2209      	movs	r2, #9
 8007c56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	887a      	ldrh	r2, [r7, #2]
 8007c5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa09 	bl	8008086 <USBH_CtlReq>
 8007c74:	4603      	mov	r3, r0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	789b      	ldrb	r3, [r3, #2]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d10f      	bne.n	8007cb2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c9e:	78fb      	ldrb	r3, [r7, #3]
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f9e5 	bl	8008086 <USBH_CtlReq>
 8007cbc:	4603      	mov	r3, r0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	789b      	ldrb	r3, [r3, #2]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d10f      	bne.n	8007cfa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2202      	movs	r2, #2
 8007cde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f9c1 	bl	8008086 <USBH_CtlReq>
 8007d04:	4603      	mov	r3, r0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	781a      	ldrb	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	785a      	ldrb	r2, [r3, #1]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	3302      	adds	r3, #2
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	3303      	adds	r3, #3
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	021b      	lsls	r3, r3, #8
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	4313      	orrs	r3, r2
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	791a      	ldrb	r2, [r3, #4]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	795a      	ldrb	r2, [r3, #5]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	799a      	ldrb	r2, [r3, #6]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	79da      	ldrb	r2, [r3, #7]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007d68:	88fb      	ldrh	r3, [r7, #6]
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d939      	bls.n	8007de2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	3308      	adds	r3, #8
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	3309      	adds	r3, #9
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	4313      	orrs	r3, r2
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	330a      	adds	r3, #10
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	330b      	adds	r3, #11
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	021b      	lsls	r3, r3, #8
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	330c      	adds	r3, #12
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	330d      	adds	r3, #13
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	7b9a      	ldrb	r2, [r3, #14]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	7bda      	ldrb	r2, [r3, #15]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	7c1a      	ldrb	r2, [r3, #16]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	7c5a      	ldrb	r2, [r3, #17]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	745a      	strb	r2, [r3, #17]
  }
}
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b08a      	sub	sp, #40	; 0x28
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	781a      	ldrb	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	785a      	ldrb	r2, [r3, #1]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	3302      	adds	r3, #2
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	3303      	adds	r3, #3
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	021b      	lsls	r3, r3, #8
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	4313      	orrs	r3, r2
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	791a      	ldrb	r2, [r3, #4]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	795a      	ldrb	r2, [r3, #5]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	799a      	ldrb	r2, [r3, #6]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	79da      	ldrb	r2, [r3, #7]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	7a1a      	ldrb	r2, [r3, #8]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e64:	88fb      	ldrh	r3, [r7, #6]
 8007e66:	2b09      	cmp	r3, #9
 8007e68:	d95f      	bls.n	8007f2a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e6a:	2309      	movs	r3, #9
 8007e6c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e72:	e051      	b.n	8007f18 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e74:	f107 0316 	add.w	r3, r7, #22
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e7c:	f000 f8e8 	bl	8008050 <USBH_GetNextDesc>
 8007e80:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d146      	bne.n	8007f18 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e8e:	221a      	movs	r2, #26
 8007e90:	fb02 f303 	mul.w	r3, r2, r3
 8007e94:	3308      	adds	r3, #8
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4413      	add	r3, r2
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ea0:	69f8      	ldr	r0, [r7, #28]
 8007ea2:	f000 f846 	bl	8007f32 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007eb0:	e022      	b.n	8007ef8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007eb2:	f107 0316 	add.w	r3, r7, #22
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007eba:	f000 f8c9 	bl	8008050 <USBH_GetNextDesc>
 8007ebe:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	785b      	ldrb	r3, [r3, #1]
 8007ec4:	2b05      	cmp	r3, #5
 8007ec6:	d117      	bne.n	8007ef8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ecc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007ed0:	3201      	adds	r2, #1
 8007ed2:	00d2      	lsls	r2, r2, #3
 8007ed4:	211a      	movs	r1, #26
 8007ed6:	fb01 f303 	mul.w	r3, r1, r3
 8007eda:	4413      	add	r3, r2
 8007edc:	3308      	adds	r3, #8
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ee8:	69b8      	ldr	r0, [r7, #24]
 8007eea:	f000 f851 	bl	8007f90 <USBH_ParseEPDesc>
            ep_ix++;
 8007eee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	791b      	ldrb	r3, [r3, #4]
 8007efc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d204      	bcs.n	8007f0e <USBH_ParseCfgDesc+0x120>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	885a      	ldrh	r2, [r3, #2]
 8007f08:	8afb      	ldrh	r3, [r7, #22]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d8d1      	bhi.n	8007eb2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007f0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f12:	3301      	adds	r3, #1
 8007f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d804      	bhi.n	8007f2a <USBH_ParseCfgDesc+0x13c>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	885a      	ldrh	r2, [r3, #2]
 8007f24:	8afb      	ldrh	r3, [r7, #22]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d8a4      	bhi.n	8007e74 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007f2a:	bf00      	nop
 8007f2c:	3728      	adds	r7, #40	; 0x28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	781a      	ldrb	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	785a      	ldrb	r2, [r3, #1]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	789a      	ldrb	r2, [r3, #2]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	78da      	ldrb	r2, [r3, #3]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	791a      	ldrb	r2, [r3, #4]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	795a      	ldrb	r2, [r3, #5]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	799a      	ldrb	r2, [r3, #6]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	79da      	ldrb	r2, [r3, #7]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	7a1a      	ldrb	r2, [r3, #8]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	721a      	strb	r2, [r3, #8]
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	781a      	ldrb	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	785a      	ldrb	r2, [r3, #1]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	789a      	ldrb	r2, [r3, #2]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	78da      	ldrb	r2, [r3, #3]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	3305      	adds	r3, #5
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	021b      	lsls	r3, r3, #8
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	799a      	ldrb	r2, [r3, #6]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	719a      	strb	r2, [r3, #6]
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b087      	sub	sp, #28
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d120      	bne.n	8008044 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	1e9a      	subs	r2, r3, #2
 8008008:	88fb      	ldrh	r3, [r7, #6]
 800800a:	4293      	cmp	r3, r2
 800800c:	bf28      	it	cs
 800800e:	4613      	movcs	r3, r2
 8008010:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3302      	adds	r3, #2
 8008016:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008018:	2300      	movs	r3, #0
 800801a:	82fb      	strh	r3, [r7, #22]
 800801c:	e00b      	b.n	8008036 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800801e:	8afb      	ldrh	r3, [r7, #22]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	781a      	ldrb	r2, [r3, #0]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	701a      	strb	r2, [r3, #0]
      pdest++;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	3301      	adds	r3, #1
 800802e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008030:	8afb      	ldrh	r3, [r7, #22]
 8008032:	3302      	adds	r3, #2
 8008034:	82fb      	strh	r3, [r7, #22]
 8008036:	8afa      	ldrh	r2, [r7, #22]
 8008038:	8abb      	ldrh	r3, [r7, #20]
 800803a:	429a      	cmp	r2, r3
 800803c:	d3ef      	bcc.n	800801e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2200      	movs	r2, #0
 8008042:	701a      	strb	r2, [r3, #0]
  }
}
 8008044:	bf00      	nop
 8008046:	371c      	adds	r7, #28
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	881a      	ldrh	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b29b      	uxth	r3, r3
 8008064:	4413      	add	r3, r2
 8008066:	b29a      	uxth	r2, r3
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4413      	add	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008078:	68fb      	ldr	r3, [r7, #12]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b086      	sub	sp, #24
 800808a:	af00      	add	r7, sp, #0
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	4613      	mov	r3, r2
 8008092:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008094:	2301      	movs	r3, #1
 8008096:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	789b      	ldrb	r3, [r3, #2]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d002      	beq.n	80080a6 <USBH_CtlReq+0x20>
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d00f      	beq.n	80080c4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80080a4:	e027      	b.n	80080f6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	88fa      	ldrh	r2, [r7, #6]
 80080b0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2201      	movs	r2, #1
 80080b6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2202      	movs	r2, #2
 80080bc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80080be:	2301      	movs	r3, #1
 80080c0:	75fb      	strb	r3, [r7, #23]
      break;
 80080c2:	e018      	b.n	80080f6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 f81b 	bl	8008100 <USBH_HandleControl>
 80080ca:	4603      	mov	r3, r0
 80080cc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <USBH_CtlReq+0x54>
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d106      	bne.n	80080e8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	761a      	strb	r2, [r3, #24]
      break;
 80080e6:	e005      	b.n	80080f4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d102      	bne.n	80080f4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	709a      	strb	r2, [r3, #2]
      break;
 80080f4:	bf00      	nop
  }
  return status;
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af02      	add	r7, sp, #8
 8008106:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008108:	2301      	movs	r3, #1
 800810a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800810c:	2300      	movs	r3, #0
 800810e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	7e1b      	ldrb	r3, [r3, #24]
 8008114:	3b01      	subs	r3, #1
 8008116:	2b0a      	cmp	r3, #10
 8008118:	f200 8158 	bhi.w	80083cc <USBH_HandleControl+0x2cc>
 800811c:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <USBH_HandleControl+0x24>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	08008151 	.word	0x08008151
 8008128:	0800816b 	.word	0x0800816b
 800812c:	080081d5 	.word	0x080081d5
 8008130:	080081fb 	.word	0x080081fb
 8008134:	08008233 	.word	0x08008233
 8008138:	0800825f 	.word	0x0800825f
 800813c:	080082b1 	.word	0x080082b1
 8008140:	080082d3 	.word	0x080082d3
 8008144:	0800830f 	.word	0x0800830f
 8008148:	08008337 	.word	0x08008337
 800814c:	08008375 	.word	0x08008375
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f103 0110 	add.w	r1, r3, #16
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	795b      	ldrb	r3, [r3, #5]
 800815a:	461a      	mov	r2, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f945 	bl	80083ec <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2202      	movs	r2, #2
 8008166:	761a      	strb	r2, [r3, #24]
      break;
 8008168:	e13b      	b.n	80083e2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	795b      	ldrb	r3, [r3, #5]
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fcc5 	bl	8008b00 <USBH_LL_GetURBState>
 8008176:	4603      	mov	r3, r0
 8008178:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d11e      	bne.n	80081be <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	7c1b      	ldrb	r3, [r3, #16]
 8008184:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008188:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	8adb      	ldrh	r3, [r3, #22]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008192:	7b7b      	ldrb	r3, [r7, #13]
 8008194:	2b80      	cmp	r3, #128	; 0x80
 8008196:	d103      	bne.n	80081a0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2203      	movs	r2, #3
 800819c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800819e:	e117      	b.n	80083d0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2205      	movs	r2, #5
 80081a4:	761a      	strb	r2, [r3, #24]
      break;
 80081a6:	e113      	b.n	80083d0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80081a8:	7b7b      	ldrb	r3, [r7, #13]
 80081aa:	2b80      	cmp	r3, #128	; 0x80
 80081ac:	d103      	bne.n	80081b6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2209      	movs	r2, #9
 80081b2:	761a      	strb	r2, [r3, #24]
      break;
 80081b4:	e10c      	b.n	80083d0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2207      	movs	r2, #7
 80081ba:	761a      	strb	r2, [r3, #24]
      break;
 80081bc:	e108      	b.n	80083d0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d003      	beq.n	80081cc <USBH_HandleControl+0xcc>
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	f040 8102 	bne.w	80083d0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	220b      	movs	r2, #11
 80081d0:	761a      	strb	r2, [r3, #24]
      break;
 80081d2:	e0fd      	b.n	80083d0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081da:	b29a      	uxth	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6899      	ldr	r1, [r3, #8]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	899a      	ldrh	r2, [r3, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	791b      	ldrb	r3, [r3, #4]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f93c 	bl	800846a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2204      	movs	r2, #4
 80081f6:	761a      	strb	r2, [r3, #24]
      break;
 80081f8:	e0f3      	b.n	80083e2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	791b      	ldrb	r3, [r3, #4]
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fc7d 	bl	8008b00 <USBH_LL_GetURBState>
 8008206:	4603      	mov	r3, r0
 8008208:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d102      	bne.n	8008216 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2209      	movs	r2, #9
 8008214:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008216:	7bbb      	ldrb	r3, [r7, #14]
 8008218:	2b05      	cmp	r3, #5
 800821a:	d102      	bne.n	8008222 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800821c:	2303      	movs	r3, #3
 800821e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008220:	e0d8      	b.n	80083d4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	2b04      	cmp	r3, #4
 8008226:	f040 80d5 	bne.w	80083d4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	220b      	movs	r2, #11
 800822e:	761a      	strb	r2, [r3, #24]
      break;
 8008230:	e0d0      	b.n	80083d4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6899      	ldr	r1, [r3, #8]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	899a      	ldrh	r2, [r3, #12]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	7958      	ldrb	r0, [r3, #5]
 800823e:	2301      	movs	r3, #1
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	4603      	mov	r3, r0
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f8eb 	bl	8008420 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008250:	b29a      	uxth	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2206      	movs	r2, #6
 800825a:	761a      	strb	r2, [r3, #24]
      break;
 800825c:	e0c1      	b.n	80083e2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	795b      	ldrb	r3, [r3, #5]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fc4b 	bl	8008b00 <USBH_LL_GetURBState>
 800826a:	4603      	mov	r3, r0
 800826c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d103      	bne.n	800827c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2207      	movs	r2, #7
 8008278:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800827a:	e0ad      	b.n	80083d8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800827c:	7bbb      	ldrb	r3, [r7, #14]
 800827e:	2b05      	cmp	r3, #5
 8008280:	d105      	bne.n	800828e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	220c      	movs	r2, #12
 8008286:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008288:	2303      	movs	r3, #3
 800828a:	73fb      	strb	r3, [r7, #15]
      break;
 800828c:	e0a4      	b.n	80083d8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d103      	bne.n	800829c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2205      	movs	r2, #5
 8008298:	761a      	strb	r2, [r3, #24]
      break;
 800829a:	e09d      	b.n	80083d8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b04      	cmp	r3, #4
 80082a0:	f040 809a 	bne.w	80083d8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	220b      	movs	r2, #11
 80082a8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80082aa:	2302      	movs	r3, #2
 80082ac:	73fb      	strb	r3, [r7, #15]
      break;
 80082ae:	e093      	b.n	80083d8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	791b      	ldrb	r3, [r3, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	2100      	movs	r1, #0
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f8d6 	bl	800846a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2208      	movs	r2, #8
 80082ce:	761a      	strb	r2, [r3, #24]

      break;
 80082d0:	e087      	b.n	80083e2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	791b      	ldrb	r3, [r3, #4]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fc11 	bl	8008b00 <USBH_LL_GetURBState>
 80082de:	4603      	mov	r3, r0
 80082e0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d105      	bne.n	80082f4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	220d      	movs	r2, #13
 80082ec:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082f2:	e073      	b.n	80083dc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d103      	bne.n	8008302 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	220b      	movs	r2, #11
 80082fe:	761a      	strb	r2, [r3, #24]
      break;
 8008300:	e06c      	b.n	80083dc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b05      	cmp	r3, #5
 8008306:	d169      	bne.n	80083dc <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008308:	2303      	movs	r3, #3
 800830a:	73fb      	strb	r3, [r7, #15]
      break;
 800830c:	e066      	b.n	80083dc <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	795a      	ldrb	r2, [r3, #5]
 8008312:	2301      	movs	r3, #1
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	4613      	mov	r3, r2
 8008318:	2200      	movs	r2, #0
 800831a:	2100      	movs	r1, #0
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f87f 	bl	8008420 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008328:	b29a      	uxth	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	220a      	movs	r2, #10
 8008332:	761a      	strb	r2, [r3, #24]
      break;
 8008334:	e055      	b.n	80083e2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	795b      	ldrb	r3, [r3, #5]
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fbdf 	bl	8008b00 <USBH_LL_GetURBState>
 8008342:	4603      	mov	r3, r0
 8008344:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d105      	bne.n	8008358 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	220d      	movs	r2, #13
 8008354:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008356:	e043      	b.n	80083e0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d103      	bne.n	8008366 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2209      	movs	r2, #9
 8008362:	761a      	strb	r2, [r3, #24]
      break;
 8008364:	e03c      	b.n	80083e0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b04      	cmp	r3, #4
 800836a:	d139      	bne.n	80083e0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	220b      	movs	r2, #11
 8008370:	761a      	strb	r2, [r3, #24]
      break;
 8008372:	e035      	b.n	80083e0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7e5b      	ldrb	r3, [r3, #25]
 8008378:	3301      	adds	r3, #1
 800837a:	b2da      	uxtb	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	765a      	strb	r2, [r3, #25]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	7e5b      	ldrb	r3, [r3, #25]
 8008384:	2b02      	cmp	r3, #2
 8008386:	d806      	bhi.n	8008396 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008394:	e025      	b.n	80083e2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800839c:	2106      	movs	r1, #6
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	795b      	ldrb	r3, [r3, #5]
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f90c 	bl	80085cc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	791b      	ldrb	r3, [r3, #4]
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f906 	bl	80085cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80083c6:	2302      	movs	r3, #2
 80083c8:	73fb      	strb	r3, [r7, #15]
      break;
 80083ca:	e00a      	b.n	80083e2 <USBH_HandleControl+0x2e2>

    default:
      break;
 80083cc:	bf00      	nop
 80083ce:	e008      	b.n	80083e2 <USBH_HandleControl+0x2e2>
      break;
 80083d0:	bf00      	nop
 80083d2:	e006      	b.n	80083e2 <USBH_HandleControl+0x2e2>
      break;
 80083d4:	bf00      	nop
 80083d6:	e004      	b.n	80083e2 <USBH_HandleControl+0x2e2>
      break;
 80083d8:	bf00      	nop
 80083da:	e002      	b.n	80083e2 <USBH_HandleControl+0x2e2>
      break;
 80083dc:	bf00      	nop
 80083de:	e000      	b.n	80083e2 <USBH_HandleControl+0x2e2>
      break;
 80083e0:	bf00      	nop
  }

  return status;
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af04      	add	r7, sp, #16
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	4613      	mov	r3, r2
 80083f8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80083fa:	79f9      	ldrb	r1, [r7, #7]
 80083fc:	2300      	movs	r3, #0
 80083fe:	9303      	str	r3, [sp, #12]
 8008400:	2308      	movs	r3, #8
 8008402:	9302      	str	r3, [sp, #8]
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	2300      	movs	r3, #0
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	2300      	movs	r3, #0
 800840e:	2200      	movs	r2, #0
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 fb44 	bl	8008a9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b088      	sub	sp, #32
 8008424:	af04      	add	r7, sp, #16
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	4611      	mov	r1, r2
 800842c:	461a      	mov	r2, r3
 800842e:	460b      	mov	r3, r1
 8008430:	80fb      	strh	r3, [r7, #6]
 8008432:	4613      	mov	r3, r2
 8008434:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008444:	7979      	ldrb	r1, [r7, #5]
 8008446:	7e3b      	ldrb	r3, [r7, #24]
 8008448:	9303      	str	r3, [sp, #12]
 800844a:	88fb      	ldrh	r3, [r7, #6]
 800844c:	9302      	str	r3, [sp, #8]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	9301      	str	r3, [sp, #4]
 8008452:	2301      	movs	r3, #1
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	2300      	movs	r3, #0
 8008458:	2200      	movs	r2, #0
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 fb1f 	bl	8008a9e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b088      	sub	sp, #32
 800846e:	af04      	add	r7, sp, #16
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	4611      	mov	r1, r2
 8008476:	461a      	mov	r2, r3
 8008478:	460b      	mov	r3, r1
 800847a:	80fb      	strh	r3, [r7, #6]
 800847c:	4613      	mov	r3, r2
 800847e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008480:	7979      	ldrb	r1, [r7, #5]
 8008482:	2300      	movs	r3, #0
 8008484:	9303      	str	r3, [sp, #12]
 8008486:	88fb      	ldrh	r3, [r7, #6]
 8008488:	9302      	str	r3, [sp, #8]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	2301      	movs	r3, #1
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	2300      	movs	r3, #0
 8008494:	2201      	movs	r2, #1
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 fb01 	bl	8008a9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800849c:	2300      	movs	r3, #0

}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b088      	sub	sp, #32
 80084aa:	af04      	add	r7, sp, #16
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	4611      	mov	r1, r2
 80084b2:	461a      	mov	r2, r3
 80084b4:	460b      	mov	r3, r1
 80084b6:	80fb      	strh	r3, [r7, #6]
 80084b8:	4613      	mov	r3, r2
 80084ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084ca:	7979      	ldrb	r1, [r7, #5]
 80084cc:	7e3b      	ldrb	r3, [r7, #24]
 80084ce:	9303      	str	r3, [sp, #12]
 80084d0:	88fb      	ldrh	r3, [r7, #6]
 80084d2:	9302      	str	r3, [sp, #8]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	9301      	str	r3, [sp, #4]
 80084d8:	2301      	movs	r3, #1
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	2302      	movs	r3, #2
 80084de:	2200      	movs	r2, #0
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 fadc 	bl	8008a9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af04      	add	r7, sp, #16
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	4611      	mov	r1, r2
 80084fc:	461a      	mov	r2, r3
 80084fe:	460b      	mov	r3, r1
 8008500:	80fb      	strh	r3, [r7, #6]
 8008502:	4613      	mov	r3, r2
 8008504:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008506:	7979      	ldrb	r1, [r7, #5]
 8008508:	2300      	movs	r3, #0
 800850a:	9303      	str	r3, [sp, #12]
 800850c:	88fb      	ldrh	r3, [r7, #6]
 800850e:	9302      	str	r3, [sp, #8]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	2301      	movs	r3, #1
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	2302      	movs	r3, #2
 800851a:	2201      	movs	r2, #1
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 fabe 	bl	8008a9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af04      	add	r7, sp, #16
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	4608      	mov	r0, r1
 8008536:	4611      	mov	r1, r2
 8008538:	461a      	mov	r2, r3
 800853a:	4603      	mov	r3, r0
 800853c:	70fb      	strb	r3, [r7, #3]
 800853e:	460b      	mov	r3, r1
 8008540:	70bb      	strb	r3, [r7, #2]
 8008542:	4613      	mov	r3, r2
 8008544:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008546:	7878      	ldrb	r0, [r7, #1]
 8008548:	78ba      	ldrb	r2, [r7, #2]
 800854a:	78f9      	ldrb	r1, [r7, #3]
 800854c:	8b3b      	ldrh	r3, [r7, #24]
 800854e:	9302      	str	r3, [sp, #8]
 8008550:	7d3b      	ldrb	r3, [r7, #20]
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	7c3b      	ldrb	r3, [r7, #16]
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	4603      	mov	r3, r0
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa51 	bl	8008a02 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	460b      	mov	r3, r1
 8008574:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fa70 	bl	8008a60 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	460b      	mov	r3, r1
 8008594:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f836 	bl	8008608 <USBH_GetFreePipe>
 800859c:	4603      	mov	r3, r0
 800859e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80085a0:	89fb      	ldrh	r3, [r7, #14]
 80085a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00a      	beq.n	80085c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80085aa:	78fa      	ldrb	r2, [r7, #3]
 80085ac:	89fb      	ldrh	r3, [r7, #14]
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	33e0      	adds	r3, #224	; 0xe0
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	440b      	add	r3, r1
 80085be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80085c0:	89fb      	ldrh	r3, [r7, #14]
 80085c2:	b2db      	uxtb	r3, r3
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	2b0a      	cmp	r3, #10
 80085dc:	d80d      	bhi.n	80085fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	33e0      	adds	r3, #224	; 0xe0
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	78fb      	ldrb	r3, [r7, #3]
 80085ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	33e0      	adds	r3, #224	; 0xe0
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	440b      	add	r3, r1
 80085f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008614:	2300      	movs	r3, #0
 8008616:	73fb      	strb	r3, [r7, #15]
 8008618:	e00f      	b.n	800863a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	33e0      	adds	r3, #224	; 0xe0
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d102      	bne.n	8008634 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	b29b      	uxth	r3, r3
 8008632:	e007      	b.n	8008644 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	3301      	adds	r3, #1
 8008638:	73fb      	strb	r3, [r7, #15]
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	2b0a      	cmp	r3, #10
 800863e:	d9ec      	bls.n	800861a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008640:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008644:	4618      	mov	r0, r3
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008654:	2201      	movs	r2, #1
 8008656:	490e      	ldr	r1, [pc, #56]	; (8008690 <MX_USB_HOST_Init+0x40>)
 8008658:	480e      	ldr	r0, [pc, #56]	; (8008694 <MX_USB_HOST_Init+0x44>)
 800865a:	f7fe fc9f 	bl	8006f9c <USBH_Init>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008664:	f7f8 fb9a 	bl	8000d9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008668:	490b      	ldr	r1, [pc, #44]	; (8008698 <MX_USB_HOST_Init+0x48>)
 800866a:	480a      	ldr	r0, [pc, #40]	; (8008694 <MX_USB_HOST_Init+0x44>)
 800866c:	f7fe fd24 	bl	80070b8 <USBH_RegisterClass>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008676:	f7f8 fb91 	bl	8000d9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800867a:	4806      	ldr	r0, [pc, #24]	; (8008694 <MX_USB_HOST_Init+0x44>)
 800867c:	f7fe fda8 	bl	80071d0 <USBH_Start>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008686:	f7f8 fb89 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800868a:	bf00      	nop
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	080086b1 	.word	0x080086b1
 8008694:	20000210 	.word	0x20000210
 8008698:	2000000c 	.word	0x2000000c

0800869c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80086a0:	4802      	ldr	r0, [pc, #8]	; (80086ac <MX_USB_HOST_Process+0x10>)
 80086a2:	f7fe fda5 	bl	80071f0 <USBH_Process>
}
 80086a6:	bf00      	nop
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000210 	.word	0x20000210

080086b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	3b01      	subs	r3, #1
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d819      	bhi.n	80086f8 <USBH_UserProcess+0x48>
 80086c4:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <USBH_UserProcess+0x1c>)
 80086c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	080086f9 	.word	0x080086f9
 80086d0:	080086e9 	.word	0x080086e9
 80086d4:	080086f9 	.word	0x080086f9
 80086d8:	080086f1 	.word	0x080086f1
 80086dc:	080086e1 	.word	0x080086e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80086e0:	4b09      	ldr	r3, [pc, #36]	; (8008708 <USBH_UserProcess+0x58>)
 80086e2:	2203      	movs	r2, #3
 80086e4:	701a      	strb	r2, [r3, #0]
  break;
 80086e6:	e008      	b.n	80086fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80086e8:	4b07      	ldr	r3, [pc, #28]	; (8008708 <USBH_UserProcess+0x58>)
 80086ea:	2202      	movs	r2, #2
 80086ec:	701a      	strb	r2, [r3, #0]
  break;
 80086ee:	e004      	b.n	80086fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80086f0:	4b05      	ldr	r3, [pc, #20]	; (8008708 <USBH_UserProcess+0x58>)
 80086f2:	2201      	movs	r2, #1
 80086f4:	701a      	strb	r2, [r3, #0]
  break;
 80086f6:	e000      	b.n	80086fa <USBH_UserProcess+0x4a>

  default:
  break;
 80086f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80086fa:	bf00      	nop
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	200000c0 	.word	0x200000c0

0800870c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008714:	f107 0314 	add.w	r3, r7, #20
 8008718:	2200      	movs	r2, #0
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	605a      	str	r2, [r3, #4]
 800871e:	609a      	str	r2, [r3, #8]
 8008720:	60da      	str	r2, [r3, #12]
 8008722:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800872c:	d147      	bne.n	80087be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800872e:	2300      	movs	r3, #0
 8008730:	613b      	str	r3, [r7, #16]
 8008732:	4b25      	ldr	r3, [pc, #148]	; (80087c8 <HAL_HCD_MspInit+0xbc>)
 8008734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008736:	4a24      	ldr	r2, [pc, #144]	; (80087c8 <HAL_HCD_MspInit+0xbc>)
 8008738:	f043 0301 	orr.w	r3, r3, #1
 800873c:	6313      	str	r3, [r2, #48]	; 0x30
 800873e:	4b22      	ldr	r3, [pc, #136]	; (80087c8 <HAL_HCD_MspInit+0xbc>)
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	613b      	str	r3, [r7, #16]
 8008748:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800874a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800874e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008750:	2300      	movs	r3, #0
 8008752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008754:	2300      	movs	r3, #0
 8008756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008758:	f107 0314 	add.w	r3, r7, #20
 800875c:	4619      	mov	r1, r3
 800875e:	481b      	ldr	r0, [pc, #108]	; (80087cc <HAL_HCD_MspInit+0xc0>)
 8008760:	f7f9 fa8e 	bl	8001c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008764:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800876a:	2302      	movs	r3, #2
 800876c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800876e:	2300      	movs	r3, #0
 8008770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008772:	2300      	movs	r3, #0
 8008774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008776:	230a      	movs	r3, #10
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800877a:	f107 0314 	add.w	r3, r7, #20
 800877e:	4619      	mov	r1, r3
 8008780:	4812      	ldr	r0, [pc, #72]	; (80087cc <HAL_HCD_MspInit+0xc0>)
 8008782:	f7f9 fa7d 	bl	8001c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008786:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <HAL_HCD_MspInit+0xbc>)
 8008788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878a:	4a0f      	ldr	r2, [pc, #60]	; (80087c8 <HAL_HCD_MspInit+0xbc>)
 800878c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008790:	6353      	str	r3, [r2, #52]	; 0x34
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <HAL_HCD_MspInit+0xbc>)
 8008798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879a:	4a0b      	ldr	r2, [pc, #44]	; (80087c8 <HAL_HCD_MspInit+0xbc>)
 800879c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087a0:	6453      	str	r3, [r2, #68]	; 0x44
 80087a2:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <HAL_HCD_MspInit+0xbc>)
 80087a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087ae:	2200      	movs	r2, #0
 80087b0:	2100      	movs	r1, #0
 80087b2:	2043      	movs	r0, #67	; 0x43
 80087b4:	f7f9 fa2d 	bl	8001c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087b8:	2043      	movs	r0, #67	; 0x43
 80087ba:	f7f9 fa46 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087be:	bf00      	nop
 80087c0:	3728      	adds	r7, #40	; 0x28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	40023800 	.word	0x40023800
 80087cc:	40020000 	.word	0x40020000

080087d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087de:	4618      	mov	r0, r3
 80087e0:	f7ff f8d9 	bl	8007996 <USBH_LL_IncTimer>
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff f911 	bl	8007a22 <USBH_LL_Connect>
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff f91a 	bl	8007a50 <USBH_LL_Disconnect>
}
 800881c:	bf00      	nop
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	70fb      	strb	r3, [r7, #3]
 8008830:	4613      	mov	r3, r2
 8008832:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff f8cb 	bl	80079ea <USBH_LL_PortEnabled>
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff f8cb 	bl	8007a06 <USBH_LL_PortDisabled>
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008886:	2b01      	cmp	r3, #1
 8008888:	d12a      	bne.n	80088e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800888a:	4a18      	ldr	r2, [pc, #96]	; (80088ec <USBH_LL_Init+0x74>)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a15      	ldr	r2, [pc, #84]	; (80088ec <USBH_LL_Init+0x74>)
 8008896:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800889a:	4b14      	ldr	r3, [pc, #80]	; (80088ec <USBH_LL_Init+0x74>)
 800889c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80088a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80088a2:	4b12      	ldr	r3, [pc, #72]	; (80088ec <USBH_LL_Init+0x74>)
 80088a4:	2208      	movs	r2, #8
 80088a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80088a8:	4b10      	ldr	r3, [pc, #64]	; (80088ec <USBH_LL_Init+0x74>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088ae:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <USBH_LL_Init+0x74>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80088b4:	4b0d      	ldr	r3, [pc, #52]	; (80088ec <USBH_LL_Init+0x74>)
 80088b6:	2202      	movs	r2, #2
 80088b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80088ba:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <USBH_LL_Init+0x74>)
 80088bc:	2200      	movs	r2, #0
 80088be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80088c0:	480a      	ldr	r0, [pc, #40]	; (80088ec <USBH_LL_Init+0x74>)
 80088c2:	f7f9 fb90 	bl	8001fe6 <HAL_HCD_Init>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80088cc:	f7f8 fa66 	bl	8000d9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80088d0:	4806      	ldr	r0, [pc, #24]	; (80088ec <USBH_LL_Init+0x74>)
 80088d2:	f7f9 ff93 	bl	80027fc <HAL_HCD_GetCurrentFrame>
 80088d6:	4603      	mov	r3, r0
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff f84c 	bl	8007978 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	200005e8 	.word	0x200005e8

080088f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008906:	4618      	mov	r0, r3
 8008908:	f7f9 ff00 	bl	800270c <HAL_HCD_Start>
 800890c:	4603      	mov	r3, r0
 800890e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	4618      	mov	r0, r3
 8008914:	f000 f95c 	bl	8008bd0 <USBH_Get_USB_Status>
 8008918:	4603      	mov	r3, r0
 800891a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800891c:	7bbb      	ldrb	r3, [r7, #14]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b084      	sub	sp, #16
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800893c:	4618      	mov	r0, r3
 800893e:	f7f9 ff08 	bl	8002752 <HAL_HCD_Stop>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 f941 	bl	8008bd0 <USBH_Get_USB_Status>
 800894e:	4603      	mov	r3, r0
 8008950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008952:	7bbb      	ldrb	r3, [r7, #14]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008964:	2301      	movs	r3, #1
 8008966:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800896e:	4618      	mov	r0, r3
 8008970:	f7f9 ff52 	bl	8002818 <HAL_HCD_GetCurrentSpeed>
 8008974:	4603      	mov	r3, r0
 8008976:	2b01      	cmp	r3, #1
 8008978:	d007      	beq.n	800898a <USBH_LL_GetSpeed+0x2e>
 800897a:	2b01      	cmp	r3, #1
 800897c:	d302      	bcc.n	8008984 <USBH_LL_GetSpeed+0x28>
 800897e:	2b02      	cmp	r3, #2
 8008980:	d006      	beq.n	8008990 <USBH_LL_GetSpeed+0x34>
 8008982:	e008      	b.n	8008996 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
    break;
 8008988:	e008      	b.n	800899c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800898a:	2301      	movs	r3, #1
 800898c:	73fb      	strb	r3, [r7, #15]
    break;
 800898e:	e005      	b.n	800899c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008990:	2302      	movs	r3, #2
 8008992:	73fb      	strb	r3, [r7, #15]
    break;
 8008994:	e002      	b.n	800899c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008996:	2301      	movs	r3, #1
 8008998:	73fb      	strb	r3, [r7, #15]
    break;
 800899a:	bf00      	nop
  }
  return  speed;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089bc:	4618      	mov	r0, r3
 80089be:	f7f9 fee5 	bl	800278c <HAL_HCD_ResetPort>
 80089c2:	4603      	mov	r3, r0
 80089c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 f901 	bl	8008bd0 <USBH_Get_USB_Status>
 80089ce:	4603      	mov	r3, r0
 80089d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ee:	78fa      	ldrb	r2, [r7, #3]
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7f9 feed 	bl	80027d2 <HAL_HCD_HC_GetXferCount>
 80089f8:	4603      	mov	r3, r0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a02:	b590      	push	{r4, r7, lr}
 8008a04:	b089      	sub	sp, #36	; 0x24
 8008a06:	af04      	add	r7, sp, #16
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	4608      	mov	r0, r1
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	461a      	mov	r2, r3
 8008a10:	4603      	mov	r3, r0
 8008a12:	70fb      	strb	r3, [r7, #3]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70bb      	strb	r3, [r7, #2]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a2a:	787c      	ldrb	r4, [r7, #1]
 8008a2c:	78ba      	ldrb	r2, [r7, #2]
 8008a2e:	78f9      	ldrb	r1, [r7, #3]
 8008a30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a32:	9302      	str	r3, [sp, #8]
 8008a34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	4623      	mov	r3, r4
 8008a42:	f7f9 fb32 	bl	80020aa <HAL_HCD_HC_Init>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 f8bf 	bl	8008bd0 <USBH_Get_USB_Status>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd90      	pop	{r4, r7, pc}

08008a60 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a7a:	78fa      	ldrb	r2, [r7, #3]
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7f9 fbab 	bl	80021da <HAL_HCD_HC_Halt>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 f8a0 	bl	8008bd0 <USBH_Get_USB_Status>
 8008a90:	4603      	mov	r3, r0
 8008a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a9e:	b590      	push	{r4, r7, lr}
 8008aa0:	b089      	sub	sp, #36	; 0x24
 8008aa2:	af04      	add	r7, sp, #16
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	4608      	mov	r0, r1
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	461a      	mov	r2, r3
 8008aac:	4603      	mov	r3, r0
 8008aae:	70fb      	strb	r3, [r7, #3]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70bb      	strb	r3, [r7, #2]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008ac6:	787c      	ldrb	r4, [r7, #1]
 8008ac8:	78ba      	ldrb	r2, [r7, #2]
 8008aca:	78f9      	ldrb	r1, [r7, #3]
 8008acc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ad0:	9303      	str	r3, [sp, #12]
 8008ad2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ad4:	9302      	str	r3, [sp, #8]
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	4623      	mov	r3, r4
 8008ae2:	f7f9 fb9d 	bl	8002220 <HAL_HCD_HC_SubmitRequest>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f86f 	bl	8008bd0 <USBH_Get_USB_Status>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd90      	pop	{r4, r7, pc}

08008b00 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b12:	78fa      	ldrb	r2, [r7, #3]
 8008b14:	4611      	mov	r1, r2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7f9 fe46 	bl	80027a8 <HAL_HCD_HC_GetURBState>
 8008b1c:	4603      	mov	r3, r0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b082      	sub	sp, #8
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d103      	bne.n	8008b44 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 f872 	bl	8008c28 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008b44:	20c8      	movs	r0, #200	; 0xc8
 8008b46:	f7f8 fbad 	bl	80012a4 <HAL_Delay>
  return USBH_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
 8008b60:	4613      	mov	r3, r2
 8008b62:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b6a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008b6c:	78fa      	ldrb	r2, [r7, #3]
 8008b6e:	68f9      	ldr	r1, [r7, #12]
 8008b70:	4613      	mov	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	440b      	add	r3, r1
 8008b7a:	333b      	adds	r3, #59	; 0x3b
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00a      	beq.n	8008b98 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008b82:	78fa      	ldrb	r2, [r7, #3]
 8008b84:	68f9      	ldr	r1, [r7, #12]
 8008b86:	4613      	mov	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	440b      	add	r3, r1
 8008b90:	3350      	adds	r3, #80	; 0x50
 8008b92:	78ba      	ldrb	r2, [r7, #2]
 8008b94:	701a      	strb	r2, [r3, #0]
 8008b96:	e009      	b.n	8008bac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008b98:	78fa      	ldrb	r2, [r7, #3]
 8008b9a:	68f9      	ldr	r1, [r7, #12]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	00db      	lsls	r3, r3, #3
 8008ba4:	440b      	add	r3, r1
 8008ba6:	3351      	adds	r3, #81	; 0x51
 8008ba8:	78ba      	ldrb	r2, [r7, #2]
 8008baa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7f8 fb6e 	bl	80012a4 <HAL_Delay>
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d817      	bhi.n	8008c14 <USBH_Get_USB_Status+0x44>
 8008be4:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <USBH_Get_USB_Status+0x1c>)
 8008be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bea:	bf00      	nop
 8008bec:	08008bfd 	.word	0x08008bfd
 8008bf0:	08008c03 	.word	0x08008c03
 8008bf4:	08008c09 	.word	0x08008c09
 8008bf8:	08008c0f 	.word	0x08008c0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8008c00:	e00b      	b.n	8008c1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008c02:	2302      	movs	r3, #2
 8008c04:	73fb      	strb	r3, [r7, #15]
    break;
 8008c06:	e008      	b.n	8008c1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c0c:	e005      	b.n	8008c1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	73fb      	strb	r3, [r7, #15]
    break;
 8008c12:	e002      	b.n	8008c1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008c14:	2302      	movs	r3, #2
 8008c16:	73fb      	strb	r3, [r7, #15]
    break;
 8008c18:	bf00      	nop
  }
  return usb_status;
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	4603      	mov	r3, r0
 8008c30:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d102      	bne.n	8008c42 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	73fb      	strb	r3, [r7, #15]
 8008c40:	e001      	b.n	8008c46 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	4803      	ldr	r0, [pc, #12]	; (8008c5c <MX_DriverVbusFS+0x34>)
 8008c4e:	f7f9 f9b1 	bl	8001fb4 <HAL_GPIO_WritePin>
}
 8008c52:	bf00      	nop
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	40020800 	.word	0x40020800

08008c60 <__errno>:
 8008c60:	4b01      	ldr	r3, [pc, #4]	; (8008c68 <__errno+0x8>)
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	2000002c 	.word	0x2000002c

08008c6c <__libc_init_array>:
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	4e0d      	ldr	r6, [pc, #52]	; (8008ca4 <__libc_init_array+0x38>)
 8008c70:	4c0d      	ldr	r4, [pc, #52]	; (8008ca8 <__libc_init_array+0x3c>)
 8008c72:	1ba4      	subs	r4, r4, r6
 8008c74:	10a4      	asrs	r4, r4, #2
 8008c76:	2500      	movs	r5, #0
 8008c78:	42a5      	cmp	r5, r4
 8008c7a:	d109      	bne.n	8008c90 <__libc_init_array+0x24>
 8008c7c:	4e0b      	ldr	r6, [pc, #44]	; (8008cac <__libc_init_array+0x40>)
 8008c7e:	4c0c      	ldr	r4, [pc, #48]	; (8008cb0 <__libc_init_array+0x44>)
 8008c80:	f000 fc36 	bl	80094f0 <_init>
 8008c84:	1ba4      	subs	r4, r4, r6
 8008c86:	10a4      	asrs	r4, r4, #2
 8008c88:	2500      	movs	r5, #0
 8008c8a:	42a5      	cmp	r5, r4
 8008c8c:	d105      	bne.n	8008c9a <__libc_init_array+0x2e>
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c94:	4798      	blx	r3
 8008c96:	3501      	adds	r5, #1
 8008c98:	e7ee      	b.n	8008c78 <__libc_init_array+0xc>
 8008c9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c9e:	4798      	blx	r3
 8008ca0:	3501      	adds	r5, #1
 8008ca2:	e7f2      	b.n	8008c8a <__libc_init_array+0x1e>
 8008ca4:	08009588 	.word	0x08009588
 8008ca8:	08009588 	.word	0x08009588
 8008cac:	08009588 	.word	0x08009588
 8008cb0:	0800958c 	.word	0x0800958c

08008cb4 <malloc>:
 8008cb4:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <malloc+0xc>)
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	f000 b861 	b.w	8008d80 <_malloc_r>
 8008cbe:	bf00      	nop
 8008cc0:	2000002c 	.word	0x2000002c

08008cc4 <free>:
 8008cc4:	4b02      	ldr	r3, [pc, #8]	; (8008cd0 <free+0xc>)
 8008cc6:	4601      	mov	r1, r0
 8008cc8:	6818      	ldr	r0, [r3, #0]
 8008cca:	f000 b80b 	b.w	8008ce4 <_free_r>
 8008cce:	bf00      	nop
 8008cd0:	2000002c 	.word	0x2000002c

08008cd4 <memset>:
 8008cd4:	4402      	add	r2, r0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d100      	bne.n	8008cde <memset+0xa>
 8008cdc:	4770      	bx	lr
 8008cde:	f803 1b01 	strb.w	r1, [r3], #1
 8008ce2:	e7f9      	b.n	8008cd8 <memset+0x4>

08008ce4 <_free_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	2900      	cmp	r1, #0
 8008cea:	d045      	beq.n	8008d78 <_free_r+0x94>
 8008cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf0:	1f0c      	subs	r4, r1, #4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bfb8      	it	lt
 8008cf6:	18e4      	addlt	r4, r4, r3
 8008cf8:	f000 f8cc 	bl	8008e94 <__malloc_lock>
 8008cfc:	4a1f      	ldr	r2, [pc, #124]	; (8008d7c <_free_r+0x98>)
 8008cfe:	6813      	ldr	r3, [r2, #0]
 8008d00:	4610      	mov	r0, r2
 8008d02:	b933      	cbnz	r3, 8008d12 <_free_r+0x2e>
 8008d04:	6063      	str	r3, [r4, #4]
 8008d06:	6014      	str	r4, [r2, #0]
 8008d08:	4628      	mov	r0, r5
 8008d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d0e:	f000 b8c2 	b.w	8008e96 <__malloc_unlock>
 8008d12:	42a3      	cmp	r3, r4
 8008d14:	d90c      	bls.n	8008d30 <_free_r+0x4c>
 8008d16:	6821      	ldr	r1, [r4, #0]
 8008d18:	1862      	adds	r2, r4, r1
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	bf04      	itt	eq
 8008d1e:	681a      	ldreq	r2, [r3, #0]
 8008d20:	685b      	ldreq	r3, [r3, #4]
 8008d22:	6063      	str	r3, [r4, #4]
 8008d24:	bf04      	itt	eq
 8008d26:	1852      	addeq	r2, r2, r1
 8008d28:	6022      	streq	r2, [r4, #0]
 8008d2a:	6004      	str	r4, [r0, #0]
 8008d2c:	e7ec      	b.n	8008d08 <_free_r+0x24>
 8008d2e:	4613      	mov	r3, r2
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	b10a      	cbz	r2, 8008d38 <_free_r+0x54>
 8008d34:	42a2      	cmp	r2, r4
 8008d36:	d9fa      	bls.n	8008d2e <_free_r+0x4a>
 8008d38:	6819      	ldr	r1, [r3, #0]
 8008d3a:	1858      	adds	r0, r3, r1
 8008d3c:	42a0      	cmp	r0, r4
 8008d3e:	d10b      	bne.n	8008d58 <_free_r+0x74>
 8008d40:	6820      	ldr	r0, [r4, #0]
 8008d42:	4401      	add	r1, r0
 8008d44:	1858      	adds	r0, r3, r1
 8008d46:	4282      	cmp	r2, r0
 8008d48:	6019      	str	r1, [r3, #0]
 8008d4a:	d1dd      	bne.n	8008d08 <_free_r+0x24>
 8008d4c:	6810      	ldr	r0, [r2, #0]
 8008d4e:	6852      	ldr	r2, [r2, #4]
 8008d50:	605a      	str	r2, [r3, #4]
 8008d52:	4401      	add	r1, r0
 8008d54:	6019      	str	r1, [r3, #0]
 8008d56:	e7d7      	b.n	8008d08 <_free_r+0x24>
 8008d58:	d902      	bls.n	8008d60 <_free_r+0x7c>
 8008d5a:	230c      	movs	r3, #12
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	e7d3      	b.n	8008d08 <_free_r+0x24>
 8008d60:	6820      	ldr	r0, [r4, #0]
 8008d62:	1821      	adds	r1, r4, r0
 8008d64:	428a      	cmp	r2, r1
 8008d66:	bf04      	itt	eq
 8008d68:	6811      	ldreq	r1, [r2, #0]
 8008d6a:	6852      	ldreq	r2, [r2, #4]
 8008d6c:	6062      	str	r2, [r4, #4]
 8008d6e:	bf04      	itt	eq
 8008d70:	1809      	addeq	r1, r1, r0
 8008d72:	6021      	streq	r1, [r4, #0]
 8008d74:	605c      	str	r4, [r3, #4]
 8008d76:	e7c7      	b.n	8008d08 <_free_r+0x24>
 8008d78:	bd38      	pop	{r3, r4, r5, pc}
 8008d7a:	bf00      	nop
 8008d7c:	200000c4 	.word	0x200000c4

08008d80 <_malloc_r>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	1ccd      	adds	r5, r1, #3
 8008d84:	f025 0503 	bic.w	r5, r5, #3
 8008d88:	3508      	adds	r5, #8
 8008d8a:	2d0c      	cmp	r5, #12
 8008d8c:	bf38      	it	cc
 8008d8e:	250c      	movcc	r5, #12
 8008d90:	2d00      	cmp	r5, #0
 8008d92:	4606      	mov	r6, r0
 8008d94:	db01      	blt.n	8008d9a <_malloc_r+0x1a>
 8008d96:	42a9      	cmp	r1, r5
 8008d98:	d903      	bls.n	8008da2 <_malloc_r+0x22>
 8008d9a:	230c      	movs	r3, #12
 8008d9c:	6033      	str	r3, [r6, #0]
 8008d9e:	2000      	movs	r0, #0
 8008da0:	bd70      	pop	{r4, r5, r6, pc}
 8008da2:	f000 f877 	bl	8008e94 <__malloc_lock>
 8008da6:	4a21      	ldr	r2, [pc, #132]	; (8008e2c <_malloc_r+0xac>)
 8008da8:	6814      	ldr	r4, [r2, #0]
 8008daa:	4621      	mov	r1, r4
 8008dac:	b991      	cbnz	r1, 8008dd4 <_malloc_r+0x54>
 8008dae:	4c20      	ldr	r4, [pc, #128]	; (8008e30 <_malloc_r+0xb0>)
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	b91b      	cbnz	r3, 8008dbc <_malloc_r+0x3c>
 8008db4:	4630      	mov	r0, r6
 8008db6:	f000 f83d 	bl	8008e34 <_sbrk_r>
 8008dba:	6020      	str	r0, [r4, #0]
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f000 f838 	bl	8008e34 <_sbrk_r>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d124      	bne.n	8008e12 <_malloc_r+0x92>
 8008dc8:	230c      	movs	r3, #12
 8008dca:	6033      	str	r3, [r6, #0]
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f000 f862 	bl	8008e96 <__malloc_unlock>
 8008dd2:	e7e4      	b.n	8008d9e <_malloc_r+0x1e>
 8008dd4:	680b      	ldr	r3, [r1, #0]
 8008dd6:	1b5b      	subs	r3, r3, r5
 8008dd8:	d418      	bmi.n	8008e0c <_malloc_r+0x8c>
 8008dda:	2b0b      	cmp	r3, #11
 8008ddc:	d90f      	bls.n	8008dfe <_malloc_r+0x7e>
 8008dde:	600b      	str	r3, [r1, #0]
 8008de0:	50cd      	str	r5, [r1, r3]
 8008de2:	18cc      	adds	r4, r1, r3
 8008de4:	4630      	mov	r0, r6
 8008de6:	f000 f856 	bl	8008e96 <__malloc_unlock>
 8008dea:	f104 000b 	add.w	r0, r4, #11
 8008dee:	1d23      	adds	r3, r4, #4
 8008df0:	f020 0007 	bic.w	r0, r0, #7
 8008df4:	1ac3      	subs	r3, r0, r3
 8008df6:	d0d3      	beq.n	8008da0 <_malloc_r+0x20>
 8008df8:	425a      	negs	r2, r3
 8008dfa:	50e2      	str	r2, [r4, r3]
 8008dfc:	e7d0      	b.n	8008da0 <_malloc_r+0x20>
 8008dfe:	428c      	cmp	r4, r1
 8008e00:	684b      	ldr	r3, [r1, #4]
 8008e02:	bf16      	itet	ne
 8008e04:	6063      	strne	r3, [r4, #4]
 8008e06:	6013      	streq	r3, [r2, #0]
 8008e08:	460c      	movne	r4, r1
 8008e0a:	e7eb      	b.n	8008de4 <_malloc_r+0x64>
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	6849      	ldr	r1, [r1, #4]
 8008e10:	e7cc      	b.n	8008dac <_malloc_r+0x2c>
 8008e12:	1cc4      	adds	r4, r0, #3
 8008e14:	f024 0403 	bic.w	r4, r4, #3
 8008e18:	42a0      	cmp	r0, r4
 8008e1a:	d005      	beq.n	8008e28 <_malloc_r+0xa8>
 8008e1c:	1a21      	subs	r1, r4, r0
 8008e1e:	4630      	mov	r0, r6
 8008e20:	f000 f808 	bl	8008e34 <_sbrk_r>
 8008e24:	3001      	adds	r0, #1
 8008e26:	d0cf      	beq.n	8008dc8 <_malloc_r+0x48>
 8008e28:	6025      	str	r5, [r4, #0]
 8008e2a:	e7db      	b.n	8008de4 <_malloc_r+0x64>
 8008e2c:	200000c4 	.word	0x200000c4
 8008e30:	200000c8 	.word	0x200000c8

08008e34 <_sbrk_r>:
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	4c06      	ldr	r4, [pc, #24]	; (8008e50 <_sbrk_r+0x1c>)
 8008e38:	2300      	movs	r3, #0
 8008e3a:	4605      	mov	r5, r0
 8008e3c:	4608      	mov	r0, r1
 8008e3e:	6023      	str	r3, [r4, #0]
 8008e40:	f7f8 f948 	bl	80010d4 <_sbrk>
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	d102      	bne.n	8008e4e <_sbrk_r+0x1a>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	b103      	cbz	r3, 8008e4e <_sbrk_r+0x1a>
 8008e4c:	602b      	str	r3, [r5, #0]
 8008e4e:	bd38      	pop	{r3, r4, r5, pc}
 8008e50:	200008ac 	.word	0x200008ac

08008e54 <_vsiprintf_r>:
 8008e54:	b500      	push	{lr}
 8008e56:	b09b      	sub	sp, #108	; 0x6c
 8008e58:	9100      	str	r1, [sp, #0]
 8008e5a:	9104      	str	r1, [sp, #16]
 8008e5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e60:	9105      	str	r1, [sp, #20]
 8008e62:	9102      	str	r1, [sp, #8]
 8008e64:	4905      	ldr	r1, [pc, #20]	; (8008e7c <_vsiprintf_r+0x28>)
 8008e66:	9103      	str	r1, [sp, #12]
 8008e68:	4669      	mov	r1, sp
 8008e6a:	f000 f86f 	bl	8008f4c <_svfiprintf_r>
 8008e6e:	9b00      	ldr	r3, [sp, #0]
 8008e70:	2200      	movs	r2, #0
 8008e72:	701a      	strb	r2, [r3, #0]
 8008e74:	b01b      	add	sp, #108	; 0x6c
 8008e76:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e7a:	bf00      	nop
 8008e7c:	ffff0208 	.word	0xffff0208

08008e80 <vsiprintf>:
 8008e80:	4613      	mov	r3, r2
 8008e82:	460a      	mov	r2, r1
 8008e84:	4601      	mov	r1, r0
 8008e86:	4802      	ldr	r0, [pc, #8]	; (8008e90 <vsiprintf+0x10>)
 8008e88:	6800      	ldr	r0, [r0, #0]
 8008e8a:	f7ff bfe3 	b.w	8008e54 <_vsiprintf_r>
 8008e8e:	bf00      	nop
 8008e90:	2000002c 	.word	0x2000002c

08008e94 <__malloc_lock>:
 8008e94:	4770      	bx	lr

08008e96 <__malloc_unlock>:
 8008e96:	4770      	bx	lr

08008e98 <__ssputs_r>:
 8008e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e9c:	688e      	ldr	r6, [r1, #8]
 8008e9e:	429e      	cmp	r6, r3
 8008ea0:	4682      	mov	sl, r0
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	4690      	mov	r8, r2
 8008ea6:	4699      	mov	r9, r3
 8008ea8:	d837      	bhi.n	8008f1a <__ssputs_r+0x82>
 8008eaa:	898a      	ldrh	r2, [r1, #12]
 8008eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008eb0:	d031      	beq.n	8008f16 <__ssputs_r+0x7e>
 8008eb2:	6825      	ldr	r5, [r4, #0]
 8008eb4:	6909      	ldr	r1, [r1, #16]
 8008eb6:	1a6f      	subs	r7, r5, r1
 8008eb8:	6965      	ldr	r5, [r4, #20]
 8008eba:	2302      	movs	r3, #2
 8008ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ec0:	fb95 f5f3 	sdiv	r5, r5, r3
 8008ec4:	f109 0301 	add.w	r3, r9, #1
 8008ec8:	443b      	add	r3, r7
 8008eca:	429d      	cmp	r5, r3
 8008ecc:	bf38      	it	cc
 8008ece:	461d      	movcc	r5, r3
 8008ed0:	0553      	lsls	r3, r2, #21
 8008ed2:	d530      	bpl.n	8008f36 <__ssputs_r+0x9e>
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	f7ff ff53 	bl	8008d80 <_malloc_r>
 8008eda:	4606      	mov	r6, r0
 8008edc:	b950      	cbnz	r0, 8008ef4 <__ssputs_r+0x5c>
 8008ede:	230c      	movs	r3, #12
 8008ee0:	f8ca 3000 	str.w	r3, [sl]
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eea:	81a3      	strh	r3, [r4, #12]
 8008eec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef4:	463a      	mov	r2, r7
 8008ef6:	6921      	ldr	r1, [r4, #16]
 8008ef8:	f000 faa8 	bl	800944c <memcpy>
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f06:	81a3      	strh	r3, [r4, #12]
 8008f08:	6126      	str	r6, [r4, #16]
 8008f0a:	6165      	str	r5, [r4, #20]
 8008f0c:	443e      	add	r6, r7
 8008f0e:	1bed      	subs	r5, r5, r7
 8008f10:	6026      	str	r6, [r4, #0]
 8008f12:	60a5      	str	r5, [r4, #8]
 8008f14:	464e      	mov	r6, r9
 8008f16:	454e      	cmp	r6, r9
 8008f18:	d900      	bls.n	8008f1c <__ssputs_r+0x84>
 8008f1a:	464e      	mov	r6, r9
 8008f1c:	4632      	mov	r2, r6
 8008f1e:	4641      	mov	r1, r8
 8008f20:	6820      	ldr	r0, [r4, #0]
 8008f22:	f000 fa9e 	bl	8009462 <memmove>
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	1b9b      	subs	r3, r3, r6
 8008f2a:	60a3      	str	r3, [r4, #8]
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	441e      	add	r6, r3
 8008f30:	6026      	str	r6, [r4, #0]
 8008f32:	2000      	movs	r0, #0
 8008f34:	e7dc      	b.n	8008ef0 <__ssputs_r+0x58>
 8008f36:	462a      	mov	r2, r5
 8008f38:	f000 faac 	bl	8009494 <_realloc_r>
 8008f3c:	4606      	mov	r6, r0
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d1e2      	bne.n	8008f08 <__ssputs_r+0x70>
 8008f42:	6921      	ldr	r1, [r4, #16]
 8008f44:	4650      	mov	r0, sl
 8008f46:	f7ff fecd 	bl	8008ce4 <_free_r>
 8008f4a:	e7c8      	b.n	8008ede <__ssputs_r+0x46>

08008f4c <_svfiprintf_r>:
 8008f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f50:	461d      	mov	r5, r3
 8008f52:	898b      	ldrh	r3, [r1, #12]
 8008f54:	061f      	lsls	r7, r3, #24
 8008f56:	b09d      	sub	sp, #116	; 0x74
 8008f58:	4680      	mov	r8, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	4616      	mov	r6, r2
 8008f5e:	d50f      	bpl.n	8008f80 <_svfiprintf_r+0x34>
 8008f60:	690b      	ldr	r3, [r1, #16]
 8008f62:	b96b      	cbnz	r3, 8008f80 <_svfiprintf_r+0x34>
 8008f64:	2140      	movs	r1, #64	; 0x40
 8008f66:	f7ff ff0b 	bl	8008d80 <_malloc_r>
 8008f6a:	6020      	str	r0, [r4, #0]
 8008f6c:	6120      	str	r0, [r4, #16]
 8008f6e:	b928      	cbnz	r0, 8008f7c <_svfiprintf_r+0x30>
 8008f70:	230c      	movs	r3, #12
 8008f72:	f8c8 3000 	str.w	r3, [r8]
 8008f76:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7a:	e0c8      	b.n	800910e <_svfiprintf_r+0x1c2>
 8008f7c:	2340      	movs	r3, #64	; 0x40
 8008f7e:	6163      	str	r3, [r4, #20]
 8008f80:	2300      	movs	r3, #0
 8008f82:	9309      	str	r3, [sp, #36]	; 0x24
 8008f84:	2320      	movs	r3, #32
 8008f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f8a:	2330      	movs	r3, #48	; 0x30
 8008f8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f90:	9503      	str	r5, [sp, #12]
 8008f92:	f04f 0b01 	mov.w	fp, #1
 8008f96:	4637      	mov	r7, r6
 8008f98:	463d      	mov	r5, r7
 8008f9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f9e:	b10b      	cbz	r3, 8008fa4 <_svfiprintf_r+0x58>
 8008fa0:	2b25      	cmp	r3, #37	; 0x25
 8008fa2:	d13e      	bne.n	8009022 <_svfiprintf_r+0xd6>
 8008fa4:	ebb7 0a06 	subs.w	sl, r7, r6
 8008fa8:	d00b      	beq.n	8008fc2 <_svfiprintf_r+0x76>
 8008faa:	4653      	mov	r3, sl
 8008fac:	4632      	mov	r2, r6
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4640      	mov	r0, r8
 8008fb2:	f7ff ff71 	bl	8008e98 <__ssputs_r>
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	f000 80a4 	beq.w	8009104 <_svfiprintf_r+0x1b8>
 8008fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fbe:	4453      	add	r3, sl
 8008fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc2:	783b      	ldrb	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 809d 	beq.w	8009104 <_svfiprintf_r+0x1b8>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fd4:	9304      	str	r3, [sp, #16]
 8008fd6:	9307      	str	r3, [sp, #28]
 8008fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8008fde:	462f      	mov	r7, r5
 8008fe0:	2205      	movs	r2, #5
 8008fe2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008fe6:	4850      	ldr	r0, [pc, #320]	; (8009128 <_svfiprintf_r+0x1dc>)
 8008fe8:	f7f7 f8fa 	bl	80001e0 <memchr>
 8008fec:	9b04      	ldr	r3, [sp, #16]
 8008fee:	b9d0      	cbnz	r0, 8009026 <_svfiprintf_r+0xda>
 8008ff0:	06d9      	lsls	r1, r3, #27
 8008ff2:	bf44      	itt	mi
 8008ff4:	2220      	movmi	r2, #32
 8008ff6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ffa:	071a      	lsls	r2, r3, #28
 8008ffc:	bf44      	itt	mi
 8008ffe:	222b      	movmi	r2, #43	; 0x2b
 8009000:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009004:	782a      	ldrb	r2, [r5, #0]
 8009006:	2a2a      	cmp	r2, #42	; 0x2a
 8009008:	d015      	beq.n	8009036 <_svfiprintf_r+0xea>
 800900a:	9a07      	ldr	r2, [sp, #28]
 800900c:	462f      	mov	r7, r5
 800900e:	2000      	movs	r0, #0
 8009010:	250a      	movs	r5, #10
 8009012:	4639      	mov	r1, r7
 8009014:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009018:	3b30      	subs	r3, #48	; 0x30
 800901a:	2b09      	cmp	r3, #9
 800901c:	d94d      	bls.n	80090ba <_svfiprintf_r+0x16e>
 800901e:	b1b8      	cbz	r0, 8009050 <_svfiprintf_r+0x104>
 8009020:	e00f      	b.n	8009042 <_svfiprintf_r+0xf6>
 8009022:	462f      	mov	r7, r5
 8009024:	e7b8      	b.n	8008f98 <_svfiprintf_r+0x4c>
 8009026:	4a40      	ldr	r2, [pc, #256]	; (8009128 <_svfiprintf_r+0x1dc>)
 8009028:	1a80      	subs	r0, r0, r2
 800902a:	fa0b f000 	lsl.w	r0, fp, r0
 800902e:	4318      	orrs	r0, r3
 8009030:	9004      	str	r0, [sp, #16]
 8009032:	463d      	mov	r5, r7
 8009034:	e7d3      	b.n	8008fde <_svfiprintf_r+0x92>
 8009036:	9a03      	ldr	r2, [sp, #12]
 8009038:	1d11      	adds	r1, r2, #4
 800903a:	6812      	ldr	r2, [r2, #0]
 800903c:	9103      	str	r1, [sp, #12]
 800903e:	2a00      	cmp	r2, #0
 8009040:	db01      	blt.n	8009046 <_svfiprintf_r+0xfa>
 8009042:	9207      	str	r2, [sp, #28]
 8009044:	e004      	b.n	8009050 <_svfiprintf_r+0x104>
 8009046:	4252      	negs	r2, r2
 8009048:	f043 0302 	orr.w	r3, r3, #2
 800904c:	9207      	str	r2, [sp, #28]
 800904e:	9304      	str	r3, [sp, #16]
 8009050:	783b      	ldrb	r3, [r7, #0]
 8009052:	2b2e      	cmp	r3, #46	; 0x2e
 8009054:	d10c      	bne.n	8009070 <_svfiprintf_r+0x124>
 8009056:	787b      	ldrb	r3, [r7, #1]
 8009058:	2b2a      	cmp	r3, #42	; 0x2a
 800905a:	d133      	bne.n	80090c4 <_svfiprintf_r+0x178>
 800905c:	9b03      	ldr	r3, [sp, #12]
 800905e:	1d1a      	adds	r2, r3, #4
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	9203      	str	r2, [sp, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	bfb8      	it	lt
 8009068:	f04f 33ff 	movlt.w	r3, #4294967295
 800906c:	3702      	adds	r7, #2
 800906e:	9305      	str	r3, [sp, #20]
 8009070:	4d2e      	ldr	r5, [pc, #184]	; (800912c <_svfiprintf_r+0x1e0>)
 8009072:	7839      	ldrb	r1, [r7, #0]
 8009074:	2203      	movs	r2, #3
 8009076:	4628      	mov	r0, r5
 8009078:	f7f7 f8b2 	bl	80001e0 <memchr>
 800907c:	b138      	cbz	r0, 800908e <_svfiprintf_r+0x142>
 800907e:	2340      	movs	r3, #64	; 0x40
 8009080:	1b40      	subs	r0, r0, r5
 8009082:	fa03 f000 	lsl.w	r0, r3, r0
 8009086:	9b04      	ldr	r3, [sp, #16]
 8009088:	4303      	orrs	r3, r0
 800908a:	3701      	adds	r7, #1
 800908c:	9304      	str	r3, [sp, #16]
 800908e:	7839      	ldrb	r1, [r7, #0]
 8009090:	4827      	ldr	r0, [pc, #156]	; (8009130 <_svfiprintf_r+0x1e4>)
 8009092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009096:	2206      	movs	r2, #6
 8009098:	1c7e      	adds	r6, r7, #1
 800909a:	f7f7 f8a1 	bl	80001e0 <memchr>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d038      	beq.n	8009114 <_svfiprintf_r+0x1c8>
 80090a2:	4b24      	ldr	r3, [pc, #144]	; (8009134 <_svfiprintf_r+0x1e8>)
 80090a4:	bb13      	cbnz	r3, 80090ec <_svfiprintf_r+0x1a0>
 80090a6:	9b03      	ldr	r3, [sp, #12]
 80090a8:	3307      	adds	r3, #7
 80090aa:	f023 0307 	bic.w	r3, r3, #7
 80090ae:	3308      	adds	r3, #8
 80090b0:	9303      	str	r3, [sp, #12]
 80090b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b4:	444b      	add	r3, r9
 80090b6:	9309      	str	r3, [sp, #36]	; 0x24
 80090b8:	e76d      	b.n	8008f96 <_svfiprintf_r+0x4a>
 80090ba:	fb05 3202 	mla	r2, r5, r2, r3
 80090be:	2001      	movs	r0, #1
 80090c0:	460f      	mov	r7, r1
 80090c2:	e7a6      	b.n	8009012 <_svfiprintf_r+0xc6>
 80090c4:	2300      	movs	r3, #0
 80090c6:	3701      	adds	r7, #1
 80090c8:	9305      	str	r3, [sp, #20]
 80090ca:	4619      	mov	r1, r3
 80090cc:	250a      	movs	r5, #10
 80090ce:	4638      	mov	r0, r7
 80090d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090d4:	3a30      	subs	r2, #48	; 0x30
 80090d6:	2a09      	cmp	r2, #9
 80090d8:	d903      	bls.n	80090e2 <_svfiprintf_r+0x196>
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d0c8      	beq.n	8009070 <_svfiprintf_r+0x124>
 80090de:	9105      	str	r1, [sp, #20]
 80090e0:	e7c6      	b.n	8009070 <_svfiprintf_r+0x124>
 80090e2:	fb05 2101 	mla	r1, r5, r1, r2
 80090e6:	2301      	movs	r3, #1
 80090e8:	4607      	mov	r7, r0
 80090ea:	e7f0      	b.n	80090ce <_svfiprintf_r+0x182>
 80090ec:	ab03      	add	r3, sp, #12
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	4622      	mov	r2, r4
 80090f2:	4b11      	ldr	r3, [pc, #68]	; (8009138 <_svfiprintf_r+0x1ec>)
 80090f4:	a904      	add	r1, sp, #16
 80090f6:	4640      	mov	r0, r8
 80090f8:	f3af 8000 	nop.w
 80090fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009100:	4681      	mov	r9, r0
 8009102:	d1d6      	bne.n	80090b2 <_svfiprintf_r+0x166>
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	065b      	lsls	r3, r3, #25
 8009108:	f53f af35 	bmi.w	8008f76 <_svfiprintf_r+0x2a>
 800910c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800910e:	b01d      	add	sp, #116	; 0x74
 8009110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009114:	ab03      	add	r3, sp, #12
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	4622      	mov	r2, r4
 800911a:	4b07      	ldr	r3, [pc, #28]	; (8009138 <_svfiprintf_r+0x1ec>)
 800911c:	a904      	add	r1, sp, #16
 800911e:	4640      	mov	r0, r8
 8009120:	f000 f882 	bl	8009228 <_printf_i>
 8009124:	e7ea      	b.n	80090fc <_svfiprintf_r+0x1b0>
 8009126:	bf00      	nop
 8009128:	0800954c 	.word	0x0800954c
 800912c:	08009552 	.word	0x08009552
 8009130:	08009556 	.word	0x08009556
 8009134:	00000000 	.word	0x00000000
 8009138:	08008e99 	.word	0x08008e99

0800913c <_printf_common>:
 800913c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009140:	4691      	mov	r9, r2
 8009142:	461f      	mov	r7, r3
 8009144:	688a      	ldr	r2, [r1, #8]
 8009146:	690b      	ldr	r3, [r1, #16]
 8009148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800914c:	4293      	cmp	r3, r2
 800914e:	bfb8      	it	lt
 8009150:	4613      	movlt	r3, r2
 8009152:	f8c9 3000 	str.w	r3, [r9]
 8009156:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800915a:	4606      	mov	r6, r0
 800915c:	460c      	mov	r4, r1
 800915e:	b112      	cbz	r2, 8009166 <_printf_common+0x2a>
 8009160:	3301      	adds	r3, #1
 8009162:	f8c9 3000 	str.w	r3, [r9]
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	0699      	lsls	r1, r3, #26
 800916a:	bf42      	ittt	mi
 800916c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009170:	3302      	addmi	r3, #2
 8009172:	f8c9 3000 	strmi.w	r3, [r9]
 8009176:	6825      	ldr	r5, [r4, #0]
 8009178:	f015 0506 	ands.w	r5, r5, #6
 800917c:	d107      	bne.n	800918e <_printf_common+0x52>
 800917e:	f104 0a19 	add.w	sl, r4, #25
 8009182:	68e3      	ldr	r3, [r4, #12]
 8009184:	f8d9 2000 	ldr.w	r2, [r9]
 8009188:	1a9b      	subs	r3, r3, r2
 800918a:	42ab      	cmp	r3, r5
 800918c:	dc28      	bgt.n	80091e0 <_printf_common+0xa4>
 800918e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009192:	6822      	ldr	r2, [r4, #0]
 8009194:	3300      	adds	r3, #0
 8009196:	bf18      	it	ne
 8009198:	2301      	movne	r3, #1
 800919a:	0692      	lsls	r2, r2, #26
 800919c:	d42d      	bmi.n	80091fa <_printf_common+0xbe>
 800919e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091a2:	4639      	mov	r1, r7
 80091a4:	4630      	mov	r0, r6
 80091a6:	47c0      	blx	r8
 80091a8:	3001      	adds	r0, #1
 80091aa:	d020      	beq.n	80091ee <_printf_common+0xb2>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	68e5      	ldr	r5, [r4, #12]
 80091b0:	f8d9 2000 	ldr.w	r2, [r9]
 80091b4:	f003 0306 	and.w	r3, r3, #6
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	bf08      	it	eq
 80091bc:	1aad      	subeq	r5, r5, r2
 80091be:	68a3      	ldr	r3, [r4, #8]
 80091c0:	6922      	ldr	r2, [r4, #16]
 80091c2:	bf0c      	ite	eq
 80091c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091c8:	2500      	movne	r5, #0
 80091ca:	4293      	cmp	r3, r2
 80091cc:	bfc4      	itt	gt
 80091ce:	1a9b      	subgt	r3, r3, r2
 80091d0:	18ed      	addgt	r5, r5, r3
 80091d2:	f04f 0900 	mov.w	r9, #0
 80091d6:	341a      	adds	r4, #26
 80091d8:	454d      	cmp	r5, r9
 80091da:	d11a      	bne.n	8009212 <_printf_common+0xd6>
 80091dc:	2000      	movs	r0, #0
 80091de:	e008      	b.n	80091f2 <_printf_common+0xb6>
 80091e0:	2301      	movs	r3, #1
 80091e2:	4652      	mov	r2, sl
 80091e4:	4639      	mov	r1, r7
 80091e6:	4630      	mov	r0, r6
 80091e8:	47c0      	blx	r8
 80091ea:	3001      	adds	r0, #1
 80091ec:	d103      	bne.n	80091f6 <_printf_common+0xba>
 80091ee:	f04f 30ff 	mov.w	r0, #4294967295
 80091f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f6:	3501      	adds	r5, #1
 80091f8:	e7c3      	b.n	8009182 <_printf_common+0x46>
 80091fa:	18e1      	adds	r1, r4, r3
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	2030      	movs	r0, #48	; 0x30
 8009200:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009204:	4422      	add	r2, r4
 8009206:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800920a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800920e:	3302      	adds	r3, #2
 8009210:	e7c5      	b.n	800919e <_printf_common+0x62>
 8009212:	2301      	movs	r3, #1
 8009214:	4622      	mov	r2, r4
 8009216:	4639      	mov	r1, r7
 8009218:	4630      	mov	r0, r6
 800921a:	47c0      	blx	r8
 800921c:	3001      	adds	r0, #1
 800921e:	d0e6      	beq.n	80091ee <_printf_common+0xb2>
 8009220:	f109 0901 	add.w	r9, r9, #1
 8009224:	e7d8      	b.n	80091d8 <_printf_common+0x9c>
	...

08009228 <_printf_i>:
 8009228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800922c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009230:	460c      	mov	r4, r1
 8009232:	7e09      	ldrb	r1, [r1, #24]
 8009234:	b085      	sub	sp, #20
 8009236:	296e      	cmp	r1, #110	; 0x6e
 8009238:	4617      	mov	r7, r2
 800923a:	4606      	mov	r6, r0
 800923c:	4698      	mov	r8, r3
 800923e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009240:	f000 80b3 	beq.w	80093aa <_printf_i+0x182>
 8009244:	d822      	bhi.n	800928c <_printf_i+0x64>
 8009246:	2963      	cmp	r1, #99	; 0x63
 8009248:	d036      	beq.n	80092b8 <_printf_i+0x90>
 800924a:	d80a      	bhi.n	8009262 <_printf_i+0x3a>
 800924c:	2900      	cmp	r1, #0
 800924e:	f000 80b9 	beq.w	80093c4 <_printf_i+0x19c>
 8009252:	2958      	cmp	r1, #88	; 0x58
 8009254:	f000 8083 	beq.w	800935e <_printf_i+0x136>
 8009258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800925c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009260:	e032      	b.n	80092c8 <_printf_i+0xa0>
 8009262:	2964      	cmp	r1, #100	; 0x64
 8009264:	d001      	beq.n	800926a <_printf_i+0x42>
 8009266:	2969      	cmp	r1, #105	; 0x69
 8009268:	d1f6      	bne.n	8009258 <_printf_i+0x30>
 800926a:	6820      	ldr	r0, [r4, #0]
 800926c:	6813      	ldr	r3, [r2, #0]
 800926e:	0605      	lsls	r5, r0, #24
 8009270:	f103 0104 	add.w	r1, r3, #4
 8009274:	d52a      	bpl.n	80092cc <_printf_i+0xa4>
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6011      	str	r1, [r2, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	da03      	bge.n	8009286 <_printf_i+0x5e>
 800927e:	222d      	movs	r2, #45	; 0x2d
 8009280:	425b      	negs	r3, r3
 8009282:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009286:	486f      	ldr	r0, [pc, #444]	; (8009444 <_printf_i+0x21c>)
 8009288:	220a      	movs	r2, #10
 800928a:	e039      	b.n	8009300 <_printf_i+0xd8>
 800928c:	2973      	cmp	r1, #115	; 0x73
 800928e:	f000 809d 	beq.w	80093cc <_printf_i+0x1a4>
 8009292:	d808      	bhi.n	80092a6 <_printf_i+0x7e>
 8009294:	296f      	cmp	r1, #111	; 0x6f
 8009296:	d020      	beq.n	80092da <_printf_i+0xb2>
 8009298:	2970      	cmp	r1, #112	; 0x70
 800929a:	d1dd      	bne.n	8009258 <_printf_i+0x30>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	f043 0320 	orr.w	r3, r3, #32
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	e003      	b.n	80092ae <_printf_i+0x86>
 80092a6:	2975      	cmp	r1, #117	; 0x75
 80092a8:	d017      	beq.n	80092da <_printf_i+0xb2>
 80092aa:	2978      	cmp	r1, #120	; 0x78
 80092ac:	d1d4      	bne.n	8009258 <_printf_i+0x30>
 80092ae:	2378      	movs	r3, #120	; 0x78
 80092b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092b4:	4864      	ldr	r0, [pc, #400]	; (8009448 <_printf_i+0x220>)
 80092b6:	e055      	b.n	8009364 <_printf_i+0x13c>
 80092b8:	6813      	ldr	r3, [r2, #0]
 80092ba:	1d19      	adds	r1, r3, #4
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	6011      	str	r1, [r2, #0]
 80092c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092c8:	2301      	movs	r3, #1
 80092ca:	e08c      	b.n	80093e6 <_printf_i+0x1be>
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6011      	str	r1, [r2, #0]
 80092d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092d4:	bf18      	it	ne
 80092d6:	b21b      	sxthne	r3, r3
 80092d8:	e7cf      	b.n	800927a <_printf_i+0x52>
 80092da:	6813      	ldr	r3, [r2, #0]
 80092dc:	6825      	ldr	r5, [r4, #0]
 80092de:	1d18      	adds	r0, r3, #4
 80092e0:	6010      	str	r0, [r2, #0]
 80092e2:	0628      	lsls	r0, r5, #24
 80092e4:	d501      	bpl.n	80092ea <_printf_i+0xc2>
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	e002      	b.n	80092f0 <_printf_i+0xc8>
 80092ea:	0668      	lsls	r0, r5, #25
 80092ec:	d5fb      	bpl.n	80092e6 <_printf_i+0xbe>
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	4854      	ldr	r0, [pc, #336]	; (8009444 <_printf_i+0x21c>)
 80092f2:	296f      	cmp	r1, #111	; 0x6f
 80092f4:	bf14      	ite	ne
 80092f6:	220a      	movne	r2, #10
 80092f8:	2208      	moveq	r2, #8
 80092fa:	2100      	movs	r1, #0
 80092fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009300:	6865      	ldr	r5, [r4, #4]
 8009302:	60a5      	str	r5, [r4, #8]
 8009304:	2d00      	cmp	r5, #0
 8009306:	f2c0 8095 	blt.w	8009434 <_printf_i+0x20c>
 800930a:	6821      	ldr	r1, [r4, #0]
 800930c:	f021 0104 	bic.w	r1, r1, #4
 8009310:	6021      	str	r1, [r4, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d13d      	bne.n	8009392 <_printf_i+0x16a>
 8009316:	2d00      	cmp	r5, #0
 8009318:	f040 808e 	bne.w	8009438 <_printf_i+0x210>
 800931c:	4665      	mov	r5, ip
 800931e:	2a08      	cmp	r2, #8
 8009320:	d10b      	bne.n	800933a <_printf_i+0x112>
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	07db      	lsls	r3, r3, #31
 8009326:	d508      	bpl.n	800933a <_printf_i+0x112>
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	6862      	ldr	r2, [r4, #4]
 800932c:	429a      	cmp	r2, r3
 800932e:	bfde      	ittt	le
 8009330:	2330      	movle	r3, #48	; 0x30
 8009332:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009336:	f105 35ff 	addle.w	r5, r5, #4294967295
 800933a:	ebac 0305 	sub.w	r3, ip, r5
 800933e:	6123      	str	r3, [r4, #16]
 8009340:	f8cd 8000 	str.w	r8, [sp]
 8009344:	463b      	mov	r3, r7
 8009346:	aa03      	add	r2, sp, #12
 8009348:	4621      	mov	r1, r4
 800934a:	4630      	mov	r0, r6
 800934c:	f7ff fef6 	bl	800913c <_printf_common>
 8009350:	3001      	adds	r0, #1
 8009352:	d14d      	bne.n	80093f0 <_printf_i+0x1c8>
 8009354:	f04f 30ff 	mov.w	r0, #4294967295
 8009358:	b005      	add	sp, #20
 800935a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800935e:	4839      	ldr	r0, [pc, #228]	; (8009444 <_printf_i+0x21c>)
 8009360:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009364:	6813      	ldr	r3, [r2, #0]
 8009366:	6821      	ldr	r1, [r4, #0]
 8009368:	1d1d      	adds	r5, r3, #4
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6015      	str	r5, [r2, #0]
 800936e:	060a      	lsls	r2, r1, #24
 8009370:	d50b      	bpl.n	800938a <_printf_i+0x162>
 8009372:	07ca      	lsls	r2, r1, #31
 8009374:	bf44      	itt	mi
 8009376:	f041 0120 	orrmi.w	r1, r1, #32
 800937a:	6021      	strmi	r1, [r4, #0]
 800937c:	b91b      	cbnz	r3, 8009386 <_printf_i+0x15e>
 800937e:	6822      	ldr	r2, [r4, #0]
 8009380:	f022 0220 	bic.w	r2, r2, #32
 8009384:	6022      	str	r2, [r4, #0]
 8009386:	2210      	movs	r2, #16
 8009388:	e7b7      	b.n	80092fa <_printf_i+0xd2>
 800938a:	064d      	lsls	r5, r1, #25
 800938c:	bf48      	it	mi
 800938e:	b29b      	uxthmi	r3, r3
 8009390:	e7ef      	b.n	8009372 <_printf_i+0x14a>
 8009392:	4665      	mov	r5, ip
 8009394:	fbb3 f1f2 	udiv	r1, r3, r2
 8009398:	fb02 3311 	mls	r3, r2, r1, r3
 800939c:	5cc3      	ldrb	r3, [r0, r3]
 800939e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80093a2:	460b      	mov	r3, r1
 80093a4:	2900      	cmp	r1, #0
 80093a6:	d1f5      	bne.n	8009394 <_printf_i+0x16c>
 80093a8:	e7b9      	b.n	800931e <_printf_i+0xf6>
 80093aa:	6813      	ldr	r3, [r2, #0]
 80093ac:	6825      	ldr	r5, [r4, #0]
 80093ae:	6961      	ldr	r1, [r4, #20]
 80093b0:	1d18      	adds	r0, r3, #4
 80093b2:	6010      	str	r0, [r2, #0]
 80093b4:	0628      	lsls	r0, r5, #24
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	d501      	bpl.n	80093be <_printf_i+0x196>
 80093ba:	6019      	str	r1, [r3, #0]
 80093bc:	e002      	b.n	80093c4 <_printf_i+0x19c>
 80093be:	066a      	lsls	r2, r5, #25
 80093c0:	d5fb      	bpl.n	80093ba <_printf_i+0x192>
 80093c2:	8019      	strh	r1, [r3, #0]
 80093c4:	2300      	movs	r3, #0
 80093c6:	6123      	str	r3, [r4, #16]
 80093c8:	4665      	mov	r5, ip
 80093ca:	e7b9      	b.n	8009340 <_printf_i+0x118>
 80093cc:	6813      	ldr	r3, [r2, #0]
 80093ce:	1d19      	adds	r1, r3, #4
 80093d0:	6011      	str	r1, [r2, #0]
 80093d2:	681d      	ldr	r5, [r3, #0]
 80093d4:	6862      	ldr	r2, [r4, #4]
 80093d6:	2100      	movs	r1, #0
 80093d8:	4628      	mov	r0, r5
 80093da:	f7f6 ff01 	bl	80001e0 <memchr>
 80093de:	b108      	cbz	r0, 80093e4 <_printf_i+0x1bc>
 80093e0:	1b40      	subs	r0, r0, r5
 80093e2:	6060      	str	r0, [r4, #4]
 80093e4:	6863      	ldr	r3, [r4, #4]
 80093e6:	6123      	str	r3, [r4, #16]
 80093e8:	2300      	movs	r3, #0
 80093ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ee:	e7a7      	b.n	8009340 <_printf_i+0x118>
 80093f0:	6923      	ldr	r3, [r4, #16]
 80093f2:	462a      	mov	r2, r5
 80093f4:	4639      	mov	r1, r7
 80093f6:	4630      	mov	r0, r6
 80093f8:	47c0      	blx	r8
 80093fa:	3001      	adds	r0, #1
 80093fc:	d0aa      	beq.n	8009354 <_printf_i+0x12c>
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	079b      	lsls	r3, r3, #30
 8009402:	d413      	bmi.n	800942c <_printf_i+0x204>
 8009404:	68e0      	ldr	r0, [r4, #12]
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	4298      	cmp	r0, r3
 800940a:	bfb8      	it	lt
 800940c:	4618      	movlt	r0, r3
 800940e:	e7a3      	b.n	8009358 <_printf_i+0x130>
 8009410:	2301      	movs	r3, #1
 8009412:	464a      	mov	r2, r9
 8009414:	4639      	mov	r1, r7
 8009416:	4630      	mov	r0, r6
 8009418:	47c0      	blx	r8
 800941a:	3001      	adds	r0, #1
 800941c:	d09a      	beq.n	8009354 <_printf_i+0x12c>
 800941e:	3501      	adds	r5, #1
 8009420:	68e3      	ldr	r3, [r4, #12]
 8009422:	9a03      	ldr	r2, [sp, #12]
 8009424:	1a9b      	subs	r3, r3, r2
 8009426:	42ab      	cmp	r3, r5
 8009428:	dcf2      	bgt.n	8009410 <_printf_i+0x1e8>
 800942a:	e7eb      	b.n	8009404 <_printf_i+0x1dc>
 800942c:	2500      	movs	r5, #0
 800942e:	f104 0919 	add.w	r9, r4, #25
 8009432:	e7f5      	b.n	8009420 <_printf_i+0x1f8>
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1ac      	bne.n	8009392 <_printf_i+0x16a>
 8009438:	7803      	ldrb	r3, [r0, #0]
 800943a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800943e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009442:	e76c      	b.n	800931e <_printf_i+0xf6>
 8009444:	0800955d 	.word	0x0800955d
 8009448:	0800956e 	.word	0x0800956e

0800944c <memcpy>:
 800944c:	b510      	push	{r4, lr}
 800944e:	1e43      	subs	r3, r0, #1
 8009450:	440a      	add	r2, r1
 8009452:	4291      	cmp	r1, r2
 8009454:	d100      	bne.n	8009458 <memcpy+0xc>
 8009456:	bd10      	pop	{r4, pc}
 8009458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800945c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009460:	e7f7      	b.n	8009452 <memcpy+0x6>

08009462 <memmove>:
 8009462:	4288      	cmp	r0, r1
 8009464:	b510      	push	{r4, lr}
 8009466:	eb01 0302 	add.w	r3, r1, r2
 800946a:	d807      	bhi.n	800947c <memmove+0x1a>
 800946c:	1e42      	subs	r2, r0, #1
 800946e:	4299      	cmp	r1, r3
 8009470:	d00a      	beq.n	8009488 <memmove+0x26>
 8009472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009476:	f802 4f01 	strb.w	r4, [r2, #1]!
 800947a:	e7f8      	b.n	800946e <memmove+0xc>
 800947c:	4283      	cmp	r3, r0
 800947e:	d9f5      	bls.n	800946c <memmove+0xa>
 8009480:	1881      	adds	r1, r0, r2
 8009482:	1ad2      	subs	r2, r2, r3
 8009484:	42d3      	cmn	r3, r2
 8009486:	d100      	bne.n	800948a <memmove+0x28>
 8009488:	bd10      	pop	{r4, pc}
 800948a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800948e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009492:	e7f7      	b.n	8009484 <memmove+0x22>

08009494 <_realloc_r>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	4607      	mov	r7, r0
 8009498:	4614      	mov	r4, r2
 800949a:	460e      	mov	r6, r1
 800949c:	b921      	cbnz	r1, 80094a8 <_realloc_r+0x14>
 800949e:	4611      	mov	r1, r2
 80094a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094a4:	f7ff bc6c 	b.w	8008d80 <_malloc_r>
 80094a8:	b922      	cbnz	r2, 80094b4 <_realloc_r+0x20>
 80094aa:	f7ff fc1b 	bl	8008ce4 <_free_r>
 80094ae:	4625      	mov	r5, r4
 80094b0:	4628      	mov	r0, r5
 80094b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094b4:	f000 f814 	bl	80094e0 <_malloc_usable_size_r>
 80094b8:	42a0      	cmp	r0, r4
 80094ba:	d20f      	bcs.n	80094dc <_realloc_r+0x48>
 80094bc:	4621      	mov	r1, r4
 80094be:	4638      	mov	r0, r7
 80094c0:	f7ff fc5e 	bl	8008d80 <_malloc_r>
 80094c4:	4605      	mov	r5, r0
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d0f2      	beq.n	80094b0 <_realloc_r+0x1c>
 80094ca:	4631      	mov	r1, r6
 80094cc:	4622      	mov	r2, r4
 80094ce:	f7ff ffbd 	bl	800944c <memcpy>
 80094d2:	4631      	mov	r1, r6
 80094d4:	4638      	mov	r0, r7
 80094d6:	f7ff fc05 	bl	8008ce4 <_free_r>
 80094da:	e7e9      	b.n	80094b0 <_realloc_r+0x1c>
 80094dc:	4635      	mov	r5, r6
 80094de:	e7e7      	b.n	80094b0 <_realloc_r+0x1c>

080094e0 <_malloc_usable_size_r>:
 80094e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e4:	1f18      	subs	r0, r3, #4
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bfbc      	itt	lt
 80094ea:	580b      	ldrlt	r3, [r1, r0]
 80094ec:	18c0      	addlt	r0, r0, r3
 80094ee:	4770      	bx	lr

080094f0 <_init>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr

080094fc <_fini>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	bf00      	nop
 8009500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009502:	bc08      	pop	{r3}
 8009504:	469e      	mov	lr, r3
 8009506:	4770      	bx	lr
